
RealTemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aab4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800acb8  0800acb8  0001acb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b174  0800b174  00020320  2**0
                  CONTENTS
  4 .ARM          00000008  0800b174  0800b174  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b17c  0800b17c  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b17c  0800b17c  0001b17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b180  0800b180  0001b180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e0  0800b364  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000280  0800b404  00020280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000516c  20000320  0800b4a4  00020320  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000548c  0800b4a4  0002548c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002745f  00000000  00000000  0002034e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004671  00000000  00000000  000477ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001df0  00000000  00000000  0004be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001c38  00000000  00000000  0004dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005a45  00000000  00000000  0004f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022a13  00000000  00000000  0005528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011151f  00000000  00000000  00077ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001891bf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008ec8  00000000  00000000  00189210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000320 	.word	0x20000320
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ac9c 	.word	0x0800ac9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000324 	.word	0x20000324
 800023c:	0800ac9c 	.word	0x0800ac9c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:

TaskProfiler TempSensorProfiler;
TaskProfiler LedUpdateProfiler;

int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af02      	add	r7, sp, #8

	// Initializations
	HAL_Init();
 80005fa:	f001 f810 	bl	800161e <HAL_Init>
	SystemClock_Config();
 80005fe:	f000 f9dd 	bl	80009bc <SystemClock_Config>
	MX_GPIO_Init();
 8000602:	f000 fb39 	bl	8000c78 <MX_GPIO_Init>
	MX_ETH_Init();
 8000606:	f000 fa4b 	bl	8000aa0 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800060a:	f000 fad7 	bl	8000bbc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 fb05 	bl	8000c1c <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8000612:	f000 fa93 	bl	8000b3c <MX_I2C1_Init>

	// Create a queue to transfer temperature data between tasks
	temperatureQueue = xQueueCreate(100, sizeof(float));
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	2064      	movs	r0, #100	; 0x64
 800061c:	f005 fa82 	bl	8005b24 <xQueueGenericCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <main+0x60>)
 8000624:	6013      	str	r3, [r2, #0]

	// Task for reading from temperature sensor and putting data in the queue
	xTaskCreate(TempSensorTask,
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <main+0x64>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	490a      	ldr	r1, [pc, #40]	; (800065c <main+0x68>)
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <main+0x6c>)
 8000636:	f005 ff38 	bl	80064aa <xTaskCreate>
				NULL,
				1,
				&tempSensor_handle);

	// Task to use temperature values from the queue and update LEDs
	xTaskCreate(LedUpdateTask,
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <main+0x70>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	2264      	movs	r2, #100	; 0x64
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <main+0x74>)
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <main+0x78>)
 800064a:	f005 ff2e 	bl	80064aa <xTaskCreate>
				100,
				NULL,
				2,
				&ledUpdate_handle);

	vTaskStartScheduler();
 800064e:	f006 f8bf 	bl	80067d0 <vTaskStartScheduler>

  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x5e>
 8000654:	20000a10 	.word	0x20000a10
 8000658:	20000a08 	.word	0x20000a08
 800065c:	0800acb8 	.word	0x0800acb8
 8000660:	08000671 	.word	0x08000671
 8000664:	20000a0c 	.word	0x20000a0c
 8000668:	0800acd0 	.word	0x0800acd0
 800066c:	08000775 	.word	0x08000775

08000670 <TempSensorTask>:
  {

  }
}

void TempSensorTask(void *pvParameters) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
	int16_t val;
	float temp_c;
	BaseType_t qStatus;

	while(1) {
		TempSensorProfiler++;
 8000678:	4b37      	ldr	r3, [pc, #220]	; (8000758 <TempSensorTask+0xe8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a36      	ldr	r2, [pc, #216]	; (8000758 <TempSensorTask+0xe8>)
 8000680:	6013      	str	r3, [r2, #0]

		// First byte of buffer to location of TMP102's temperature register
		buf[0] = REG_TEMP;
 8000682:	2300      	movs	r3, #0
 8000684:	733b      	strb	r3, [r7, #12]

		// Tell TMP102 we want to read
		ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	b299      	uxth	r1, r3
 800068a:	f107 020c 	add.w	r2, r7, #12
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2301      	movs	r3, #1
 8000696:	4831      	ldr	r0, [pc, #196]	; (800075c <TempSensorTask+0xec>)
 8000698:	f001 fe70 	bl	800237c <HAL_I2C_Master_Transmit>
 800069c:	4603      	mov	r3, r0
 800069e:	777b      	strb	r3, [r7, #29]

		if (ret != HAL_OK) {
 80006a0:	7f7b      	ldrb	r3, [r7, #29]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d003      	beq.n	80006ae <TempSensorTask+0x3e>
		  printf("Error Tx\r\n");
 80006a6:	482e      	ldr	r0, [pc, #184]	; (8000760 <TempSensorTask+0xf0>)
 80006a8:	f008 fbf6 	bl	8008e98 <puts>
 80006ac:	e033      	b.n	8000716 <TempSensorTask+0xa6>
		} else {

			//Read from the TMP102 sensor
			ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	b299      	uxth	r1, r3
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	4827      	ldr	r0, [pc, #156]	; (800075c <TempSensorTask+0xec>)
 80006c0:	f001 ff50 	bl	8002564 <HAL_I2C_Master_Receive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	777b      	strb	r3, [r7, #29]

		    if (ret != HAL_OK) {
 80006c8:	7f7b      	ldrb	r3, [r7, #29]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <TempSensorTask+0x66>
		    	printf("Error Rx\r\n");
 80006ce:	4825      	ldr	r0, [pc, #148]	; (8000764 <TempSensorTask+0xf4>)
 80006d0:	f008 fbe2 	bl	8008e98 <puts>
 80006d4:	e01f      	b.n	8000716 <TempSensorTask+0xa6>
		    } else {

			    // Combine the bytes - constructs our 12-bit value
			    val = ((int16_t)buf[0] << 4 | (buf[1] >> 4));
 80006d6:	7b3b      	ldrb	r3, [r7, #12]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	b21a      	sxth	r2, r3
 80006dc:	7b7b      	ldrb	r3, [r7, #13]
 80006de:	091b      	lsrs	r3, r3, #4
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	83fb      	strh	r3, [r7, #30]

			    // Convert to 2's complement, since temperature can be negative
			    if (val > 0x7FF) {
 80006e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006f0:	db03      	blt.n	80006fa <TempSensorTask+0x8a>
				    val |= 0xF00;
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80006f8:	83fb      	strh	r3, [r7, #30]
			    }

			    // Convert to float temperature value as required from datasheet (Celsius)
			    temp_c = val * 0.0625;
 80006fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006fe:	ee07 3a90 	vmov	s15, r3
 8000702:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000706:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000750 <TempSensorTask+0xe0>
 800070a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800070e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000712:	edc7 7a02 	vstr	s15, [r7, #8]
		    }
		}

		printf("Temperature(C): %.2f \r\n", temp_c);
 8000716:	edd7 7a02 	vldr	s15, [r7, #8]
 800071a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071e:	ec53 2b17 	vmov	r2, r3, d7
 8000722:	4811      	ldr	r0, [pc, #68]	; (8000768 <TempSensorTask+0xf8>)
 8000724:	f008 fb32 	bl	8008d8c <iprintf>

		// Send the temperature value into our queue for LedUpdateTask
		qStatus = xQueueSend(temperatureQueue, &temp_c, 0);
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <TempSensorTask+0xfc>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	f107 0108 	add.w	r1, r7, #8
 8000730:	2300      	movs	r3, #0
 8000732:	2200      	movs	r2, #0
 8000734:	f005 fa5c 	bl	8005bf0 <xQueueGenericSend>
 8000738:	61b8      	str	r0, [r7, #24]

		vTaskDelay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f006 f812 	bl	8006764 <vTaskDelay>

		if(qStatus != pdPASS) {
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d098      	beq.n	8000678 <TempSensorTask+0x8>
			printf("Error: Temperature data could not be sent ... \r\n");
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <TempSensorTask+0x100>)
 8000748:	f008 fba6 	bl	8008e98 <puts>
		TempSensorProfiler++;
 800074c:	e794      	b.n	8000678 <TempSensorTask+0x8>
 800074e:	bf00      	nop
 8000750:	00000000 	.word	0x00000000
 8000754:	3fb00000 	.word	0x3fb00000
 8000758:	20000a14 	.word	0x20000a14
 800075c:	20000424 	.word	0x20000424
 8000760:	0800ace0 	.word	0x0800ace0
 8000764:	0800acec 	.word	0x0800acec
 8000768:	0800acf8 	.word	0x0800acf8
 800076c:	20000a10 	.word	0x20000a10
 8000770:	0800ad10 	.word	0x0800ad10

08000774 <LedUpdateTask>:
		}
	}
}

void LedUpdateTask(void *pvParameters) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

	float temp_received;

	// Amount of time to wait to receive from front of queue
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	617b      	str	r3, [r7, #20]
	BaseType_t qStatus;

	while(1) {
		LedUpdateProfiler++;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <LedUpdateTask+0x50>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <LedUpdateTask+0x50>)
 8000788:	6013      	str	r3, [r2, #0]

		// Retrieve the temperature values from the queue
		qStatus = xQueueReceive(temperatureQueue, &temp_received, wait_time);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <LedUpdateTask+0x54>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f107 010c 	add.w	r1, r7, #12
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4618      	mov	r0, r3
 8000796:	f005 fbd1 	bl	8005f3c <xQueueReceive>
 800079a:	6138      	str	r0, [r7, #16]

		vTaskDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f005 ffe1 	bl	8006764 <vTaskDelay>

		if(qStatus == pdPASS) {
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <LedUpdateTask+0x46>

			// Reset then update LEDs
			reset_LED();
 80007a8:	f000 f812 	bl	80007d0 <reset_LED>
			led_Updater(temp_received);
 80007ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b0:	eeb0 0a67 	vmov.f32	s0, s15
 80007b4:	f000 f84a 	bl	800084c <led_Updater>
 80007b8:	e7e2      	b.n	8000780 <LedUpdateTask+0xc>

		} else {
			printf("Error! Could not receive temperature \r\n");
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <LedUpdateTask+0x58>)
 80007bc:	f008 fb6c 	bl	8008e98 <puts>
		LedUpdateProfiler++;
 80007c0:	e7de      	b.n	8000780 <LedUpdateTask+0xc>
 80007c2:	bf00      	nop
 80007c4:	20000a18 	.word	0x20000a18
 80007c8:	20000a10 	.word	0x20000a10
 80007cc:	0800ad40 	.word	0x0800ad40

080007d0 <reset_LED>:
		}
	}
}

void reset_LED() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	// Reset all GPIO pins wired to LEDs
	HAL_GPIO_WritePin(TempLed1_GPIO_Port, TempLed1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2108      	movs	r1, #8
 80007d8:	4818      	ldr	r0, [pc, #96]	; (800083c <reset_LED+0x6c>)
 80007da:	f001 fd25 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed2_GPIO_Port, TempLed2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2101      	movs	r1, #1
 80007e2:	4817      	ldr	r0, [pc, #92]	; (8000840 <reset_LED+0x70>)
 80007e4:	f001 fd20 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed3_GPIO_Port, TempLed3_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2108      	movs	r1, #8
 80007ec:	4814      	ldr	r0, [pc, #80]	; (8000840 <reset_LED+0x70>)
 80007ee:	f001 fd1b 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed4_GPIO_Port, TempLed4_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4813      	ldr	r0, [pc, #76]	; (8000844 <reset_LED+0x74>)
 80007f8:	f001 fd16 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed5_GPIO_Port, TempLed5_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <reset_LED+0x74>)
 8000802:	f001 fd11 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed6_GPIO_Port, TempLed6_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <reset_LED+0x74>)
 800080e:	f001 fd0b 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed7_GPIO_Port, TempLed7_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <reset_LED+0x74>)
 800081a:	f001 fd05 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed8_GPIO_Port, TempLed8_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <reset_LED+0x78>)
 8000826:	f001 fcff 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TempLed9_GPIO_Port, TempLed9_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <reset_LED+0x78>)
 8000832:	f001 fcf9 	bl	8002228 <HAL_GPIO_WritePin>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800
 8000844:	40021400 	.word	0x40021400
 8000848:	40021000 	.word	0x40021000

0800084c <led_Updater>:

void led_Updater(float temp) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	ed87 0a01 	vstr	s0, [r7, #4]
	// Use a range from 23.5 - 25.0 degrees Celsius to show variations in temperature - adapted to an average room temperature
	if(temp < 23.5) {
 8000856:	edd7 7a01 	vldr	s15, [r7, #4]
 800085a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800095c <led_Updater+0x110>
 800085e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000866:	d50c      	bpl.n	8000882 <led_Updater+0x36>
		HAL_GPIO_WritePin(TempLed9_GPIO_Port, TempLed9_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086e:	483c      	ldr	r0, [pc, #240]	; (8000960 <led_Updater+0x114>)
 8000870:	f001 fcda 	bl	8002228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TempLed8_GPIO_Port, TempLed8_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087a:	4839      	ldr	r0, [pc, #228]	; (8000960 <led_Updater+0x114>)
 800087c:	f001 fcd4 	bl	8002228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TempLed3_GPIO_Port, TempLed3_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(TempLed2_GPIO_Port, TempLed2_Pin, GPIO_PIN_SET);
	} else if(temp > 25.0) {
		HAL_GPIO_WritePin(TempLed1_GPIO_Port, TempLed1_Pin, GPIO_PIN_SET);
	}
}
 8000880:	e068      	b.n	8000954 <led_Updater+0x108>
	} else if(temp >= 23.5 && temp < 24.0) {
 8000882:	edd7 7a01 	vldr	s15, [r7, #4]
 8000886:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800095c <led_Updater+0x110>
 800088a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000892:	db15      	blt.n	80008c0 <led_Updater+0x74>
 8000894:	edd7 7a01 	vldr	s15, [r7, #4]
 8000898:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800089c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a4:	d50c      	bpl.n	80008c0 <led_Updater+0x74>
		HAL_GPIO_WritePin(TempLed7_GPIO_Port, TempLed7_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	482d      	ldr	r0, [pc, #180]	; (8000964 <led_Updater+0x118>)
 80008ae:	f001 fcbb 	bl	8002228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TempLed6_GPIO_Port, TempLed6_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <led_Updater+0x118>)
 80008ba:	f001 fcb5 	bl	8002228 <HAL_GPIO_WritePin>
 80008be:	e049      	b.n	8000954 <led_Updater+0x108>
	} else if(temp >= 24.0 && temp < 24.5) {
 80008c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80008c4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80008c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d0:	db13      	blt.n	80008fa <led_Updater+0xae>
 80008d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000968 <led_Updater+0x11c>
 80008da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e2:	d50a      	bpl.n	80008fa <led_Updater+0xae>
		HAL_GPIO_WritePin(TempLed5_GPIO_Port, TempLed5_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2120      	movs	r1, #32
 80008e8:	481e      	ldr	r0, [pc, #120]	; (8000964 <led_Updater+0x118>)
 80008ea:	f001 fc9d 	bl	8002228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TempLed4_GPIO_Port, TempLed4_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2108      	movs	r1, #8
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <led_Updater+0x118>)
 80008f4:	f001 fc98 	bl	8002228 <HAL_GPIO_WritePin>
 80008f8:	e02c      	b.n	8000954 <led_Updater+0x108>
	} else if(temp >= 24.5 && temp < 25.0) {
 80008fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80008fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000968 <led_Updater+0x11c>
 8000902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090a:	db13      	blt.n	8000934 <led_Updater+0xe8>
 800090c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000910:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091c:	d50a      	bpl.n	8000934 <led_Updater+0xe8>
		HAL_GPIO_WritePin(TempLed3_GPIO_Port, TempLed3_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	2108      	movs	r1, #8
 8000922:	4812      	ldr	r0, [pc, #72]	; (800096c <led_Updater+0x120>)
 8000924:	f001 fc80 	bl	8002228 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TempLed2_GPIO_Port, TempLed2_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <led_Updater+0x120>)
 800092e:	f001 fc7b 	bl	8002228 <HAL_GPIO_WritePin>
 8000932:	e00f      	b.n	8000954 <led_Updater+0x108>
	} else if(temp > 25.0) {
 8000934:	edd7 7a01 	vldr	s15, [r7, #4]
 8000938:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800093c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	dc00      	bgt.n	8000948 <led_Updater+0xfc>
}
 8000946:	e005      	b.n	8000954 <led_Updater+0x108>
		HAL_GPIO_WritePin(TempLed1_GPIO_Port, TempLed1_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2108      	movs	r1, #8
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <led_Updater+0x124>)
 800094e:	f001 fc6b 	bl	8002228 <HAL_GPIO_WritePin>
}
 8000952:	e7ff      	b.n	8000954 <led_Updater+0x108>
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	41bc0000 	.word	0x41bc0000
 8000960:	40021000 	.word	0x40021000
 8000964:	40021400 	.word	0x40021400
 8000968:	41c40000 	.word	0x41c40000
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <uart3_write>:

// Custom function for writing to UART
int uart3_write(int ch) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	 // Check that transmit data register is empty  in the Interrupt and Service register
	while(!(USART3->ISR & USART_ISR_TXE));
 800097c:	bf00      	nop
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <uart3_write+0x2c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f9      	beq.n	800097e <uart3_write+0xa>
	// Write our data to the transmit data register
	USART3->TDR = (ch & 0xFF);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <uart3_write+0x2c>)
 800098e:	b2db      	uxtb	r3, r3
 8000990:	6293      	str	r3, [r2, #40]	; 0x28
	return ch;
 8000992:	687b      	ldr	r3, [r7, #4]
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40004800 	.word	0x40004800

080009a4 <__io_putchar>:

// Wires printf to use UART
int __io_putchar(int ch) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffe1 	bl	8000974 <uart3_write>
	return ch;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2234      	movs	r2, #52	; 0x34
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fcff 	bl	80083ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009e0:	f002 fb02 	bl	8002fe8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <SystemClock_Config+0xdc>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <SystemClock_Config+0xdc>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xdc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <SystemClock_Config+0xe0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <SystemClock_Config+0xe0>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <SystemClock_Config+0xe0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a30:	2360      	movs	r3, #96	; 0x60
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fb2f 	bl	80030a8 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a50:	f000 fa34 	bl	8000ebc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a54:	f002 fad8 	bl	8003008 <HAL_PWREx_EnableOverDrive>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a5e:	f000 fa2d 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fdc0 	bl	8003604 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a8a:	f000 fa17 	bl	8000ebc <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <MX_ETH_Init>:

static void MX_ETH_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_ETH_Init+0x84>)
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <MX_ETH_Init+0x88>)
 8000aa8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000ab8:	22e1      	movs	r2, #225	; 0xe1
 8000aba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_ETH_Init+0x84>)
 8000ad0:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <MX_ETH_Init+0x8c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_ETH_Init+0x84>)
 8000ad6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ada:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_ETH_Init+0x84>)
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <MX_ETH_Init+0x90>)
 8000ae0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_ETH_Init+0x84>)
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MX_ETH_Init+0x94>)
 8000ae6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_ETH_Init+0x84>)
 8000aea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_ETH_Init+0x84>)
 8000af2:	f000 fec7 	bl	8001884 <HAL_ETH_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 f9de 	bl	8000ebc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b00:	2238      	movs	r2, #56	; 0x38
 8000b02:	2100      	movs	r1, #0
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_ETH_Init+0x98>)
 8000b06:	f007 fc62 	bl	80083ce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_ETH_Init+0x98>)
 8000b0c:	2221      	movs	r2, #33	; 0x21
 8000b0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_ETH_Init+0x98>)
 8000b12:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_ETH_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000374 	.word	0x20000374
 8000b28:	40028000 	.word	0x40028000
 8000b2c:	20000a1c 	.word	0x20000a1c
 8000b30:	20000280 	.word	0x20000280
 8000b34:	200001e0 	.word	0x200001e0
 8000b38:	2000033c 	.word	0x2000033c

08000b3c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_I2C1_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <MX_I2C1_Init+0x7c>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b78:	f001 fb70 	bl	800225c <HAL_I2C_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b82:	f000 f99b 	bl	8000ebc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b8a:	f002 f84d 	bl	8002c28 <HAL_I2CEx_ConfigAnalogFilter>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b94:	f000 f992 	bl	8000ebc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_I2C1_Init+0x74>)
 8000b9c:	f002 f88f 	bl	8002cbe <HAL_I2CEx_ConfigDigitalFilter>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 f989 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000424 	.word	0x20000424
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	20303e5d 	.word	0x20303e5d

08000bbc <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART3_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART3_UART_Init+0x58>)
 8000c00:	f003 fe60 	bl	80048c4 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f000 f957 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000478 	.word	0x20000478
 8000c18:	40004800 	.word	0x40004800

08000c1c <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	f002 f879 	bl	8002d56 <HAL_PCD_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f000 f927 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000500 	.word	0x20000500

08000c78 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a7a      	ldr	r2, [pc, #488]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b78      	ldr	r3, [pc, #480]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b75      	ldr	r3, [pc, #468]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a74      	ldr	r2, [pc, #464]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b72      	ldr	r3, [pc, #456]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a6e      	ldr	r2, [pc, #440]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b69      	ldr	r3, [pc, #420]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a68      	ldr	r2, [pc, #416]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b63      	ldr	r3, [pc, #396]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a62      	ldr	r2, [pc, #392]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b5d      	ldr	r3, [pc, #372]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a5c      	ldr	r2, [pc, #368]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a50      	ldr	r2, [pc, #320]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <MX_GPIO_Init+0x204>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TempLed4_Pin|TempLed5_Pin|TempLed6_Pin|TempLed7_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f242 4128 	movw	r1, #9256	; 0x2428
 8000d54:	484a      	ldr	r0, [pc, #296]	; (8000e80 <MX_GPIO_Init+0x208>)
 8000d56:	f001 fa67 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TempLed2_Pin|TempLed3_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2109      	movs	r1, #9
 8000d5e:	4849      	ldr	r0, [pc, #292]	; (8000e84 <MX_GPIO_Init+0x20c>)
 8000d60:	f001 fa62 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TempLed1_GPIO_Port, TempLed1_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	4847      	ldr	r0, [pc, #284]	; (8000e88 <MX_GPIO_Init+0x210>)
 8000d6a:	f001 fa5d 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d74:	4845      	ldr	r0, [pc, #276]	; (8000e8c <MX_GPIO_Init+0x214>)
 8000d76:	f001 fa57 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TempLed8_Pin|TempLed9_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000d80:	4843      	ldr	r0, [pc, #268]	; (8000e90 <MX_GPIO_Init+0x218>)
 8000d82:	f001 fa51 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4842      	ldr	r0, [pc, #264]	; (8000e94 <MX_GPIO_Init+0x21c>)
 8000d8c:	f001 fa4c 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4837      	ldr	r0, [pc, #220]	; (8000e84 <MX_GPIO_Init+0x20c>)
 8000da8:	f001 f892 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TempLed4_Pin TempLed5_Pin TempLed6_Pin TempLed7_Pin */
  GPIO_InitStruct.Pin = TempLed4_Pin|TempLed5_Pin|TempLed6_Pin|TempLed7_Pin;
 8000dac:	f242 4328 	movw	r3, #9256	; 0x2428
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482e      	ldr	r0, [pc, #184]	; (8000e80 <MX_GPIO_Init+0x208>)
 8000dc6:	f001 f883 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TempLed2_Pin TempLed3_Pin */
  GPIO_InitStruct.Pin = TempLed2_Pin|TempLed3_Pin;
 8000dca:	2309      	movs	r3, #9
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4828      	ldr	r0, [pc, #160]	; (8000e84 <MX_GPIO_Init+0x20c>)
 8000de2:	f001 f875 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TempLed1_Pin */
  GPIO_InitStruct.Pin = TempLed1_Pin;
 8000de6:	2308      	movs	r3, #8
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TempLed1_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_GPIO_Init+0x210>)
 8000dfe:	f001 f867 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e02:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481c      	ldr	r0, [pc, #112]	; (8000e8c <MX_GPIO_Init+0x214>)
 8000e1c:	f001 f858 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TempLed8_Pin TempLed9_Pin */
  GPIO_InitStruct.Pin = TempLed8_Pin|TempLed9_Pin;
 8000e20:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <MX_GPIO_Init+0x218>)
 8000e3a:	f001 f849 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x21c>)
 8000e56:	f001 f83b 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_GPIO_Init+0x21c>)
 8000e6e:	f001 f82f 	bl	8001ed0 <HAL_GPIO_Init>

}
 8000e72:	bf00      	nop
 8000e74:	3738      	adds	r7, #56	; 0x38
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40021800 	.word	0x40021800

08000e98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eaa:	f000 fbc5 	bl	8001638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40010000 	.word	0x40010000

08000ebc <Error_Handler>:

void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	210f      	movs	r1, #15
 8000f02:	f06f 0001 	mvn.w	r0, #1
 8000f06:	f000 fc93 	bl	8001830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_ETH_MspInit+0x158>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	f040 8096 	bne.w	8001068 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	4b47      	ldr	r3, [pc, #284]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a46      	ldr	r2, [pc, #280]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b44      	ldr	r3, [pc, #272]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	4b41      	ldr	r3, [pc, #260]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a40      	ldr	r2, [pc, #256]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a34      	ldr	r2, [pc, #208]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a28      	ldr	r2, [pc, #160]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fe4:	2332      	movs	r3, #50	; 0x32
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	481e      	ldr	r0, [pc, #120]	; (8001078 <HAL_ETH_MspInit+0x160>)
 8001000:	f000 ff66 	bl	8001ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001004:	2386      	movs	r3, #134	; 0x86
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001014:	230b      	movs	r3, #11
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <HAL_ETH_MspInit+0x164>)
 8001020:	f000 ff56 	bl	8001ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	480f      	ldr	r0, [pc, #60]	; (8001080 <HAL_ETH_MspInit+0x168>)
 8001042:	f000 ff45 	bl	8001ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001046:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001058:	230b      	movs	r3, #11
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <HAL_ETH_MspInit+0x16c>)
 8001064:	f000 ff34 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3738      	adds	r7, #56	; 0x38
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40028000 	.word	0x40028000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020800 	.word	0x40020800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40021800 	.word	0x40021800

08001088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ae      	sub	sp, #184	; 0xb8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2290      	movs	r2, #144	; 0x90
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f007 f990 	bl	80083ce <memset>
  if(hi2c->Instance==I2C1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <HAL_I2C_MspInit+0xb4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d13c      	bne.n	8001132 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fcf4 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010d2:	f7ff fef3 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_I2C_MspInit+0xb8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_I2C_MspInit+0xb8>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_I2C_MspInit+0xb8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f6:	2312      	movs	r3, #18
 80010f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001108:	2304      	movs	r3, #4
 800110a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001112:	4619      	mov	r1, r3
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <HAL_I2C_MspInit+0xbc>)
 8001116:	f000 fedb 	bl	8001ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_I2C_MspInit+0xb8>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_I2C_MspInit+0xb8>)
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_I2C_MspInit+0xb8>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	37b8      	adds	r7, #184	; 0xb8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40005400 	.word	0x40005400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ae      	sub	sp, #184	; 0xb8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2290      	movs	r2, #144	; 0x90
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f007 f930 	bl	80083ce <memset>
  if(huart->Instance==USART3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_UART_MspInit+0xb4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d13c      	bne.n	80011f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800117e:	2300      	movs	r3, #0
 8001180:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4618      	mov	r0, r3
 8001188:	f002 fc94 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001192:	f7ff fe93 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_UART_MspInit+0xb8>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_UART_MspInit+0xb8>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_UART_MspInit+0xb8>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_UART_MspInit+0xb8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_UART_MspInit+0xb8>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_UART_MspInit+0xb8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e0:	2307      	movs	r3, #7
 80011e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_MspInit+0xbc>)
 80011ee:	f000 fe6f 	bl	8001ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	37b8      	adds	r7, #184	; 0xb8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40004800 	.word	0x40004800
 8001200:	40023800 	.word	0x40023800
 8001204:	40020c00 	.word	0x40020c00

08001208 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ae      	sub	sp, #184	; 0xb8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2290      	movs	r2, #144	; 0x90
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f007 f8d0 	bl	80083ce <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001236:	d159      	bne.n	80012ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800123c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fc33 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001254:	f7ff fe32 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001270:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800128a:	230a      	movs	r3, #10
 800128c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001294:	4619      	mov	r1, r3
 8001296:	4818      	ldr	r0, [pc, #96]	; (80012f8 <HAL_PCD_MspInit+0xf0>)
 8001298:	f000 fe1a 	bl	8001ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <HAL_PCD_MspInit+0xf0>)
 80012b8:	f000 fe0a 	bl	8001ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c6:	6353      	str	r3, [r2, #52]	; 0x34
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6453      	str	r3, [r2, #68]	; 0x44
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	37b8      	adds	r7, #184	; 0xb8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000

080012fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_InitTick+0xcc>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <HAL_InitTick+0xcc>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6453      	str	r3, [r2, #68]	; 0x44
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_InitTick+0xcc>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fb8e 	bl	8003a50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001334:	f002 fb78 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8001338:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_InitTick+0xd0>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	3b01      	subs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_InitTick+0xd4>)
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <HAL_InitTick+0xd8>)
 800134c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_InitTick+0xd4>)
 8001350:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001354:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_InitTick+0xd4>)
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_InitTick+0xd4>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_InitTick+0xd4>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_InitTick+0xd4>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <HAL_InitTick+0xd4>)
 8001370:	f002 ffc8 	bl	8004304 <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800137a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800137e:	2b00      	cmp	r3, #0
 8001380:	d11b      	bne.n	80013ba <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001382:	4813      	ldr	r0, [pc, #76]	; (80013d0 <HAL_InitTick+0xd4>)
 8001384:	f003 f820 	bl	80043c8 <HAL_TIM_Base_Start_IT>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800138e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001392:	2b00      	cmp	r3, #0
 8001394:	d111      	bne.n	80013ba <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001396:	2019      	movs	r0, #25
 8001398:	f000 fa66 	bl	8001868 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	d808      	bhi.n	80013b4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80013a2:	2200      	movs	r2, #0
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	2019      	movs	r0, #25
 80013a8:	f000 fa42 	bl	8001830 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_InitTick+0xdc>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e002      	b.n	80013ba <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	20000a24 	.word	0x20000a24
 80013d4:	40010000 	.word	0x40010000
 80013d8:	20000004 	.word	0x20000004

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800140e:	f003 f853 	bl	80044b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000a24 	.word	0x20000a24

0800141c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_kill>:

int _kill(int pid, int sig)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001436:	f006 fe99 	bl	800816c <__errno>
 800143a:	4603      	mov	r3, r0
 800143c:	2216      	movs	r2, #22
 800143e:	601a      	str	r2, [r3, #0]
	return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_exit>:

void _exit (int status)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffe7 	bl	800142c <_kill>
	while (1) {}		/* Make sure we hang here */
 800145e:	e7fe      	b.n	800145e <_exit+0x12>

08001460 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e00a      	b.n	8001488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001472:	f3af 8000 	nop.w
 8001476:	4601      	mov	r1, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	b2ca      	uxtb	r2, r1
 8001480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbf0      	blt.n	8001472 <_read+0x12>
	}

return len;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e009      	b.n	80014c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fa75 	bl	80009a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf1      	blt.n	80014ac <_write+0x12>
	}
	return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_close>:

int _close(int file)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fa:	605a      	str	r2, [r3, #4]
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f006 fdfe 	bl	800816c <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20080000 	.word	0x20080000
 800159c:	00000400 	.word	0x00000400
 80015a0:	20000a70 	.word	0x20000a70
 80015a4:	20005490 	.word	0x20005490

080015a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f6:	f7ff ffd7 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f006 feb3 	bl	8008364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7fe fff9 	bl	80005f4 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001610:	0800b184 	.word	0x0800b184
  ldr r2, =_sbss
 8001614:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001618:	2000548c 	.word	0x2000548c

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>

0800161e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001622:	2003      	movs	r0, #3
 8001624:	f000 f8f9 	bl	800181a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001628:	200f      	movs	r0, #15
 800162a:	f7ff fe67 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162e:	f7ff fc4b 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	20000a74 	.word	0x20000a74

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000a74 	.word	0x20000a74

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <__NVIC_SetPriorityGrouping+0x40>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <__NVIC_SetPriorityGrouping+0x40>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	05fa0000 	.word	0x05fa0000

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff4c 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001842:	f7ff ff61 	bl	8001708 <__NVIC_GetPriorityGrouping>
 8001846:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff ffb1 	bl	80017b4 <NVIC_EncodePriority>
 8001852:	4602      	mov	r2, r0
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff80 	bl	8001760 <__NVIC_SetPriority>
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff54 	bl	8001724 <__NVIC_EnableIRQ>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e06a      	b.n	800196c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189c:	2b00      	cmp	r3, #0
 800189e:	d106      	bne.n	80018ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2223      	movs	r2, #35	; 0x23
 80018a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fb35 	bl	8000f18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <HAL_ETH_Init+0xf0>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <HAL_ETH_Init+0xf0>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_ETH_Init+0xf0>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_ETH_Init+0xf4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a2b      	ldr	r2, [pc, #172]	; (8001978 <HAL_ETH_Init+0xf4>)
 80018cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_ETH_Init+0xf4>)
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4927      	ldr	r1, [pc, #156]	; (8001978 <HAL_ETH_Init+0xf4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_ETH_Init+0xf4>)
 80018e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fc:	f7ff feb0 	bl	8001660 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001902:	e011      	b.n	8001928 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001904:	f7ff feac 	bl	8001660 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001912:	d909      	bls.n	8001928 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2204      	movs	r2, #4
 8001918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	22e0      	movs	r2, #224	; 0xe0
 8001920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e021      	b.n	800196c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1e4      	bne.n	8001904 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f958 	bl	8001bf0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f9ff 	bl	8001d44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fa55 	bl	8001df6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	461a      	mov	r2, r3
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f9bd 	bl	8001cd4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2210      	movs	r2, #16
 8001966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40013800 	.word	0x40013800

0800197c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <ETH_SetMACConfig+0x15c>)
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	7c1b      	ldrb	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <ETH_SetMACConfig+0x28>
 800199e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019a2:	e000      	b.n	80019a6 <ETH_SetMACConfig+0x2a>
 80019a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	7c5b      	ldrb	r3, [r3, #17]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <ETH_SetMACConfig+0x38>
 80019ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b2:	e000      	b.n	80019b6 <ETH_SetMACConfig+0x3a>
 80019b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7fdb      	ldrb	r3, [r3, #31]
 80019c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	7f92      	ldrb	r2, [r2, #30]
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	d102      	bne.n	80019da <ETH_SetMACConfig+0x5e>
 80019d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d8:	e000      	b.n	80019dc <ETH_SetMACConfig+0x60>
 80019da:	2200      	movs	r2, #0
                        macconf->Speed |
 80019dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	7f1b      	ldrb	r3, [r3, #28]
 80019e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d102      	bne.n	8001a04 <ETH_SetMACConfig+0x88>
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	e000      	b.n	8001a06 <ETH_SetMACConfig+0x8a>
 8001a04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	7bdb      	ldrb	r3, [r3, #15]
 8001a0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff fe1e 	bl	8001678 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a62:	2a00      	cmp	r2, #0
 8001a64:	d101      	bne.n	8001a6a <ETH_SetMACConfig+0xee>
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	e000      	b.n	8001a6c <ETH_SetMACConfig+0xf0>
 8001a6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a7a:	2a01      	cmp	r2, #1
 8001a7c:	d101      	bne.n	8001a82 <ETH_SetMACConfig+0x106>
 8001a7e:	2208      	movs	r2, #8
 8001a80:	e000      	b.n	8001a84 <ETH_SetMACConfig+0x108>
 8001a82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a8c:	2a01      	cmp	r2, #1
 8001a8e:	d101      	bne.n	8001a94 <ETH_SetMACConfig+0x118>
 8001a90:	2204      	movs	r2, #4
 8001a92:	e000      	b.n	8001a96 <ETH_SetMACConfig+0x11a>
 8001a94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d101      	bne.n	8001aa6 <ETH_SetMACConfig+0x12a>
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	e000      	b.n	8001aa8 <ETH_SetMACConfig+0x12c>
 8001aa6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fdd9 	bl	8001678 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	ff20810f 	.word	0xff20810f

08001adc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <ETH_SetDMAConfig+0x110>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	7b1b      	ldrb	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <ETH_SetDMAConfig+0x2c>
 8001b02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b06:	e000      	b.n	8001b0a <ETH_SetDMAConfig+0x2e>
 8001b08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	7b5b      	ldrb	r3, [r3, #13]
 8001b0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	7f52      	ldrb	r2, [r2, #29]
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	d102      	bne.n	8001b20 <ETH_SetDMAConfig+0x44>
 8001b1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b1e:	e000      	b.n	8001b22 <ETH_SetDMAConfig+0x46>
 8001b20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	7b9b      	ldrb	r3, [r3, #14]
 8001b28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7f1b      	ldrb	r3, [r3, #28]
 8001b36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	7f9b      	ldrb	r3, [r3, #30]
 8001b3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff fd80 	bl	8001678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	461a      	mov	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ba4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ba6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bc2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff fd51 	bl	8001678 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f8de3f23 	.word	0xf8de3f23

08001bf0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0a6      	sub	sp, #152	; 0x98
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fe86 	bl	800197c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001caa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff08 	bl	8001adc <ETH_SetDMAConfig>
}
 8001ccc:	bf00      	nop
 8001cce:	3798      	adds	r7, #152	; 0x98
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3305      	adds	r3, #5
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	3204      	adds	r2, #4
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <ETH_MACAddressConfig+0x68>)
 8001cf6:	4413      	add	r3, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3303      	adds	r3, #3
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	061a      	lsls	r2, r3, #24
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3302      	adds	r3, #2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3301      	adds	r3, #1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <ETH_MACAddressConfig+0x6c>)
 8001d26:	4413      	add	r3, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40028040 	.word	0x40028040
 8001d40:	40028044 	.word	0x40028044

08001d44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e03e      	b.n	8001dd0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68d9      	ldr	r1, [r3, #12]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	3206      	adds	r2, #6
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d80c      	bhi.n	8001db4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68d9      	ldr	r1, [r3, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	e004      	b.n	8001dbe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	461a      	mov	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d9bd      	bls.n	8001d52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	611a      	str	r2, [r3, #16]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e046      	b.n	8001e92 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6919      	ldr	r1, [r3, #16]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001e48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	3212      	adds	r2, #18
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d80c      	bhi.n	8001e82 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6919      	ldr	r1, [r3, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	e004      	b.n	8001e8c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d9b5      	bls.n	8001e04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e175      	b.n	80021dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8164 	bne.w	80021d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x56>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80be 	beq.w	80021d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_GPIO_Init+0x324>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_GPIO_Init+0x324>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002072:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <HAL_GPIO_Init+0x328>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_GPIO_Init+0x32c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d037      	beq.n	800210e <HAL_GPIO_Init+0x23e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_GPIO_Init+0x330>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <HAL_GPIO_Init+0x23a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a56      	ldr	r2, [pc, #344]	; (8002204 <HAL_GPIO_Init+0x334>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <HAL_GPIO_Init+0x236>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a55      	ldr	r2, [pc, #340]	; (8002208 <HAL_GPIO_Init+0x338>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x232>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_GPIO_Init+0x33c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x22e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a53      	ldr	r2, [pc, #332]	; (8002210 <HAL_GPIO_Init+0x340>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x22a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_GPIO_Init+0x344>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x226>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a51      	ldr	r2, [pc, #324]	; (8002218 <HAL_GPIO_Init+0x348>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x222>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <HAL_GPIO_Init+0x34c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x21e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_GPIO_Init+0x350>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x21a>
 80020e6:	2309      	movs	r3, #9
 80020e8:	e012      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020ea:	230a      	movs	r3, #10
 80020ec:	e010      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e00e      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00c      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00a      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x240>
 80020fe:	2304      	movs	r3, #4
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x240>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x240>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x240>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x240>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	; (80021f8 <HAL_GPIO_Init+0x328>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_GPIO_Init+0x354>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a34      	ldr	r2, [pc, #208]	; (8002224 <HAL_GPIO_Init+0x354>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_GPIO_Init+0x354>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <HAL_GPIO_Init+0x354>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_GPIO_Init+0x354>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_GPIO_Init+0x354>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_GPIO_Init+0x354>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <HAL_GPIO_Init+0x354>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f ae86 	bls.w	8001ef0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40021400 	.word	0x40021400
 8002214:	40021800 	.word	0x40021800
 8002218:	40021c00 	.word	0x40021c00
 800221c:	40022000 	.word	0x40022000
 8002220:	40022400 	.word	0x40022400
 8002224:	40013c00 	.word	0x40013c00

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe ff00 	bl	8001088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e006      	b.n	80022e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d104      	bne.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_I2C_Init+0x11c>)
 8002302:	430b      	orrs	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	02008000 	.word	0x02008000

0800237c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	817b      	strh	r3, [r7, #10]
 800238c:	4613      	mov	r3, r2
 800238e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 80da 	bne.w	8002552 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x30>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0d3      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b4:	f7ff f954 	bl	8001660 <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f9e6 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0be      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	; 0x21
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2210      	movs	r2, #16
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	893a      	ldrh	r2, [r7, #8]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2bff      	cmp	r3, #255	; 0xff
 8002406:	d90e      	bls.n	8002426 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_I2C_Master_Transmit+0x1e0>)
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fbd0 	bl	8002bc4 <I2C_TransferConfig>
 8002424:	e06c      	b.n	8002500 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_I2C_Master_Transmit+0x1e0>)
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fbbf 	bl	8002bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002446:	e05b      	b.n	8002500 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	6a39      	ldr	r1, [r7, #32]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f9e3 	bl	8002818 <I2C_WaitOnTXISFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e07b      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d034      	beq.n	8002500 <HAL_I2C_Master_Transmit+0x184>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d130      	bne.n	8002500 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2200      	movs	r2, #0
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f975 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e04d      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2bff      	cmp	r3, #255	; 0xff
 80024c0:	d90e      	bls.n	80024e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	22ff      	movs	r2, #255	; 0xff
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fb73 	bl	8002bc4 <I2C_TransferConfig>
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fb62 	bl	8002bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d19e      	bne.n	8002448 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f9c2 	bl	8002898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01a      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2220      	movs	r2, #32
 8002524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_I2C_Master_Transmit+0x1e4>)
 8002532:	400b      	ands	r3, r1
 8002534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	80002000 	.word	0x80002000
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
 8002574:	4613      	mov	r3, r2
 8002576:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b20      	cmp	r3, #32
 8002582:	f040 80db 	bne.w	800273c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_I2C_Master_Receive+0x30>
 8002590:	2302      	movs	r3, #2
 8002592:	e0d4      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800259c:	f7ff f860 	bl	8001660 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2319      	movs	r3, #25
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f8f2 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0bf      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2222      	movs	r2, #34	; 0x22
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2210      	movs	r2, #16
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2bff      	cmp	r3, #255	; 0xff
 80025ee:	d90e      	bls.n	800260e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	22ff      	movs	r2, #255	; 0xff
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	8979      	ldrh	r1, [r7, #10]
 80025fe:	4b52      	ldr	r3, [pc, #328]	; (8002748 <HAL_I2C_Master_Receive+0x1e4>)
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fadc 	bl	8002bc4 <I2C_TransferConfig>
 800260c:	e06d      	b.n	80026ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	b2da      	uxtb	r2, r3
 800261e:	8979      	ldrh	r1, [r7, #10]
 8002620:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_I2C_Master_Receive+0x1e4>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 facb 	bl	8002bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800262e:	e05c      	b.n	80026ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	6a39      	ldr	r1, [r7, #32]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f96b 	bl	8002910 <I2C_WaitOnRXNEFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e07c      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d034      	beq.n	80026ea <HAL_I2C_Master_Receive+0x186>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d130      	bne.n	80026ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2200      	movs	r2, #0
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f880 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e04d      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2bff      	cmp	r3, #255	; 0xff
 80026aa:	d90e      	bls.n	80026ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa7e 	bl	8002bc4 <I2C_TransferConfig>
 80026c8:	e00f      	b.n	80026ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa6d 	bl	8002bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d19d      	bne.n	8002630 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8cd 	bl	8002898 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e01a      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2220      	movs	r2, #32
 800270e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_I2C_Master_Receive+0x1e8>)
 800271c:	400b      	ands	r3, r1
 800271e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	80002400 	.word	0x80002400
 800274c:	fe00e800 	.word	0xfe00e800

08002750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b02      	cmp	r3, #2
 8002764:	d103      	bne.n	800276e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d007      	beq.n	800278c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	619a      	str	r2, [r3, #24]
  }
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	e022      	b.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d01e      	beq.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7fe ff55 	bl	8001660 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e00f      	b.n	8002810 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	429a      	cmp	r2, r3
 800280c:	d0cd      	beq.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002824:	e02c      	b.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f8ea 	bl	8002a04 <I2C_IsErrorOccurred>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e02a      	b.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d01e      	beq.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7fe ff0d 	bl	8001660 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d113      	bne.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d1cb      	bne.n	8002826 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a4:	e028      	b.n	80028f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8aa 	bl	8002a04 <I2C_IsErrorOccurred>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e026      	b.n	8002908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe fed1 	bl	8001660 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d113      	bne.n	80028f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e007      	b.n	8002908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d1cf      	bne.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800291c:	e064      	b.n	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f86e 	bl	8002a04 <I2C_IsErrorOccurred>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e062      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b20      	cmp	r3, #32
 800293e:	d138      	bne.n	80029b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d105      	bne.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e04e      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b10      	cmp	r3, #16
 8002966:	d107      	bne.n	8002978 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2204      	movs	r2, #4
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
 8002976:	e002      	b.n	800297e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2220      	movs	r2, #32
 8002984:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002992:	400b      	ands	r3, r1
 8002994:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe fe55 	bl	8001660 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e007      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d193      	bne.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	fe00e800 	.word	0xfe00e800

08002a04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d068      	beq.n	8002b02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a38:	e049      	b.n	8002ace <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d045      	beq.n	8002ace <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fe0d 	bl	8001660 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_IsErrorOccurred+0x54>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13a      	bne.n	8002ace <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7a:	d121      	bne.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a82:	d01d      	beq.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d01a      	beq.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a9a:	f7fe fde1 	bl	8001660 <HAL_GetTick>
 8002a9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa0:	e00e      	b.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aa2:	f7fe fddd 	bl	8001660 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b19      	cmp	r3, #25
 8002aae:	d907      	bls.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f043 0320 	orr.w	r3, r3, #32
 8002ab6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002abe:	e006      	b.n	8002ace <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d1e9      	bne.n	8002aa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d003      	beq.n	8002ae4 <I2C_IsErrorOccurred+0xe0>
 8002adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0aa      	beq.n	8002a3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2220      	movs	r2, #32
 8002af2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fde9 	bl	8002750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <I2C_IsErrorOccurred+0x1bc>)
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	fe00e800 	.word	0xfe00e800

08002bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bdc:	7a7b      	ldrb	r3, [r7, #9]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bf2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	0d5b      	lsrs	r3, r3, #21
 8002bfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <I2C_TransferConfig+0x60>)
 8002c04:	430b      	orrs	r3, r1
 8002c06:	43db      	mvns	r3, r3
 8002c08:	ea02 0103 	and.w	r1, r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	03ff63ff 	.word	0x03ff63ff

08002c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d138      	bne.n	8002cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e032      	b.n	8002cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d139      	bne.n	8002d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e033      	b.n	8002d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2224      	movs	r2, #36	; 0x24
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d58:	b08f      	sub	sp, #60	; 0x3c
 8002d5a:	af0a      	add	r7, sp, #40	; 0x28
 8002d5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e116      	b.n	8002f96 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fa40 	bl	8001208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fa4c 	bl	8005244 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	687e      	ldr	r6, [r7, #4]
 8002db4:	466d      	mov	r5, sp
 8002db6:	f106 0410 	add.w	r4, r6, #16
 8002dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dca:	1d33      	adds	r3, r6, #4
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f002 f9e0 	bl	8005194 <USB_CoreInit>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0d7      	b.n	8002f96 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fa3a 	bl	8005266 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e04a      	b.n	8002e8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	333d      	adds	r3, #61	; 0x3d
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	333c      	adds	r3, #60	; 0x3c
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	b298      	uxth	r0, r3
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3344      	adds	r3, #68	; 0x44
 8002e34:	4602      	mov	r2, r0
 8002e36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3340      	adds	r3, #64	; 0x40
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3348      	adds	r3, #72	; 0x48
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334c      	adds	r3, #76	; 0x4c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3354      	adds	r3, #84	; 0x54
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3af      	bcc.n	8002df8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e044      	b.n	8002f28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3b5      	bcc.n	8002e9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	687e      	ldr	r6, [r7, #4]
 8002f3a:	466d      	mov	r5, sp
 8002f3c:	f106 0410 	add.w	r4, r6, #16
 8002f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f50:	1d33      	adds	r3, r6, #4
 8002f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f54:	6838      	ldr	r0, [r7, #0]
 8002f56:	f002 f9d3 	bl	8005300 <USB_DevInit>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e014      	b.n	8002f96 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f80b 	bl	8002fa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f002 fb91 	bl	80056b6 <USB_DevDisconnect>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	10000003 	.word	0x10000003

08002fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40007000 	.word	0x40007000

08003008 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003036:	f7fe fb13 	bl	8001660 <HAL_GetTick>
 800303a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800303c:	e009      	b.n	8003052 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800303e:	f7fe fb0f 	bl	8001660 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800304c:	d901      	bls.n	8003052 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e022      	b.n	8003098 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305e:	d1ee      	bne.n	800303e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800306c:	f7fe faf8 	bl	8001660 <HAL_GetTick>
 8003070:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003072:	e009      	b.n	8003088 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003074:	f7fe faf4 	bl	8001660 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003082:	d901      	bls.n	8003088 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e007      	b.n	8003098 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003094:	d1ee      	bne.n	8003074 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000

080030a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e29b      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8087 	beq.w	80031da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030cc:	4b96      	ldr	r3, [pc, #600]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d8:	4b93      	ldr	r3, [pc, #588]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d112      	bne.n	800310a <HAL_RCC_OscConfig+0x62>
 80030e4:	4b90      	ldr	r3, [pc, #576]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f0:	d10b      	bne.n	800310a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	4b8d      	ldr	r3, [pc, #564]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x130>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d168      	bne.n	80031d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e275      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x7a>
 8003114:	4b84      	ldr	r3, [pc, #528]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a83      	ldr	r2, [pc, #524]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e02e      	b.n	8003180 <HAL_RCC_OscConfig+0xd8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x9c>
 800312a:	4b7f      	ldr	r3, [pc, #508]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7e      	ldr	r2, [pc, #504]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b7c      	ldr	r3, [pc, #496]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7b      	ldr	r2, [pc, #492]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xd8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0xc0>
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a75      	ldr	r2, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a72      	ldr	r2, [pc, #456]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xd8>
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6e      	ldr	r2, [pc, #440]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6b      	ldr	r2, [pc, #428]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fa6a 	bl	8001660 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe fa66 	bl	8001660 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e229      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xe8>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fa56 	bl	8001660 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe fa52 	bl	8001660 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e215      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x110>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d069      	beq.n	80032ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e6:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b4d      	ldr	r3, [pc, #308]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x190>
 80031fe:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x17a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1e9      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	493d      	ldr	r1, [pc, #244]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e040      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a38      	ldr	r2, [pc, #224]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe fa08 	bl	8001660 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003254:	f7fe fa04 	bl	8001660 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e1c7      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4929      	ldr	r1, [pc, #164]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
 8003286:	e018      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003288:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe f9e4 	bl	8001660 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7fe f9e0 	bl	8001660 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1a3      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d038      	beq.n	8003338 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d019      	beq.n	8003302 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80032d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fe f9c1 	bl	8001660 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fe f9bd 	bl	8001660 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e180      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 80032f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x23a>
 8003300:	e01a      	b.n	8003338 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <HAL_RCC_OscConfig+0x280>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe f9a7 	bl	8001660 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7fe f9a3 	bl	8001660 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d903      	bls.n	800332c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e166      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
 8003328:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b92      	ldr	r3, [pc, #584]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ee      	bne.n	8003316 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a4 	beq.w	800348e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b8c      	ldr	r3, [pc, #560]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a88      	ldr	r2, [pc, #544]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b86      	ldr	r3, [pc, #536]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336e:	4b83      	ldr	r3, [pc, #524]	; (800357c <HAL_RCC_OscConfig+0x4d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800337a:	4b80      	ldr	r3, [pc, #512]	; (800357c <HAL_RCC_OscConfig+0x4d4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7f      	ldr	r2, [pc, #508]	; (800357c <HAL_RCC_OscConfig+0x4d4>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fe f96b 	bl	8001660 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe f967 	bl	8001660 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b64      	cmp	r3, #100	; 0x64
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e12a      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b76      	ldr	r3, [pc, #472]	; (800357c <HAL_RCC_OscConfig+0x4d4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x31a>
 80033b4:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
 80033c0:	e02d      	b.n	800341e <HAL_RCC_OscConfig+0x376>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x33c>
 80033ca:	4b6b      	ldr	r3, [pc, #428]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a6a      	ldr	r2, [pc, #424]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a67      	ldr	r2, [pc, #412]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	e01c      	b.n	800341e <HAL_RCC_OscConfig+0x376>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d10c      	bne.n	8003406 <HAL_RCC_OscConfig+0x35e>
 80033ec:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a61      	ldr	r2, [pc, #388]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	f043 0304 	orr.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	e00b      	b.n	800341e <HAL_RCC_OscConfig+0x376>
 8003406:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a5b      	ldr	r2, [pc, #364]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d015      	beq.n	8003452 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fe f91b 	bl	8001660 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe f917 	bl	8001660 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0d8      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	4b4c      	ldr	r3, [pc, #304]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ee      	beq.n	800342e <HAL_RCC_OscConfig+0x386>
 8003450:	e014      	b.n	800347c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7fe f905 	bl	8001660 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe f901 	bl	8001660 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0c2      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1ee      	bne.n	800345a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d105      	bne.n	800348e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80ae 	beq.w	80035f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003498:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d06d      	beq.n	8003580 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d14b      	bne.n	8003544 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a31      	ldr	r2, [pc, #196]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80034b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe f8d2 	bl	8001660 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe f8ce 	bl	8001660 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e091      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	3b01      	subs	r3, #1
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	491b      	ldr	r1, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe f8a0 	bl	8001660 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe f89c 	bl	8001660 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e05f      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x47c>
 8003542:	e057      	b.n	80035f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe f886 	bl	8001660 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe f882 	bl	8001660 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e045      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x4b0>
 8003576:	e03d      	b.n	80035f4 <HAL_RCC_OscConfig+0x54c>
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <HAL_RCC_OscConfig+0x558>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d030      	beq.n	80035f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d129      	bne.n	80035f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d122      	bne.n	80035f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d119      	bne.n	80035f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	3b01      	subs	r3, #1
 80035ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d10f      	bne.n	80035f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800

08003604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d0      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b67      	ldr	r3, [pc, #412]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 020f 	bic.w	r2, r3, #15
 8003632:	4965      	ldr	r1, [pc, #404]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 800366a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003686:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d040      	beq.n	8003728 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e073      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4936      	ldr	r1, [pc, #216]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fd ffb2 	bl	8001660 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fd ffae 	bl	8001660 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e053      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d210      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 020f 	bic.w	r2, r3, #15
 800373e:	4922      	ldr	r1, [pc, #136]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1cc>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1d0>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1d4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fda0 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00
 80037cc:	40023800 	.word	0x40023800
 80037d0:	0800ad80 	.word	0x0800ad80
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000004 	.word	0x20000004

080037dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e0:	b094      	sub	sp, #80	; 0x50
 80037e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	647b      	str	r3, [r7, #68]	; 0x44
 80037e8:	2300      	movs	r3, #0
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ec:	2300      	movs	r3, #0
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f4:	4b79      	ldr	r3, [pc, #484]	; (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d00d      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x40>
 8003800:	2b08      	cmp	r3, #8
 8003802:	f200 80e1 	bhi.w	80039c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x34>
 800380a:	2b04      	cmp	r3, #4
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x3a>
 800380e:	e0db      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b73      	ldr	r3, [pc, #460]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003814:	e0db      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003816:	4b73      	ldr	r3, [pc, #460]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800381a:	e0d8      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800381c:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003826:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	2200      	movs	r2, #0
 800383a:	63bb      	str	r3, [r7, #56]	; 0x38
 800383c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
 8003846:	2300      	movs	r3, #0
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
 800384a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800384e:	4622      	mov	r2, r4
 8003850:	462b      	mov	r3, r5
 8003852:	f04f 0000 	mov.w	r0, #0
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	0159      	lsls	r1, r3, #5
 800385c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003860:	0150      	lsls	r0, r2, #5
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4621      	mov	r1, r4
 8003868:	1a51      	subs	r1, r2, r1
 800386a:	6139      	str	r1, [r7, #16]
 800386c:	4629      	mov	r1, r5
 800386e:	eb63 0301 	sbc.w	r3, r3, r1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003880:	4659      	mov	r1, fp
 8003882:	018b      	lsls	r3, r1, #6
 8003884:	4651      	mov	r1, sl
 8003886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800388a:	4651      	mov	r1, sl
 800388c:	018a      	lsls	r2, r1, #6
 800388e:	4651      	mov	r1, sl
 8003890:	ebb2 0801 	subs.w	r8, r2, r1
 8003894:	4659      	mov	r1, fp
 8003896:	eb63 0901 	sbc.w	r9, r3, r1
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ae:	4690      	mov	r8, r2
 80038b0:	4699      	mov	r9, r3
 80038b2:	4623      	mov	r3, r4
 80038b4:	eb18 0303 	adds.w	r3, r8, r3
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	462b      	mov	r3, r5
 80038bc:	eb49 0303 	adc.w	r3, r9, r3
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ce:	4629      	mov	r1, r5
 80038d0:	024b      	lsls	r3, r1, #9
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038d8:	4621      	mov	r1, r4
 80038da:	024a      	lsls	r2, r1, #9
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e2:	2200      	movs	r2, #0
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038ec:	f7fc fd00 	bl	80002f0 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f8:	e058      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fa:	4b38      	ldr	r3, [pc, #224]	; (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	2200      	movs	r2, #0
 8003902:	4618      	mov	r0, r3
 8003904:	4611      	mov	r1, r2
 8003906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	0159      	lsls	r1, r3, #5
 8003922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003926:	0150      	lsls	r0, r2, #5
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4641      	mov	r1, r8
 800392e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb63 0b01 	sbc.w	fp, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800394c:	ebb2 040a 	subs.w	r4, r2, sl
 8003950:	eb63 050b 	sbc.w	r5, r3, fp
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	464b      	mov	r3, r9
 8003970:	eb45 0303 	adc.w	r3, r5, r3
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003982:	4629      	mov	r1, r5
 8003984:	028b      	lsls	r3, r1, #10
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800398c:	4621      	mov	r1, r4
 800398e:	028a      	lsls	r2, r1, #10
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003996:	2200      	movs	r2, #0
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	61fa      	str	r2, [r7, #28]
 800399c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a0:	f7fc fca6 	bl	80002f0 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3750      	adds	r7, #80	; 0x50
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	0800ad90 	.word	0x0800ad90

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a2c:	f7ff ffdc 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0b5b      	lsrs	r3, r3, #13
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	0800ad90 	.word	0x0800ad90

08003a50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	220f      	movs	r2, #15
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a60:	4b12      	ldr	r3, [pc, #72]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <HAL_RCC_GetClockConfig+0x60>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40023c00 	.word	0x40023c00

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003adc:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	4964      	ldr	r1, [pc, #400]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	4959      	ldr	r1, [pc, #356]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d017      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	494a      	ldr	r1, [pc, #296]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b68:	d101      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 808b 	beq.w	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	4a39      	ldr	r2, [pc, #228]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbc:	f7fd fd50 	bl	8001660 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc4:	f7fd fd4c 	bl	8001660 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e38f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be2:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d035      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d02e      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d114      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fd14 	bl	8001660 <HAL_GetTick>
 8003c38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fd10 	bl	8001660 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e351      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6a:	d111      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c7a:	400b      	ands	r3, r1
 8003c7c:	4901      	ldr	r1, [pc, #4]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
 8003c82:	e00b      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	0ffffcff 	.word	0x0ffffcff
 8003c90:	4bac      	ldr	r3, [pc, #688]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4aab      	ldr	r2, [pc, #684]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	4ba9      	ldr	r3, [pc, #676]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	49a6      	ldr	r1, [pc, #664]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cba:	4ba2      	ldr	r3, [pc, #648]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc0:	4aa0      	ldr	r2, [pc, #640]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003cca:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ccc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	499b      	ldr	r1, [pc, #620]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce8:	4b96      	ldr	r3, [pc, #600]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf6:	4993      	ldr	r1, [pc, #588]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d0a:	4b8e      	ldr	r3, [pc, #568]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d18:	498a      	ldr	r1, [pc, #552]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2c:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3a:	4982      	ldr	r1, [pc, #520]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d4e:	4b7d      	ldr	r3, [pc, #500]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4979      	ldr	r1, [pc, #484]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d70:	4b74      	ldr	r3, [pc, #464]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	4971      	ldr	r1, [pc, #452]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d92:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f023 020c 	bic.w	r2, r3, #12
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da0:	4968      	ldr	r1, [pc, #416]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003db4:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	4960      	ldr	r1, [pc, #384]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	4957      	ldr	r1, [pc, #348]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df8:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	494f      	ldr	r1, [pc, #316]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	4946      	ldr	r1, [pc, #280]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e3c:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	493e      	ldr	r1, [pc, #248]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	4935      	ldr	r1, [pc, #212]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e80:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	492d      	ldr	r1, [pc, #180]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d011      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ea2:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb0:	4924      	ldr	r1, [pc, #144]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee2:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef0:	4914      	ldr	r1, [pc, #80]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f14:	490b      	ldr	r1, [pc, #44]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f38:	4902      	ldr	r1, [pc, #8]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f54:	4b8a      	ldr	r3, [pc, #552]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	4986      	ldr	r1, [pc, #536]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f78:	4b81      	ldr	r3, [pc, #516]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	497d      	ldr	r1, [pc, #500]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d006      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80d6 	beq.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fa4:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a75      	ldr	r2, [pc, #468]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fd fb56 	bl	8001660 <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fb8:	f7fd fb52 	bl	8001660 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e195      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d021      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11d      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fea:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff0:	0c1b      	lsrs	r3, r3, #16
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff8:	4b61      	ldr	r3, [pc, #388]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	019a      	lsls	r2, r3, #6
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	041b      	lsls	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	071b      	lsls	r3, r3, #28
 800401e:	4958      	ldr	r1, [pc, #352]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02e      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004050:	d129      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004060:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004066:	0f1b      	lsrs	r3, r3, #28
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	019a      	lsls	r2, r3, #6
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	061b      	lsls	r3, r3, #24
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	493e      	ldr	r1, [pc, #248]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800408e:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004094:	f023 021f 	bic.w	r2, r3, #31
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	3b01      	subs	r3, #1
 800409e:	4938      	ldr	r1, [pc, #224]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01d      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040b2:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040c0:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c6:	0f1b      	lsrs	r3, r3, #28
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	019a      	lsls	r2, r3, #6
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	071b      	lsls	r3, r3, #28
 80040e6:	4926      	ldr	r1, [pc, #152]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d011      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	019a      	lsls	r2, r3, #6
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	071b      	lsls	r3, r3, #28
 8004116:	491a      	ldr	r1, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412a:	f7fd fa99 	bl	8001660 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004132:	f7fd fa95 	bl	8001660 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b64      	cmp	r3, #100	; 0x64
 800413e:	d901      	bls.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0d8      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	f040 80ce 	bne.w	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a08      	ldr	r2, [pc, #32]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004164:	f7fd fa7c 	bl	8001660 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800416a:	e00b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800416c:	f7fd fa78 	bl	8001660 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d904      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0bb      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004184:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004190:	d0ec      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02e      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d12a      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ba:	4b51      	ldr	r3, [pc, #324]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041c8:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	0f1b      	lsrs	r3, r3, #28
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	4944      	ldr	r1, [pc, #272]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041f6:	4b42      	ldr	r3, [pc, #264]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	493d      	ldr	r1, [pc, #244]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d022      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004224:	d11d      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004226:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	0f1b      	lsrs	r3, r3, #28
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	019a      	lsls	r2, r3, #6
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	071b      	lsls	r3, r3, #28
 800425a:	4929      	ldr	r1, [pc, #164]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d028      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	0e1b      	lsrs	r3, r3, #24
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800427c:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	019a      	lsls	r2, r3, #6
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	431a      	orrs	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	4917      	ldr	r1, [pc, #92]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4911      	ldr	r1, [pc, #68]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042cc:	f7fd f9c8 	bl	8001660 <HAL_GetTick>
 80042d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042d4:	f7fd f9c4 	bl	8001660 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e007      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f2:	d1ef      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800

08004304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e049      	b.n	80043aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f841 	bl	80043b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 fa00 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e054      	b.n	800448a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a26      	ldr	r2, [pc, #152]	; (8004498 <HAL_TIM_Base_Start_IT+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d01d      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <HAL_TIM_Base_Start_IT+0xd4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <HAL_TIM_Base_Start_IT+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d115      	bne.n	8004474 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_TIM_Base_Start_IT+0xec>)
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b06      	cmp	r3, #6
 8004458:	d015      	beq.n	8004486 <HAL_TIM_Base_Start_IT+0xbe>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d011      	beq.n	8004486 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	e008      	b.n	8004486 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e000      	b.n	8004488 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40001800 	.word	0x40001800
 80044b4:	00010007 	.word	0x00010007

080044b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d122      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11b      	bne.n	8004514 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0202 	mvn.w	r2, #2
 80044e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f905 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 8004500:	e005      	b.n	800450e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8f7 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f908 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0204 	mvn.w	r2, #4
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8db 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8cd 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8de 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b08      	cmp	r3, #8
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8b1 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8a3 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8b4 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d122      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d11b      	bne.n	8004610 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0210 	mvn.w	r2, #16
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2208      	movs	r2, #8
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f887 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f879 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f88a 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0201 	mvn.w	r2, #1
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fc2e 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f91a 	bl	800489c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d10e      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b80      	cmp	r3, #128	; 0x80
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f90d 	bl	80048b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d10e      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f838 	bl	8004732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d10e      	bne.n	80046ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f06f 0220 	mvn.w	r2, #32
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8cd 	bl	8004888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a40      	ldr	r2, [pc, #256]	; (800485c <TIM_Base_SetConfig+0x114>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3d      	ldr	r2, [pc, #244]	; (8004860 <TIM_Base_SetConfig+0x118>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3c      	ldr	r2, [pc, #240]	; (8004864 <TIM_Base_SetConfig+0x11c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3b      	ldr	r2, [pc, #236]	; (8004868 <TIM_Base_SetConfig+0x120>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3a      	ldr	r2, [pc, #232]	; (800486c <TIM_Base_SetConfig+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2f      	ldr	r2, [pc, #188]	; (800485c <TIM_Base_SetConfig+0x114>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02b      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d027      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <TIM_Base_SetConfig+0x118>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d023      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <TIM_Base_SetConfig+0x11c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <TIM_Base_SetConfig+0x120>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01b      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a29      	ldr	r2, [pc, #164]	; (800486c <TIM_Base_SetConfig+0x124>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d017      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a28      	ldr	r2, [pc, #160]	; (8004870 <TIM_Base_SetConfig+0x128>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <TIM_Base_SetConfig+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00f      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <TIM_Base_SetConfig+0x130>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <TIM_Base_SetConfig+0x134>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <TIM_Base_SetConfig+0x138>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a23      	ldr	r2, [pc, #140]	; (8004884 <TIM_Base_SetConfig+0x13c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d108      	bne.n	800480c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <TIM_Base_SetConfig+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0xf8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0c      	ldr	r2, [pc, #48]	; (800486c <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40010400 	.word	0x40010400
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800
 800487c:	40001800 	.word	0x40001800
 8004880:	40001c00 	.word	0x40001c00
 8004884:	40002000 	.word	0x40002000

08004888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e040      	b.n	8004958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fc2e 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	; 0x24
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f82c 	bl	8004960 <UART_SetConfig>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e022      	b.n	8004958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa84 	bl	8004e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800493e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fb0b 	bl	8004f6c <UART_CheckIdleState>
 8004956:	4603      	mov	r3, r0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4ba6      	ldr	r3, [pc, #664]	; (8004c24 <UART_SetConfig+0x2c4>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	6979      	ldr	r1, [r7, #20]
 8004994:	430b      	orrs	r3, r1
 8004996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a94      	ldr	r2, [pc, #592]	; (8004c28 <UART_SetConfig+0x2c8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d120      	bne.n	8004a1e <UART_SetConfig+0xbe>
 80049dc:	4b93      	ldr	r3, [pc, #588]	; (8004c2c <UART_SetConfig+0x2cc>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d816      	bhi.n	8004a18 <UART_SetConfig+0xb8>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x90>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a0d 	.word	0x08004a0d
 80049f8:	08004a07 	.word	0x08004a07
 80049fc:	08004a13 	.word	0x08004a13
 8004a00:	2301      	movs	r3, #1
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e150      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a06:	2302      	movs	r3, #2
 8004a08:	77fb      	strb	r3, [r7, #31]
 8004a0a:	e14d      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e14a      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a12:	2308      	movs	r3, #8
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e147      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e144      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a83      	ldr	r2, [pc, #524]	; (8004c30 <UART_SetConfig+0x2d0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d132      	bne.n	8004a8e <UART_SetConfig+0x12e>
 8004a28:	4b80      	ldr	r3, [pc, #512]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d828      	bhi.n	8004a88 <UART_SetConfig+0x128>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0xdc>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a89 	.word	0x08004a89
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004a89 	.word	0x08004a89
 8004a5c:	08004a77 	.word	0x08004a77
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a89 	.word	0x08004a89
 8004a6c:	08004a83 	.word	0x08004a83
 8004a70:	2300      	movs	r3, #0
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e118      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a76:	2302      	movs	r3, #2
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e115      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e112      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a82:	2308      	movs	r3, #8
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e10f      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e10c      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a68      	ldr	r2, [pc, #416]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d120      	bne.n	8004ada <UART_SetConfig+0x17a>
 8004a98:	4b64      	ldr	r3, [pc, #400]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aa2:	2b30      	cmp	r3, #48	; 0x30
 8004aa4:	d013      	beq.n	8004ace <UART_SetConfig+0x16e>
 8004aa6:	2b30      	cmp	r3, #48	; 0x30
 8004aa8:	d814      	bhi.n	8004ad4 <UART_SetConfig+0x174>
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d009      	beq.n	8004ac2 <UART_SetConfig+0x162>
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d810      	bhi.n	8004ad4 <UART_SetConfig+0x174>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <UART_SetConfig+0x15c>
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d006      	beq.n	8004ac8 <UART_SetConfig+0x168>
 8004aba:	e00b      	b.n	8004ad4 <UART_SetConfig+0x174>
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e0f2      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e0ef      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e0ec      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e0e9      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e0e6      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a56      	ldr	r2, [pc, #344]	; (8004c38 <UART_SetConfig+0x2d8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d120      	bne.n	8004b26 <UART_SetConfig+0x1c6>
 8004ae4:	4b51      	ldr	r3, [pc, #324]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aee:	2bc0      	cmp	r3, #192	; 0xc0
 8004af0:	d013      	beq.n	8004b1a <UART_SetConfig+0x1ba>
 8004af2:	2bc0      	cmp	r3, #192	; 0xc0
 8004af4:	d814      	bhi.n	8004b20 <UART_SetConfig+0x1c0>
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d009      	beq.n	8004b0e <UART_SetConfig+0x1ae>
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	d810      	bhi.n	8004b20 <UART_SetConfig+0x1c0>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <UART_SetConfig+0x1a8>
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d006      	beq.n	8004b14 <UART_SetConfig+0x1b4>
 8004b06:	e00b      	b.n	8004b20 <UART_SetConfig+0x1c0>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e0cc      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e0c9      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b14:	2304      	movs	r3, #4
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e0c6      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e0c3      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b20:	2310      	movs	r3, #16
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e0c0      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a44      	ldr	r2, [pc, #272]	; (8004c3c <UART_SetConfig+0x2dc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d125      	bne.n	8004b7c <UART_SetConfig+0x21c>
 8004b30:	4b3e      	ldr	r3, [pc, #248]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b3e:	d017      	beq.n	8004b70 <UART_SetConfig+0x210>
 8004b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b44:	d817      	bhi.n	8004b76 <UART_SetConfig+0x216>
 8004b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4a:	d00b      	beq.n	8004b64 <UART_SetConfig+0x204>
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b50:	d811      	bhi.n	8004b76 <UART_SetConfig+0x216>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <UART_SetConfig+0x1fe>
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5a:	d006      	beq.n	8004b6a <UART_SetConfig+0x20a>
 8004b5c:	e00b      	b.n	8004b76 <UART_SetConfig+0x216>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e0a1      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b64:	2302      	movs	r3, #2
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e09e      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e09b      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b70:	2308      	movs	r3, #8
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e098      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b76:	2310      	movs	r3, #16
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e095      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2f      	ldr	r2, [pc, #188]	; (8004c40 <UART_SetConfig+0x2e0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d125      	bne.n	8004bd2 <UART_SetConfig+0x272>
 8004b86:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b94:	d017      	beq.n	8004bc6 <UART_SetConfig+0x266>
 8004b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b9a:	d817      	bhi.n	8004bcc <UART_SetConfig+0x26c>
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d00b      	beq.n	8004bba <UART_SetConfig+0x25a>
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba6:	d811      	bhi.n	8004bcc <UART_SetConfig+0x26c>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <UART_SetConfig+0x254>
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d006      	beq.n	8004bc0 <UART_SetConfig+0x260>
 8004bb2:	e00b      	b.n	8004bcc <UART_SetConfig+0x26c>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e076      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e073      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e070      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e06d      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e06a      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <UART_SetConfig+0x2e4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d138      	bne.n	8004c4e <UART_SetConfig+0x2ee>
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <UART_SetConfig+0x2cc>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bea:	d017      	beq.n	8004c1c <UART_SetConfig+0x2bc>
 8004bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bf0:	d82a      	bhi.n	8004c48 <UART_SetConfig+0x2e8>
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf6:	d00b      	beq.n	8004c10 <UART_SetConfig+0x2b0>
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfc:	d824      	bhi.n	8004c48 <UART_SetConfig+0x2e8>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <UART_SetConfig+0x2aa>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d006      	beq.n	8004c16 <UART_SetConfig+0x2b6>
 8004c08:	e01e      	b.n	8004c48 <UART_SetConfig+0x2e8>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e04b      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c10:	2302      	movs	r3, #2
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e048      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c16:	2304      	movs	r3, #4
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e045      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e042      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c22:	bf00      	nop
 8004c24:	efff69f3 	.word	0xefff69f3
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40004400 	.word	0x40004400
 8004c34:	40004800 	.word	0x40004800
 8004c38:	40004c00 	.word	0x40004c00
 8004c3c:	40005000 	.word	0x40005000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	40007800 	.word	0x40007800
 8004c48:	2310      	movs	r3, #16
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e02c      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a72      	ldr	r2, [pc, #456]	; (8004e1c <UART_SetConfig+0x4bc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d125      	bne.n	8004ca4 <UART_SetConfig+0x344>
 8004c58:	4b71      	ldr	r3, [pc, #452]	; (8004e20 <UART_SetConfig+0x4c0>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c66:	d017      	beq.n	8004c98 <UART_SetConfig+0x338>
 8004c68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c6c:	d817      	bhi.n	8004c9e <UART_SetConfig+0x33e>
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	d00b      	beq.n	8004c8c <UART_SetConfig+0x32c>
 8004c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c78:	d811      	bhi.n	8004c9e <UART_SetConfig+0x33e>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <UART_SetConfig+0x326>
 8004c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c82:	d006      	beq.n	8004c92 <UART_SetConfig+0x332>
 8004c84:	e00b      	b.n	8004c9e <UART_SetConfig+0x33e>
 8004c86:	2300      	movs	r3, #0
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e00d      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e00a      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c92:	2304      	movs	r3, #4
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e007      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e004      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	77fb      	strb	r3, [r7, #31]
 8004ca2:	e001      	b.n	8004ca8 <UART_SetConfig+0x348>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb0:	d15b      	bne.n	8004d6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004cb2:	7ffb      	ldrb	r3, [r7, #31]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d828      	bhi.n	8004d0a <UART_SetConfig+0x3aa>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x360>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ced 	.word	0x08004ced
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004d0b 	.word	0x08004d0b
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004d0b 	.word	0x08004d0b
 8004cd8:	08004d0b 	.word	0x08004d0b
 8004cdc:	08004d0b 	.word	0x08004d0b
 8004ce0:	08004d03 	.word	0x08004d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fe fe8c 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	61b8      	str	r0, [r7, #24]
        break;
 8004cea:	e013      	b.n	8004d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cec:	f7fe fe9c 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004cf0:	61b8      	str	r0, [r7, #24]
        break;
 8004cf2:	e00f      	b.n	8004d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <UART_SetConfig+0x4c4>)
 8004cf6:	61bb      	str	r3, [r7, #24]
        break;
 8004cf8:	e00c      	b.n	8004d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7fe fd6f 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 8004cfe:	61b8      	str	r0, [r7, #24]
        break;
 8004d00:	e008      	b.n	8004d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d06:	61bb      	str	r3, [r7, #24]
        break;
 8004d08:	e004      	b.n	8004d14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	77bb      	strb	r3, [r7, #30]
        break;
 8004d12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d074      	beq.n	8004e04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	005a      	lsls	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	441a      	add	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	d916      	bls.n	8004d64 <UART_SetConfig+0x404>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d212      	bcs.n	8004d64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f023 030f 	bic.w	r3, r3, #15
 8004d46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	89fb      	ldrh	r3, [r7, #14]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	89fa      	ldrh	r2, [r7, #14]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e04f      	b.n	8004e04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	77bb      	strb	r3, [r7, #30]
 8004d68:	e04c      	b.n	8004e04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d828      	bhi.n	8004dc2 <UART_SetConfig+0x462>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0x418>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004dad 	.word	0x08004dad
 8004d84:	08004dc3 	.word	0x08004dc3
 8004d88:	08004db3 	.word	0x08004db3
 8004d8c:	08004dc3 	.word	0x08004dc3
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004dc3 	.word	0x08004dc3
 8004d98:	08004dbb 	.word	0x08004dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7fe fe30 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004da0:	61b8      	str	r0, [r7, #24]
        break;
 8004da2:	e013      	b.n	8004dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da4:	f7fe fe40 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004da8:	61b8      	str	r0, [r7, #24]
        break;
 8004daa:	e00f      	b.n	8004dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <UART_SetConfig+0x4c4>)
 8004dae:	61bb      	str	r3, [r7, #24]
        break;
 8004db0:	e00c      	b.n	8004dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db2:	f7fe fd13 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 8004db6:	61b8      	str	r0, [r7, #24]
        break;
 8004db8:	e008      	b.n	8004dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbe:	61bb      	str	r3, [r7, #24]
        break;
 8004dc0:	e004      	b.n	8004dcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8004dca:	bf00      	nop
    }

    if (pclk != 0U)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	085a      	lsrs	r2, r3, #1
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	441a      	add	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b0f      	cmp	r3, #15
 8004dea:	d909      	bls.n	8004e00 <UART_SetConfig+0x4a0>
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df2:	d205      	bcs.n	8004e00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e001      	b.n	8004e04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e10:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40007c00 	.word	0x40007c00
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400

08004e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f26:	d10a      	bne.n	8004f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f7c:	f7fc fb70 	bl	8001660 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d10e      	bne.n	8004fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f831 	bl	8005006 <UART_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e027      	b.n	8004ffe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d10e      	bne.n	8004fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f81b 	bl	8005006 <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e011      	b.n	8004ffe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b09c      	sub	sp, #112	; 0x70
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005016:	e0a7      	b.n	8005168 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	f000 80a3 	beq.w	8005168 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fc fb1d 	bl	8001660 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <UART_WaitOnFlagUntilTimeout+0x32>
 8005032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005034:	2b00      	cmp	r3, #0
 8005036:	d13f      	bne.n	80050b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800504c:	667b      	str	r3, [r7, #100]	; 0x64
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005058:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800505c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	663b      	str	r3, [r7, #96]	; 0x60
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800508a:	64ba      	str	r2, [r7, #72]	; 0x48
 800508c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e068      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d050      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d4:	d148      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005100:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e6      	bne.n	80050e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	613b      	str	r3, [r7, #16]
   return(result);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	66bb      	str	r3, [r7, #104]	; 0x68
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005132:	623a      	str	r2, [r7, #32]
 8005134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	69f9      	ldr	r1, [r7, #28]
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e5      	bne.n	8005112 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e010      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	f43f af48 	beq.w	8005018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3770      	adds	r7, #112	; 0x70
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005194:	b084      	sub	sp, #16
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	f107 001c 	add.w	r0, r7, #28
 80051a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d120      	bne.n	80051ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <USB_CoreInit+0xac>)
 80051be:	4013      	ands	r3, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa96 	bl	8005714 <USB_CoreReset>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	e010      	b.n	8005210 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa8a 	bl	8005714 <USB_CoreReset>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10b      	bne.n	800522e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f043 0206 	orr.w	r2, r3, #6
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523a:	b004      	add	sp, #16
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	ffbdffbf 	.word	0xffbdffbf

08005244 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f023 0201 	bic.w	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d115      	bne.n	80052b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005294:	2001      	movs	r0, #1
 8005296:	f7fc f9ef 	bl	8001678 <HAL_Delay>
      ms++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa29 	bl	80056f8 <USB_GetMode>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d01e      	beq.n	80052ea <USB_SetCurrentMode+0x84>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b31      	cmp	r3, #49	; 0x31
 80052b0:	d9f0      	bls.n	8005294 <USB_SetCurrentMode+0x2e>
 80052b2:	e01a      	b.n	80052ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d115      	bne.n	80052e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052c6:	2001      	movs	r0, #1
 80052c8:	f7fc f9d6 	bl	8001678 <HAL_Delay>
      ms++;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa10 	bl	80056f8 <USB_GetMode>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <USB_SetCurrentMode+0x84>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b31      	cmp	r3, #49	; 0x31
 80052e2:	d9f0      	bls.n	80052c6 <USB_SetCurrentMode+0x60>
 80052e4:	e001      	b.n	80052ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e005      	b.n	80052f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b32      	cmp	r3, #50	; 0x32
 80052ee:	d101      	bne.n	80052f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005300:	b084      	sub	sp, #16
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800530e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e009      	b.n	8005334 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3340      	adds	r3, #64	; 0x40
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3301      	adds	r3, #1
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0e      	cmp	r3, #14
 8005338:	d9f2      	bls.n	8005320 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11c      	bne.n	800537a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e005      	b.n	8005386 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800538c:	461a      	mov	r2, r3
 800538e:	2300      	movs	r3, #0
 8005390:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	4619      	mov	r1, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	461a      	mov	r2, r3
 80053a2:	680b      	ldr	r3, [r1, #0]
 80053a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10c      	bne.n	80053c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053b2:	2100      	movs	r1, #0
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f965 	bl	8005684 <USB_SetDevSpeed>
 80053ba:	e008      	b.n	80053ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053bc:	2101      	movs	r1, #1
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f960 	bl	8005684 <USB_SetDevSpeed>
 80053c4:	e003      	b.n	80053ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053c6:	2103      	movs	r1, #3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f95b 	bl	8005684 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ce:	2110      	movs	r1, #16
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8f3 	bl	80055bc <USB_FlushTxFifo>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f91f 	bl	8005624 <USB_FlushRxFifo>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	461a      	mov	r2, r3
 80053f8:	2300      	movs	r3, #0
 80053fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	461a      	mov	r2, r3
 8005404:	2300      	movs	r3, #0
 8005406:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	461a      	mov	r2, r3
 8005410:	2300      	movs	r3, #0
 8005412:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	e043      	b.n	80054a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005430:	d118      	bne.n	8005464 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	461a      	mov	r2, r3
 8005446:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e013      	b.n	8005476 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	461a      	mov	r2, r3
 800545c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e008      	b.n	8005476 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	461a      	mov	r2, r3
 8005496:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800549a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3301      	adds	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d3b7      	bcc.n	800541a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	e043      	b.n	8005538 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c6:	d118      	bne.n	80054fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e013      	b.n	800550c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e008      	b.n	800550c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	461a      	mov	r2, r3
 800552c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005530:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3301      	adds	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	429a      	cmp	r2, r3
 800553e:	d3b7      	bcc.n	80054b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800554e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005552:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005560:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f043 0210 	orr.w	r2, r3, #16
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <USB_DevInit+0x2b4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f043 0208 	orr.w	r2, r3, #8
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <USB_DevInit+0x2b8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b0:	b004      	add	sp, #16
 80055b2:	4770      	bx	lr
 80055b4:	803c3800 	.word	0x803c3800
 80055b8:	40000004 	.word	0x40000004

080055bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <USB_FlushTxFifo+0x64>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e01b      	b.n	8005614 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	daf2      	bge.n	80055ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	019b      	lsls	r3, r3, #6
 80055ec:	f043 0220 	orr.w	r2, r3, #32
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a08      	ldr	r2, [pc, #32]	; (8005620 <USB_FlushTxFifo+0x64>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e006      	b.n	8005614 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b20      	cmp	r3, #32
 8005610:	d0f0      	beq.n	80055f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	00030d40 	.word	0x00030d40

08005624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a11      	ldr	r2, [pc, #68]	; (8005680 <USB_FlushRxFifo+0x5c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e018      	b.n	8005674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	daf2      	bge.n	8005630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2210      	movs	r2, #16
 8005652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4a08      	ldr	r2, [pc, #32]	; (8005680 <USB_FlushRxFifo+0x5c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e006      	b.n	8005674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d0f0      	beq.n	8005654 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	00030d40 	.word	0x00030d40

08005684 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056d0:	f023 0303 	bic.w	r3, r3, #3
 80056d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e4:	f043 0302 	orr.w	r3, r3, #2
 80056e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f003 0301 	and.w	r3, r3, #1
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <USB_CoreReset+0x64>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e01b      	b.n	800576a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	daf2      	bge.n	8005720 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f043 0201 	orr.w	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <USB_CoreReset+0x64>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e006      	b.n	800576a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b01      	cmp	r3, #1
 8005766:	d0f0      	beq.n	800574a <USB_CoreReset+0x36>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	00030d40 	.word	0x00030d40

0800577c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a07      	ldr	r2, [pc, #28]	; (80057a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800578c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4a06      	ldr	r2, [pc, #24]	; (80057ac <vApplicationGetIdleTaskMemory+0x30>)
 8005792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	601a      	str	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000a78 	.word	0x20000a78
 80057ac:	20000b34 	.word	0x20000b34

080057b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4a07      	ldr	r2, [pc, #28]	; (80057dc <vApplicationGetTimerTaskMemory+0x2c>)
 80057c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4a06      	ldr	r2, [pc, #24]	; (80057e0 <vApplicationGetTimerTaskMemory+0x30>)
 80057c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ce:	601a      	str	r2, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000d34 	.word	0x20000d34
 80057e0:	20000df0 	.word	0x20000df0

080057e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f103 0208 	add.w	r2, r3, #8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f103 0208 	add.w	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0208 	add.w	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d103      	bne.n	80058a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e00c      	b.n	80058c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3308      	adds	r3, #8
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e002      	b.n	80058b4 <vListInsert+0x2e>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d2f6      	bcs.n	80058ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6892      	ldr	r2, [r2, #8]
 800590e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6852      	ldr	r2, [r2, #4]
 8005918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d103      	bne.n	800592c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1e5a      	subs	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10c      	bne.n	800597a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	b672      	cpsid	i
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	b662      	cpsie	i
 8005974:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800597a:	f002 f8e7 	bl	8007b4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	441a      	add	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	3b01      	subs	r3, #1
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	441a      	add	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	22ff      	movs	r2, #255	; 0xff
 80059c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d114      	bne.n	80059fa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01a      	beq.n	8005a0e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3310      	adds	r3, #16
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 f99f 	bl	8006d20 <xTaskRemoveFromEventList>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d012      	beq.n	8005a0e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <xQueueGenericReset+0xd0>)
 80059ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	e009      	b.n	8005a0e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3310      	adds	r3, #16
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff fef0 	bl	80057e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3324      	adds	r3, #36	; 0x24
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff feeb 	bl	80057e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a0e:	f002 f8d1 	bl	8007bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a12:	2301      	movs	r3, #1
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	b672      	cpsid	i
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	b662      	cpsie	i
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10c      	bne.n	8005a6e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	b672      	cpsid	i
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	b662      	cpsie	i
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <xQueueGenericCreateStatic+0x5a>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <xQueueGenericCreateStatic+0x5e>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <xQueueGenericCreateStatic+0x60>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	b672      	cpsid	i
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	b662      	cpsie	i
 8005a98:	623b      	str	r3, [r7, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <xQueueGenericCreateStatic+0x8a>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <xQueueGenericCreateStatic+0x8e>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueGenericCreateStatic+0x90>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	b672      	cpsid	i
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	b662      	cpsie	i
 8005ac8:	61fb      	str	r3, [r7, #28]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ace:	2350      	movs	r3, #80	; 0x50
 8005ad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b50      	cmp	r3, #80	; 0x50
 8005ad6:	d00c      	beq.n	8005af2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	b672      	cpsid	i
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	b662      	cpsie	i
 8005aec:	61bb      	str	r3, [r7, #24]
}
 8005aee:	bf00      	nop
 8005af0:	e7fe      	b.n	8005af0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005af2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00d      	beq.n	8005b1a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f847 	bl	8005ba8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3730      	adds	r7, #48	; 0x30
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10c      	bne.n	8005b52 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	b672      	cpsid	i
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	b662      	cpsie	i
 8005b4c:	613b      	str	r3, [r7, #16]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e004      	b.n	8005b68 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	3350      	adds	r3, #80	; 0x50
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f002 f919 	bl	8007da4 <pvPortMalloc>
 8005b72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d011      	beq.n	8005b9e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	3350      	adds	r3, #80	; 0x50
 8005b82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b8c:	79fa      	ldrb	r2, [r7, #7]
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	4613      	mov	r3, r2
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f805 	bl	8005ba8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e002      	b.n	8005bca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	69b8      	ldr	r0, [r7, #24]
 8005bda:	f7ff feb7 	bl	800594c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	; 0x38
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10c      	bne.n	8005c26 <xQueueGenericSend+0x36>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	b672      	cpsid	i
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	b662      	cpsie	i
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <xQueueGenericSend+0x44>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <xQueueGenericSend+0x48>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <xQueueGenericSend+0x4a>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10c      	bne.n	8005c58 <xQueueGenericSend+0x68>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	b672      	cpsid	i
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	b662      	cpsie	i
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d103      	bne.n	8005c66 <xQueueGenericSend+0x76>
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <xQueueGenericSend+0x7a>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <xQueueGenericSend+0x7c>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10c      	bne.n	8005c8a <xQueueGenericSend+0x9a>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	b672      	cpsid	i
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	b662      	cpsie	i
 8005c84:	623b      	str	r3, [r7, #32]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c8a:	f001 fa13 	bl	80070b4 <xTaskGetSchedulerState>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <xQueueGenericSend+0xaa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xQueueGenericSend+0xae>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xQueueGenericSend+0xb0>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10c      	bne.n	8005cbe <xQueueGenericSend+0xce>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	b672      	cpsid	i
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	b662      	cpsie	i
 8005cb8:	61fb      	str	r3, [r7, #28]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cbe:	f001 ff45 	bl	8007b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d302      	bcc.n	8005cd4 <xQueueGenericSend+0xe4>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d129      	bne.n	8005d28 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cda:	f000 fa15 	bl	8006108 <prvCopyDataToQueue>
 8005cde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	3324      	adds	r3, #36	; 0x24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f817 	bl	8006d20 <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d013      	beq.n	8005d20 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cf8:	4b3f      	ldr	r3, [pc, #252]	; (8005df8 <xQueueGenericSend+0x208>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	e00a      	b.n	8005d20 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d10:	4b39      	ldr	r3, [pc, #228]	; (8005df8 <xQueueGenericSend+0x208>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d20:	f001 ff48 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e063      	b.n	8005df0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2e:	f001 ff41 	bl	8007bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e05c      	b.n	8005df0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 f853 	bl	8006dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4a:	f001 ff33 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4e:	f000 fdb3 	bl	80068b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d52:	f001 fefb 	bl	8007b4c <vPortEnterCritical>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueGenericSend+0x17c>
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSend+0x192>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d82:	f001 ff17 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f842 	bl	8006e18 <xTaskCheckForTimeOut>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d124      	bne.n	8005de4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d9c:	f000 faac 	bl	80062f8 <prvIsQueueFull>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	3310      	adds	r3, #16
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 ff62 	bl	8006c78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db6:	f000 fa37 	bl	8006228 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f000 fd8b 	bl	80068d4 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f47f af7c 	bne.w	8005cbe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <xQueueGenericSend+0x208>)
 8005dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	e772      	b.n	8005cbe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dda:	f000 fa25 	bl	8006228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dde:	f000 fd79 	bl	80068d4 <xTaskResumeAll>
 8005de2:	e76c      	b.n	8005cbe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de6:	f000 fa1f 	bl	8006228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dea:	f000 fd73 	bl	80068d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3738      	adds	r7, #56	; 0x38
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	; 0x38
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10c      	bne.n	8005e2e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	b672      	cpsid	i
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	b662      	cpsie	i
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <xQueueGenericSendFromISR+0x40>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <xQueueGenericSendFromISR+0x44>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <xQueueGenericSendFromISR+0x46>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10c      	bne.n	8005e60 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	b672      	cpsid	i
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	b662      	cpsie	i
 8005e5a:	623b      	str	r3, [r7, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d103      	bne.n	8005e6e <xQueueGenericSendFromISR+0x72>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <xQueueGenericSendFromISR+0x76>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <xQueueGenericSendFromISR+0x78>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10c      	bne.n	8005e92 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	b672      	cpsid	i
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	b662      	cpsie	i
 8005e8c:	61fb      	str	r3, [r7, #28]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e92:	f001 ff43 	bl	8007d1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e96:	f3ef 8211 	mrs	r2, BASEPRI
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	b672      	cpsid	i
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	b662      	cpsie	i
 8005eae:	61ba      	str	r2, [r7, #24]
 8005eb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <xQueueGenericSendFromISR+0xcc>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d12c      	bne.n	8005f22 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed8:	f000 f916 	bl	8006108 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005edc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d112      	bne.n	8005f0c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d016      	beq.n	8005f1c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	3324      	adds	r3, #36	; 0x24
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 ff14 	bl	8006d20 <xTaskRemoveFromEventList>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00e      	beq.n	8005f1c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e007      	b.n	8005f1c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f10:	3301      	adds	r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	b25a      	sxtb	r2, r3
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f20:	e001      	b.n	8005f26 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3738      	adds	r7, #56	; 0x38
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	; 0x30
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10c      	bne.n	8005f70 <xQueueReceive+0x34>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	b672      	cpsid	i
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	b662      	cpsie	i
 8005f6a:	623b      	str	r3, [r7, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <xQueueReceive+0x42>
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <xQueueReceive+0x46>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueReceive+0x48>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10c      	bne.n	8005fa2 <xQueueReceive+0x66>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	b672      	cpsid	i
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	b662      	cpsie	i
 8005f9c:	61fb      	str	r3, [r7, #28]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa2:	f001 f887 	bl	80070b4 <xTaskGetSchedulerState>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <xQueueReceive+0x76>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <xQueueReceive+0x7a>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueReceive+0x7c>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10c      	bne.n	8005fd6 <xQueueReceive+0x9a>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	b672      	cpsid	i
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	b662      	cpsie	i
 8005fd0:	61bb      	str	r3, [r7, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd6:	f001 fdb9 	bl	8007b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01f      	beq.n	8006026 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f000 f8f7 	bl	80061dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	1e5a      	subs	r2, r3, #1
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00f      	beq.n	800601e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	3310      	adds	r3, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fe8c 	bl	8006d20 <xTaskRemoveFromEventList>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800600e:	4b3d      	ldr	r3, [pc, #244]	; (8006104 <xQueueReceive+0x1c8>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800601e:	f001 fdc9 	bl	8007bb4 <vPortExitCritical>
				return pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	e069      	b.n	80060fa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800602c:	f001 fdc2 	bl	8007bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006030:	2300      	movs	r3, #0
 8006032:	e062      	b.n	80060fa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fed4 	bl	8006dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006048:	f001 fdb4 	bl	8007bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604c:	f000 fc34 	bl	80068b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006050:	f001 fd7c 	bl	8007b4c <vPortEnterCritical>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605a:	b25b      	sxtb	r3, r3
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d103      	bne.n	800606a <xQueueReceive+0x12e>
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d103      	bne.n	8006080 <xQueueReceive+0x144>
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	f001 fd98 	bl	8007bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006084:	1d3a      	adds	r2, r7, #4
 8006086:	f107 0310 	add.w	r3, r7, #16
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fec3 	bl	8006e18 <xTaskCheckForTimeOut>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d123      	bne.n	80060e0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609a:	f000 f917 	bl	80062cc <prvIsQueueEmpty>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d017      	beq.n	80060d4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	3324      	adds	r3, #36	; 0x24
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fde3 	bl	8006c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b4:	f000 f8b8 	bl	8006228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060b8:	f000 fc0c 	bl	80068d4 <xTaskResumeAll>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d189      	bne.n	8005fd6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <xQueueReceive+0x1c8>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	e780      	b.n	8005fd6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d6:	f000 f8a7 	bl	8006228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060da:	f000 fbfb 	bl	80068d4 <xTaskResumeAll>
 80060de:	e77a      	b.n	8005fd6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e2:	f000 f8a1 	bl	8006228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e6:	f000 fbf5 	bl	80068d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ec:	f000 f8ee 	bl	80062cc <prvIsQueueEmpty>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f43f af6f 	beq.w	8005fd6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	; 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d14d      	bne.n	80061ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ffdc 	bl	80070f0 <xTaskPriorityDisinherit>
 8006138:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	e043      	b.n	80061ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d119      	bne.n	800617c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6858      	ldr	r0, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	461a      	mov	r2, r3
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	f002 f92d 	bl	80083b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	d32b      	bcc.n	80061ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	e026      	b.n	80061ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68d8      	ldr	r0, [r3, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	461a      	mov	r2, r3
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	f002 f913 	bl	80083b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	425b      	negs	r3, r3
 8006196:	441a      	add	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d207      	bcs.n	80061b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	425b      	negs	r3, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d105      	bne.n	80061ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	441a      	add	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d303      	bcc.n	8006210 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68d9      	ldr	r1, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	461a      	mov	r2, r3
 800621a:	6838      	ldr	r0, [r7, #0]
 800621c:	f002 f8c9 	bl	80083b2 <memcpy>
	}
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006230:	f001 fc8c 	bl	8007b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623c:	e011      	b.n	8006262 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fd68 	bl	8006d20 <xTaskRemoveFromEventList>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006256:	f000 fe45 	bl	8006ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	3b01      	subs	r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dce9      	bgt.n	800623e <prvUnlockQueue+0x16>
 800626a:	e000      	b.n	800626e <prvUnlockQueue+0x46>
					break;
 800626c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006276:	f001 fc9d 	bl	8007bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800627a:	f001 fc67 	bl	8007b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006284:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006286:	e011      	b.n	80062ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3310      	adds	r3, #16
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fd43 	bl	8006d20 <xTaskRemoveFromEventList>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062a0:	f000 fe20 	bl	8006ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dce9      	bgt.n	8006288 <prvUnlockQueue+0x60>
 80062b4:	e000      	b.n	80062b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	22ff      	movs	r2, #255	; 0xff
 80062bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062c0:	f001 fc78 	bl	8007bb4 <vPortExitCritical>
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d4:	f001 fc3a 	bl	8007b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e001      	b.n	80062ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062ea:	f001 fc63 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 80062ee:	68fb      	ldr	r3, [r7, #12]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006300:	f001 fc24 	bl	8007b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630c:	429a      	cmp	r2, r3
 800630e:	d102      	bne.n	8006316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006310:	2301      	movs	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e001      	b.n	800631a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800631a:	f001 fc4b 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 800631e:	68fb      	ldr	r3, [r7, #12]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e014      	b.n	8006362 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006338:	4a0f      	ldr	r2, [pc, #60]	; (8006378 <vQueueAddToRegistry+0x50>)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006344:	490c      	ldr	r1, [pc, #48]	; (8006378 <vQueueAddToRegistry+0x50>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <vQueueAddToRegistry+0x50>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800635a:	e006      	b.n	800636a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b07      	cmp	r3, #7
 8006366:	d9e7      	bls.n	8006338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200011f0 	.word	0x200011f0

0800637c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800638c:	f001 fbde 	bl	8007b4c <vPortEnterCritical>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d103      	bne.n	80063a6 <vQueueWaitForMessageRestricted+0x2a>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d103      	bne.n	80063bc <vQueueWaitForMessageRestricted+0x40>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	f001 fbfa 	bl	8007bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fc77 	bl	8006cc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff ff26 	bl	8006228 <prvUnlockQueue>
	}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08e      	sub	sp, #56	; 0x38
 80063e8:	af04      	add	r7, sp, #16
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10c      	bne.n	8006412 <xTaskCreateStatic+0x2e>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	b672      	cpsid	i
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	b662      	cpsie	i
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10c      	bne.n	8006432 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	b672      	cpsid	i
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	b662      	cpsie	i
 800642c:	61fb      	str	r3, [r7, #28]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006432:	23bc      	movs	r3, #188	; 0xbc
 8006434:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2bbc      	cmp	r3, #188	; 0xbc
 800643a:	d00c      	beq.n	8006456 <xTaskCreateStatic+0x72>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	b672      	cpsid	i
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	b662      	cpsie	i
 8006450:	61bb      	str	r3, [r7, #24]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006456:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01e      	beq.n	800649c <xTaskCreateStatic+0xb8>
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01b      	beq.n	800649c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800646c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	2202      	movs	r2, #2
 8006472:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006476:	2300      	movs	r3, #0
 8006478:	9303      	str	r3, [sp, #12]
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	9302      	str	r3, [sp, #8]
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f850 	bl	8006534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006496:	f000 f8f5 	bl	8006684 <prvAddNewTaskToReadyList>
 800649a:	e001      	b.n	80064a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064a0:	697b      	ldr	r3, [r7, #20]
	}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b08c      	sub	sp, #48	; 0x30
 80064ae:	af04      	add	r7, sp, #16
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fc70 	bl	8007da4 <pvPortMalloc>
 80064c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064cc:	20bc      	movs	r0, #188	; 0xbc
 80064ce:	f001 fc69 	bl	8007da4 <pvPortMalloc>
 80064d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
 80064e0:	e005      	b.n	80064ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f001 fd28 	bl	8007f38 <vPortFree>
 80064e8:	e001      	b.n	80064ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d017      	beq.n	8006524 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064fc:	88fa      	ldrh	r2, [r7, #6]
 80064fe:	2300      	movs	r3, #0
 8006500:	9303      	str	r3, [sp, #12]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f80e 	bl	8006534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006518:	69f8      	ldr	r0, [r7, #28]
 800651a:	f000 f8b3 	bl	8006684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800651e:	2301      	movs	r3, #1
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e002      	b.n	800652a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800652a:	69bb      	ldr	r3, [r7, #24]
	}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	461a      	mov	r2, r3
 800654c:	21a5      	movs	r1, #165	; 0xa5
 800654e:	f001 ff3e 	bl	80083ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800655c:	440b      	add	r3, r1
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00c      	beq.n	8006590 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	b672      	cpsid	i
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	b662      	cpsie	i
 800658a:	617b      	str	r3, [r7, #20]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01f      	beq.n	80065d6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	e012      	b.n	80065c2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	7819      	ldrb	r1, [r3, #0]
 80065a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	3334      	adds	r3, #52	; 0x34
 80065ac:	460a      	mov	r2, r1
 80065ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d006      	beq.n	80065ca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2b0f      	cmp	r3, #15
 80065c6:	d9e9      	bls.n	800659c <prvInitialiseNewTask+0x68>
 80065c8:	e000      	b.n	80065cc <prvInitialiseNewTask+0x98>
			{
				break;
 80065ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065d4:	e003      	b.n	80065de <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	2b37      	cmp	r3, #55	; 0x37
 80065e2:	d901      	bls.n	80065e8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065e4:	2337      	movs	r3, #55	; 0x37
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	2200      	movs	r2, #0
 80065f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	3304      	adds	r3, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff f910 	bl	8005824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	3318      	adds	r3, #24
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff f90b 	bl	8005824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006612:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006622:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	2200      	movs	r2, #0
 8006630:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3354      	adds	r3, #84	; 0x54
 8006638:	2260      	movs	r2, #96	; 0x60
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fec6 	bl	80083ce <memset>
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <prvInitialiseNewTask+0x144>)
 8006646:	659a      	str	r2, [r3, #88]	; 0x58
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	4a0c      	ldr	r2, [pc, #48]	; (800667c <prvInitialiseNewTask+0x148>)
 800664c:	65da      	str	r2, [r3, #92]	; 0x5c
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	4a0b      	ldr	r2, [pc, #44]	; (8006680 <prvInitialiseNewTask+0x14c>)
 8006652:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	69b8      	ldr	r0, [r7, #24]
 800665a:	f001 f96b 	bl	8007934 <pxPortInitialiseStack>
 800665e:	4602      	mov	r2, r0
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006670:	bf00      	nop
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	0800adb8 	.word	0x0800adb8
 800667c:	0800add8 	.word	0x0800add8
 8006680:	0800ad98 	.word	0x0800ad98

08006684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800668c:	f001 fa5e 	bl	8007b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006690:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <prvAddNewTaskToReadyList+0xc4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <prvAddNewTaskToReadyList+0xc4>)
 8006698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066a2:	4a2a      	ldr	r2, [pc, #168]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066a8:	4b27      	ldr	r3, [pc, #156]	; (8006748 <prvAddNewTaskToReadyList+0xc4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d110      	bne.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066b0:	f000 fc3c 	bl	8006f2c <prvInitialiseTaskLists>
 80066b4:	e00d      	b.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066b6:	4b26      	ldr	r3, [pc, #152]	; (8006750 <prvAddNewTaskToReadyList+0xcc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066be:	4b23      	ldr	r3, [pc, #140]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d802      	bhi.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066d2:	4b20      	ldr	r3, [pc, #128]	; (8006754 <prvAddNewTaskToReadyList+0xd0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <prvAddNewTaskToReadyList+0xd0>)
 80066da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <prvAddNewTaskToReadyList+0xd0>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <prvAddNewTaskToReadyList+0xd4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d903      	bls.n	80066f8 <prvAddNewTaskToReadyList+0x74>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	4a18      	ldr	r2, [pc, #96]	; (8006758 <prvAddNewTaskToReadyList+0xd4>)
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4a15      	ldr	r2, [pc, #84]	; (800675c <prvAddNewTaskToReadyList+0xd8>)
 8006706:	441a      	add	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7ff f895 	bl	800583e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006714:	f001 fa4e 	bl	8007bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <prvAddNewTaskToReadyList+0xcc>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	429a      	cmp	r2, r3
 800672c:	d207      	bcs.n	800673e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <prvAddNewTaskToReadyList+0xdc>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20001704 	.word	0x20001704
 800674c:	20001230 	.word	0x20001230
 8006750:	20001710 	.word	0x20001710
 8006754:	20001720 	.word	0x20001720
 8006758:	2000170c 	.word	0x2000170c
 800675c:	20001234 	.word	0x20001234
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d019      	beq.n	80067aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <vTaskDelay+0x64>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <vTaskDelay+0x34>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	b672      	cpsid	i
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	b662      	cpsie	i
 8006792:	60bb      	str	r3, [r7, #8]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006798:	f000 f88e 	bl	80068b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fd18 	bl	80071d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067a4:	f000 f896 	bl	80068d4 <xTaskResumeAll>
 80067a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <vTaskDelay+0x68>)
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	2000172c 	.word	0x2000172c
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067de:	463a      	mov	r2, r7
 80067e0:	1d39      	adds	r1, r7, #4
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe ffc8 	bl	800577c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	9202      	str	r2, [sp, #8]
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	460a      	mov	r2, r1
 80067fe:	4926      	ldr	r1, [pc, #152]	; (8006898 <vTaskStartScheduler+0xc8>)
 8006800:	4826      	ldr	r0, [pc, #152]	; (800689c <vTaskStartScheduler+0xcc>)
 8006802:	f7ff fdef 	bl	80063e4 <xTaskCreateStatic>
 8006806:	4603      	mov	r3, r0
 8006808:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <vTaskStartScheduler+0xd0>)
 800680a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <vTaskStartScheduler+0xd0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e001      	b.n	800681e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d102      	bne.n	800682a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006824:	f000 fd2a 	bl	800727c <xTimerCreateTimerTask>
 8006828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11d      	bne.n	800686c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	b672      	cpsid	i
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	b662      	cpsie	i
 8006844:	613b      	str	r3, [r7, #16]
}
 8006846:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006848:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <vTaskStartScheduler+0xd4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3354      	adds	r3, #84	; 0x54
 800684e:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <vTaskStartScheduler+0xd8>)
 8006850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006852:	4b16      	ldr	r3, [pc, #88]	; (80068ac <vTaskStartScheduler+0xdc>)
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <vTaskStartScheduler+0xe0>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006860:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <vTaskStartScheduler+0xe4>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006866:	f001 f8f3 	bl	8007a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800686a:	e010      	b.n	800688e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d10c      	bne.n	800688e <vTaskStartScheduler+0xbe>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	b672      	cpsid	i
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	b662      	cpsie	i
 8006888:	60fb      	str	r3, [r7, #12]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <vTaskStartScheduler+0xbc>
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	0800ad68 	.word	0x0800ad68
 800689c:	08006efd 	.word	0x08006efd
 80068a0:	20001728 	.word	0x20001728
 80068a4:	20001230 	.word	0x20001230
 80068a8:	20000010 	.word	0x20000010
 80068ac:	20001724 	.word	0x20001724
 80068b0:	20001710 	.word	0x20001710
 80068b4:	20001708 	.word	0x20001708

080068b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <vTaskSuspendAll+0x18>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a03      	ldr	r2, [pc, #12]	; (80068d0 <vTaskSuspendAll+0x18>)
 80068c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	2000172c 	.word	0x2000172c

080068d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068e2:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <xTaskResumeAll+0x11c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10c      	bne.n	8006904 <xTaskResumeAll+0x30>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	b672      	cpsid	i
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	b662      	cpsie	i
 80068fe:	603b      	str	r3, [r7, #0]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006904:	f001 f922 	bl	8007b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006908:	4b39      	ldr	r3, [pc, #228]	; (80069f0 <xTaskResumeAll+0x11c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3b01      	subs	r3, #1
 800690e:	4a38      	ldr	r2, [pc, #224]	; (80069f0 <xTaskResumeAll+0x11c>)
 8006910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006912:	4b37      	ldr	r3, [pc, #220]	; (80069f0 <xTaskResumeAll+0x11c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d162      	bne.n	80069e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800691a:	4b36      	ldr	r3, [pc, #216]	; (80069f4 <xTaskResumeAll+0x120>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d05e      	beq.n	80069e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006922:	e02f      	b.n	8006984 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006924:	4b34      	ldr	r3, [pc, #208]	; (80069f8 <xTaskResumeAll+0x124>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3318      	adds	r3, #24
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe ffe1 	bl	80058f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3304      	adds	r3, #4
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe ffdc 	bl	80058f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <xTaskResumeAll+0x128>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d903      	bls.n	8006954 <xTaskResumeAll+0x80>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <xTaskResumeAll+0x128>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <xTaskResumeAll+0x12c>)
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3304      	adds	r3, #4
 8006968:	4619      	mov	r1, r3
 800696a:	4610      	mov	r0, r2
 800696c:	f7fe ff67 	bl	800583e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	4b23      	ldr	r3, [pc, #140]	; (8006a04 <xTaskResumeAll+0x130>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	429a      	cmp	r2, r3
 800697c:	d302      	bcc.n	8006984 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800697e:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <xTaskResumeAll+0x134>)
 8006980:	2201      	movs	r2, #1
 8006982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <xTaskResumeAll+0x124>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1cb      	bne.n	8006924 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006992:	f000 fb6f 	bl	8007074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <xTaskResumeAll+0x138>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d010      	beq.n	80069c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f000 f847 	bl	8006a34 <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80069ac:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <xTaskResumeAll+0x134>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f1      	bne.n	80069a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <xTaskResumeAll+0x138>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069c4:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <xTaskResumeAll+0x134>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069cc:	2301      	movs	r3, #1
 80069ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <xTaskResumeAll+0x13c>)
 80069d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069e0:	f001 f8e8 	bl	8007bb4 <vPortExitCritical>

	return xAlreadyYielded;
 80069e4:	68bb      	ldr	r3, [r7, #8]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	2000172c 	.word	0x2000172c
 80069f4:	20001704 	.word	0x20001704
 80069f8:	200016c4 	.word	0x200016c4
 80069fc:	2000170c 	.word	0x2000170c
 8006a00:	20001234 	.word	0x20001234
 8006a04:	20001230 	.word	0x20001230
 8006a08:	20001718 	.word	0x20001718
 8006a0c:	20001714 	.word	0x20001714
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <xTaskGetTickCount+0x1c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a20:	687b      	ldr	r3, [r7, #4]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20001708 	.word	0x20001708

08006a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3e:	4b50      	ldr	r3, [pc, #320]	; (8006b80 <xTaskIncrementTick+0x14c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 808b 	bne.w	8006b5e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a48:	4b4e      	ldr	r3, [pc, #312]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a50:	4a4c      	ldr	r2, [pc, #304]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d122      	bne.n	8006aa2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a5c:	4b4a      	ldr	r3, [pc, #296]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	b672      	cpsid	i
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	b662      	cpsie	i
 8006a7a:	603b      	str	r3, [r7, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <xTaskIncrementTick+0x4a>
 8006a80:	4b41      	ldr	r3, [pc, #260]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	4b41      	ldr	r3, [pc, #260]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	4a3f      	ldr	r2, [pc, #252]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	4a3d      	ldr	r2, [pc, #244]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	f000 fae9 	bl	8007074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006aa2:	4b3c      	ldr	r3, [pc, #240]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d349      	bcc.n	8006b40 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aac:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab6:	4b37      	ldr	r3, [pc, #220]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	601a      	str	r2, [r3, #0]
					break;
 8006abe:	e03f      	b.n	8006b40 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac0:	4b31      	ldr	r3, [pc, #196]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d203      	bcs.n	8006ae0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ad8:	4a2e      	ldr	r2, [pc, #184]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ade:	e02f      	b.n	8006b40 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe ff07 	bl	80058f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	3318      	adds	r3, #24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fefe 	bl	80058f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d903      	bls.n	8006b10 <xTaskIncrementTick+0xdc>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <xTaskIncrementTick+0x168>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fe89 	bl	800583e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <xTaskIncrementTick+0x16c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d3b8      	bcc.n	8006aac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3e:	e7b5      	b.n	8006aac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <xTaskIncrementTick+0x16c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b46:	4915      	ldr	r1, [pc, #84]	; (8006b9c <xTaskIncrementTick+0x168>)
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d907      	bls.n	8006b68 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e004      	b.n	8006b68 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <xTaskIncrementTick+0x170>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <xTaskIncrementTick+0x170>)
 8006b66:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b68:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <xTaskIncrementTick+0x174>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b74:	697b      	ldr	r3, [r7, #20]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	2000172c 	.word	0x2000172c
 8006b84:	20001708 	.word	0x20001708
 8006b88:	200016bc 	.word	0x200016bc
 8006b8c:	200016c0 	.word	0x200016c0
 8006b90:	2000171c 	.word	0x2000171c
 8006b94:	20001724 	.word	0x20001724
 8006b98:	2000170c 	.word	0x2000170c
 8006b9c:	20001234 	.word	0x20001234
 8006ba0:	20001230 	.word	0x20001230
 8006ba4:	20001714 	.word	0x20001714
 8006ba8:	20001718 	.word	0x20001718

08006bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <vTaskSwitchContext+0xb4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bba:	4b2a      	ldr	r3, [pc, #168]	; (8006c64 <vTaskSwitchContext+0xb8>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bc0:	e048      	b.n	8006c54 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8006bc2:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <vTaskSwitchContext+0xb8>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc8:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <vTaskSwitchContext+0xbc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	e012      	b.n	8006bf6 <vTaskSwitchContext+0x4a>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10c      	bne.n	8006bf0 <vTaskSwitchContext+0x44>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	b672      	cpsid	i
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	b662      	cpsie	i
 8006bea:	607b      	str	r3, [r7, #4]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <vTaskSwitchContext+0x42>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	491d      	ldr	r1, [pc, #116]	; (8006c6c <vTaskSwitchContext+0xc0>)
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0e2      	beq.n	8006bd0 <vTaskSwitchContext+0x24>
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <vTaskSwitchContext+0xc0>)
 8006c16:	4413      	add	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d104      	bne.n	8006c3a <vTaskSwitchContext+0x8e>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a0b      	ldr	r2, [pc, #44]	; (8006c70 <vTaskSwitchContext+0xc4>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4a08      	ldr	r2, [pc, #32]	; (8006c68 <vTaskSwitchContext+0xbc>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <vTaskSwitchContext+0xc4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3354      	adds	r3, #84	; 0x54
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <vTaskSwitchContext+0xc8>)
 8006c52:	6013      	str	r3, [r2, #0]
}
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	2000172c 	.word	0x2000172c
 8006c64:	20001718 	.word	0x20001718
 8006c68:	2000170c 	.word	0x2000170c
 8006c6c:	20001234 	.word	0x20001234
 8006c70:	20001230 	.word	0x20001230
 8006c74:	20000010 	.word	0x20000010

08006c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10c      	bne.n	8006ca2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	b672      	cpsid	i
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	b662      	cpsie	i
 8006c9c:	60fb      	str	r3, [r7, #12]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <vTaskPlaceOnEventList+0x48>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fe fdeb 	bl	8005886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	6838      	ldr	r0, [r7, #0]
 8006cb4:	f000 fa8e 	bl	80071d4 <prvAddCurrentTaskToDelayedList>
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20001230 	.word	0x20001230

08006cc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10c      	bne.n	8006cf0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	b672      	cpsid	i
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	b662      	cpsie	i
 8006cea:	617b      	str	r3, [r7, #20]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <vTaskPlaceOnEventListRestricted+0x58>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3318      	adds	r3, #24
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7fe fda0 	bl	800583e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295
 8006d08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	68b8      	ldr	r0, [r7, #8]
 8006d0e:	f000 fa61 	bl	80071d4 <prvAddCurrentTaskToDelayedList>
	}
 8006d12:	bf00      	nop
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20001230 	.word	0x20001230

08006d20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10c      	bne.n	8006d50 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	b672      	cpsid	i
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	b662      	cpsie	i
 8006d4a:	60fb      	str	r3, [r7, #12]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3318      	adds	r3, #24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fdcf 	bl	80058f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d5a:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <xTaskRemoveFromEventList+0xb4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d11d      	bne.n	8006d9e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fdc6 	bl	80058f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <xTaskRemoveFromEventList+0xb8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d903      	bls.n	8006d80 <xTaskRemoveFromEventList+0x60>
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <xTaskRemoveFromEventList+0xb8>)
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <xTaskRemoveFromEventList+0xbc>)
 8006d8e:	441a      	add	r2, r3
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7fe fd51 	bl	800583e <vListInsertEnd>
 8006d9c:	e005      	b.n	8006daa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3318      	adds	r3, #24
 8006da2:	4619      	mov	r1, r3
 8006da4:	480e      	ldr	r0, [pc, #56]	; (8006de0 <xTaskRemoveFromEventList+0xc0>)
 8006da6:	f7fe fd4a 	bl	800583e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <xTaskRemoveFromEventList+0xc4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d905      	bls.n	8006dc4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <xTaskRemoveFromEventList+0xc8>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e001      	b.n	8006dc8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dc8:	697b      	ldr	r3, [r7, #20]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	2000172c 	.word	0x2000172c
 8006dd8:	2000170c 	.word	0x2000170c
 8006ddc:	20001234 	.word	0x20001234
 8006de0:	200016c4 	.word	0x200016c4
 8006de4:	20001230 	.word	0x20001230
 8006de8:	20001718 	.word	0x20001718

08006dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <vTaskInternalSetTimeOutState+0x24>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <vTaskInternalSetTimeOutState+0x28>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	605a      	str	r2, [r3, #4]
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	2000171c 	.word	0x2000171c
 8006e14:	20001708 	.word	0x20001708

08006e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10c      	bne.n	8006e42 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	b672      	cpsid	i
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	b662      	cpsie	i
 8006e3c:	613b      	str	r3, [r7, #16]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10c      	bne.n	8006e62 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	b672      	cpsid	i
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	b662      	cpsie	i
 8006e5c:	60fb      	str	r3, [r7, #12]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006e62:	f000 fe73 	bl	8007b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <xTaskCheckForTimeOut+0xc4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d102      	bne.n	8006e86 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	e023      	b.n	8006ece <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <xTaskCheckForTimeOut+0xc8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d007      	beq.n	8006ea2 <xTaskCheckForTimeOut+0x8a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d302      	bcc.n	8006ea2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e015      	b.n	8006ece <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d20b      	bcs.n	8006ec4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff97 	bl	8006dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e004      	b.n	8006ece <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ece:	f000 fe71 	bl	8007bb4 <vPortExitCritical>

	return xReturn;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3720      	adds	r7, #32
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20001708 	.word	0x20001708
 8006ee0:	2000171c 	.word	0x2000171c

08006ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <vTaskMissedYield+0x14>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20001718 	.word	0x20001718

08006efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f04:	f000 f852 	bl	8006fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <prvIdleTask+0x28>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d9f9      	bls.n	8006f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <prvIdleTask+0x2c>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f20:	e7f0      	b.n	8006f04 <prvIdleTask+0x8>
 8006f22:	bf00      	nop
 8006f24:	20001234 	.word	0x20001234
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	e00c      	b.n	8006f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4a12      	ldr	r2, [pc, #72]	; (8006f8c <prvInitialiseTaskLists+0x60>)
 8006f44:	4413      	add	r3, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fc4c 	bl	80057e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b37      	cmp	r3, #55	; 0x37
 8006f56:	d9ef      	bls.n	8006f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f58:	480d      	ldr	r0, [pc, #52]	; (8006f90 <prvInitialiseTaskLists+0x64>)
 8006f5a:	f7fe fc43 	bl	80057e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f5e:	480d      	ldr	r0, [pc, #52]	; (8006f94 <prvInitialiseTaskLists+0x68>)
 8006f60:	f7fe fc40 	bl	80057e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f64:	480c      	ldr	r0, [pc, #48]	; (8006f98 <prvInitialiseTaskLists+0x6c>)
 8006f66:	f7fe fc3d 	bl	80057e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f6a:	480c      	ldr	r0, [pc, #48]	; (8006f9c <prvInitialiseTaskLists+0x70>)
 8006f6c:	f7fe fc3a 	bl	80057e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f70:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <prvInitialiseTaskLists+0x74>)
 8006f72:	f7fe fc37 	bl	80057e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <prvInitialiseTaskLists+0x78>)
 8006f78:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <prvInitialiseTaskLists+0x64>)
 8006f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <prvInitialiseTaskLists+0x7c>)
 8006f7e:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <prvInitialiseTaskLists+0x68>)
 8006f80:	601a      	str	r2, [r3, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20001234 	.word	0x20001234
 8006f90:	20001694 	.word	0x20001694
 8006f94:	200016a8 	.word	0x200016a8
 8006f98:	200016c4 	.word	0x200016c4
 8006f9c:	200016d8 	.word	0x200016d8
 8006fa0:	200016f0 	.word	0x200016f0
 8006fa4:	200016bc 	.word	0x200016bc
 8006fa8:	200016c0 	.word	0x200016c0

08006fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb2:	e019      	b.n	8006fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fb4:	f000 fdca 	bl	8007b4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <prvCheckTasksWaitingTermination+0x50>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fc97 	bl	80058f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <prvCheckTasksWaitingTermination+0x54>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <prvCheckTasksWaitingTermination+0x54>)
 8006fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <prvCheckTasksWaitingTermination+0x58>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <prvCheckTasksWaitingTermination+0x58>)
 8006fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fde:	f000 fde9 	bl	8007bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f810 	bl	8007008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <prvCheckTasksWaitingTermination+0x58>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e1      	bne.n	8006fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200016d8 	.word	0x200016d8
 8007000:	20001704 	.word	0x20001704
 8007004:	200016ec 	.word	0x200016ec

08007008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3354      	adds	r3, #84	; 0x54
 8007014:	4618      	mov	r0, r3
 8007016:	f001 ff55 	bl	8008ec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007020:	2b00      	cmp	r3, #0
 8007022:	d108      	bne.n	8007036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	4618      	mov	r0, r3
 800702a:	f000 ff85 	bl	8007f38 <vPortFree>
				vPortFree( pxTCB );
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 ff82 	bl	8007f38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007034:	e01a      	b.n	800706c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800703c:	2b01      	cmp	r3, #1
 800703e:	d103      	bne.n	8007048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 ff79 	bl	8007f38 <vPortFree>
	}
 8007046:	e011      	b.n	800706c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800704e:	2b02      	cmp	r3, #2
 8007050:	d00c      	beq.n	800706c <prvDeleteTCB+0x64>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	60fb      	str	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <prvDeleteTCB+0x62>
	}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <prvResetNextTaskUnblockTime+0x38>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800708c:	e008      	b.n	80070a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <prvResetNextTaskUnblockTime+0x38>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <prvResetNextTaskUnblockTime+0x3c>)
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200016bc 	.word	0x200016bc
 80070b0:	20001724 	.word	0x20001724

080070b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <xTaskGetSchedulerState+0x34>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070c2:	2301      	movs	r3, #1
 80070c4:	607b      	str	r3, [r7, #4]
 80070c6:	e008      	b.n	80070da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c8:	4b08      	ldr	r3, [pc, #32]	; (80070ec <xTaskGetSchedulerState+0x38>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d0:	2302      	movs	r3, #2
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	e001      	b.n	80070da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070da:	687b      	ldr	r3, [r7, #4]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20001710 	.word	0x20001710
 80070ec:	2000172c 	.word	0x2000172c

080070f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d05a      	beq.n	80071bc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007106:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <xTaskPriorityDisinherit+0xd8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	429a      	cmp	r2, r3
 800710e:	d00c      	beq.n	800712a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	b672      	cpsid	i
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	b662      	cpsie	i
 8007124:	60fb      	str	r3, [r7, #12]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10c      	bne.n	800714c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	b672      	cpsid	i
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	b662      	cpsie	i
 8007146:	60bb      	str	r3, [r7, #8]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	1e5a      	subs	r2, r3, #1
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715e:	429a      	cmp	r2, r3
 8007160:	d02c      	beq.n	80071bc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	2b00      	cmp	r3, #0
 8007168:	d128      	bne.n	80071bc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3304      	adds	r3, #4
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fbc2 	bl	80058f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <xTaskPriorityDisinherit+0xdc>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d903      	bls.n	800719c <xTaskPriorityDisinherit+0xac>
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	4a0c      	ldr	r2, [pc, #48]	; (80071cc <xTaskPriorityDisinherit+0xdc>)
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <xTaskPriorityDisinherit+0xe0>)
 80071aa:	441a      	add	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fe fb43 	bl	800583e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071bc:	697b      	ldr	r3, [r7, #20]
	}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20001230 	.word	0x20001230
 80071cc:	2000170c 	.word	0x2000170c
 80071d0:	20001234 	.word	0x20001234

080071d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071de:	4b21      	ldr	r3, [pc, #132]	; (8007264 <prvAddCurrentTaskToDelayedList+0x90>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071e4:	4b20      	ldr	r3, [pc, #128]	; (8007268 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fb84 	bl	80058f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	d10a      	bne.n	800720e <prvAddCurrentTaskToDelayedList+0x3a>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071fe:	4b1a      	ldr	r3, [pc, #104]	; (8007268 <prvAddCurrentTaskToDelayedList+0x94>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3304      	adds	r3, #4
 8007204:	4619      	mov	r1, r3
 8007206:	4819      	ldr	r0, [pc, #100]	; (800726c <prvAddCurrentTaskToDelayedList+0x98>)
 8007208:	f7fe fb19 	bl	800583e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800720c:	e026      	b.n	800725c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4413      	add	r3, r2
 8007214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007216:	4b14      	ldr	r3, [pc, #80]	; (8007268 <prvAddCurrentTaskToDelayedList+0x94>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	429a      	cmp	r2, r3
 8007224:	d209      	bcs.n	800723a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <prvAddCurrentTaskToDelayedList+0x94>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7fe fb27 	bl	8005886 <vListInsert>
}
 8007238:	e010      	b.n	800725c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800723a:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <prvAddCurrentTaskToDelayedList+0x94>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fb1d 	bl	8005886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	429a      	cmp	r2, r3
 8007254:	d202      	bcs.n	800725c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007256:	4a08      	ldr	r2, [pc, #32]	; (8007278 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6013      	str	r3, [r2, #0]
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20001708 	.word	0x20001708
 8007268:	20001230 	.word	0x20001230
 800726c:	200016f0 	.word	0x200016f0
 8007270:	200016c0 	.word	0x200016c0
 8007274:	200016bc 	.word	0x200016bc
 8007278:	20001724 	.word	0x20001724

0800727c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007286:	f000 fb15 	bl	80078b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800728a:	4b1d      	ldr	r3, [pc, #116]	; (8007300 <xTimerCreateTimerTask+0x84>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d021      	beq.n	80072d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800729a:	1d3a      	adds	r2, r7, #4
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	f107 030c 	add.w	r3, r7, #12
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fa83 	bl	80057b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	9202      	str	r2, [sp, #8]
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	2302      	movs	r3, #2
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2300      	movs	r3, #0
 80072ba:	460a      	mov	r2, r1
 80072bc:	4911      	ldr	r1, [pc, #68]	; (8007304 <xTimerCreateTimerTask+0x88>)
 80072be:	4812      	ldr	r0, [pc, #72]	; (8007308 <xTimerCreateTimerTask+0x8c>)
 80072c0:	f7ff f890 	bl	80063e4 <xTaskCreateStatic>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4a11      	ldr	r2, [pc, #68]	; (800730c <xTimerCreateTimerTask+0x90>)
 80072c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <xTimerCreateTimerTask+0x90>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10c      	bne.n	80072f6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	b672      	cpsid	i
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	b662      	cpsie	i
 80072f0:	613b      	str	r3, [r7, #16]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80072f6:	697b      	ldr	r3, [r7, #20]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20001760 	.word	0x20001760
 8007304:	0800ad70 	.word	0x0800ad70
 8007308:	0800744d 	.word	0x0800744d
 800730c:	20001764 	.word	0x20001764

08007310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <xTimerGenericCommand+0x32>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007342:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <xTimerGenericCommand+0x9c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02a      	beq.n	80073a0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b05      	cmp	r3, #5
 800735a:	dc18      	bgt.n	800738e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800735c:	f7ff feaa 	bl	80070b4 <xTaskGetSchedulerState>
 8007360:	4603      	mov	r3, r0
 8007362:	2b02      	cmp	r3, #2
 8007364:	d109      	bne.n	800737a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <xTimerGenericCommand+0x9c>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f107 0110 	add.w	r1, r7, #16
 800736e:	2300      	movs	r3, #0
 8007370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007372:	f7fe fc3d 	bl	8005bf0 <xQueueGenericSend>
 8007376:	6278      	str	r0, [r7, #36]	; 0x24
 8007378:	e012      	b.n	80073a0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800737a:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <xTimerGenericCommand+0x9c>)
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f107 0110 	add.w	r1, r7, #16
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	f7fe fc33 	bl	8005bf0 <xQueueGenericSend>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24
 800738c:	e008      	b.n	80073a0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800738e:	4b07      	ldr	r3, [pc, #28]	; (80073ac <xTimerGenericCommand+0x9c>)
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	f107 0110 	add.w	r1, r7, #16
 8007396:	2300      	movs	r3, #0
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	f7fe fd2f 	bl	8005dfc <xQueueGenericSendFromISR>
 800739e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3728      	adds	r7, #40	; 0x28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20001760 	.word	0x20001760

080073b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <prvProcessExpiredTimer+0x98>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fa95 	bl	80058f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d024      	beq.n	8007426 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	18d1      	adds	r1, r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f000 f8d3 	bl	8007594 <prvInsertTimerInActiveList>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d021      	beq.n	8007438 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	2100      	movs	r1, #0
 80073fe:	6978      	ldr	r0, [r7, #20]
 8007400:	f7ff ff86 	bl	8007310 <xTimerGenericCommand>
 8007404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d115      	bne.n	8007438 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	b672      	cpsid	i
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	b662      	cpsie	i
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742c:	f023 0301 	bic.w	r3, r3, #1
 8007430:	b2da      	uxtb	r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	6978      	ldr	r0, [r7, #20]
 800743e:	4798      	blx	r3
}
 8007440:	bf00      	nop
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20001758 	.word	0x20001758

0800744c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f857 	bl	800750c <prvGetNextExpireTime>
 800745e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4619      	mov	r1, r3
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f803 	bl	8007470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800746a:	f000 f8d5 	bl	8007618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800746e:	e7f1      	b.n	8007454 <prvTimerTask+0x8>

08007470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800747a:	f7ff fa1d 	bl	80068b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800747e:	f107 0308 	add.w	r3, r7, #8
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f866 	bl	8007554 <prvSampleTimeNow>
 8007488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d130      	bne.n	80074f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <prvProcessTimerOrBlockTask+0x3c>
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	429a      	cmp	r2, r3
 800749c:	d806      	bhi.n	80074ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800749e:	f7ff fa19 	bl	80068d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff83 	bl	80073b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074aa:	e024      	b.n	80074f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <prvProcessTimerOrBlockTask+0x90>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <prvProcessTimerOrBlockTask+0x50>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <prvProcessTimerOrBlockTask+0x52>
 80074c0:	2300      	movs	r3, #0
 80074c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <prvProcessTimerOrBlockTask+0x94>)
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	4619      	mov	r1, r3
 80074d2:	f7fe ff53 	bl	800637c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074d6:	f7ff f9fd 	bl	80068d4 <xTaskResumeAll>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074e0:	4b09      	ldr	r3, [pc, #36]	; (8007508 <prvProcessTimerOrBlockTask+0x98>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
}
 80074f0:	e001      	b.n	80074f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074f2:	f7ff f9ef 	bl	80068d4 <xTaskResumeAll>
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	2000175c 	.word	0x2000175c
 8007504:	20001760 	.word	0x20001760
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <prvGetNextExpireTime+0x44>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <prvGetNextExpireTime+0x16>
 800751e:	2201      	movs	r2, #1
 8007520:	e000      	b.n	8007524 <prvGetNextExpireTime+0x18>
 8007522:	2200      	movs	r2, #0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d105      	bne.n	800753c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <prvGetNextExpireTime+0x44>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e001      	b.n	8007540 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007540:	68fb      	ldr	r3, [r7, #12]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20001758 	.word	0x20001758

08007554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800755c:	f7ff fa5a 	bl	8006a14 <xTaskGetTickCount>
 8007560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <prvSampleTimeNow+0x3c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	429a      	cmp	r2, r3
 800756a:	d205      	bcs.n	8007578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800756c:	f000 f93c 	bl	80077e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e002      	b.n	800757e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800757e:	4a04      	ldr	r2, [pc, #16]	; (8007590 <prvSampleTimeNow+0x3c>)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20001768 	.word	0x20001768

08007594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d812      	bhi.n	80075e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e01b      	b.n	8007606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075ce:	4b10      	ldr	r3, [pc, #64]	; (8007610 <prvInsertTimerInActiveList+0x7c>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7fe f954 	bl	8005886 <vListInsert>
 80075de:	e012      	b.n	8007606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d206      	bcs.n	80075f6 <prvInsertTimerInActiveList+0x62>
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d302      	bcc.n	80075f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e007      	b.n	8007606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <prvInsertTimerInActiveList+0x80>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f7fe f940 	bl	8005886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007606:	697b      	ldr	r3, [r7, #20]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000175c 	.word	0x2000175c
 8007614:	20001758 	.word	0x20001758

08007618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	; 0x38
 800761c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800761e:	e0d0      	b.n	80077c2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	da1a      	bge.n	800765c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	3304      	adds	r3, #4
 800762a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10c      	bne.n	800764c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	b672      	cpsid	i
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	b662      	cpsie	i
 8007646:	61fb      	str	r3, [r7, #28]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007652:	6850      	ldr	r0, [r2, #4]
 8007654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007656:	6892      	ldr	r2, [r2, #8]
 8007658:	4611      	mov	r1, r2
 800765a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f2c0 80ae 	blt.w	80077c0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe f93f 	bl	80058f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800767a:	463b      	mov	r3, r7
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff ff69 	bl	8007554 <prvSampleTimeNow>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b09      	cmp	r3, #9
 8007688:	f200 809b 	bhi.w	80077c2 <prvProcessReceivedCommands+0x1aa>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <prvProcessReceivedCommands+0x7c>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076bd 	.word	0x080076bd
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076bd 	.word	0x080076bd
 80076a0:	08007735 	.word	0x08007735
 80076a4:	08007749 	.word	0x08007749
 80076a8:	08007797 	.word	0x08007797
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076bd 	.word	0x080076bd
 80076b4:	08007735 	.word	0x08007735
 80076b8:	08007749 	.word	0x08007749
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	18d1      	adds	r1, r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076dc:	f7ff ff5a 	bl	8007594 <prvInsertTimerInActiveList>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d06d      	beq.n	80077c2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d062      	beq.n	80077c2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	441a      	add	r2, r3
 8007704:	2300      	movs	r3, #0
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	2300      	movs	r3, #0
 800770a:	2100      	movs	r1, #0
 800770c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800770e:	f7ff fdff 	bl	8007310 <xTimerGenericCommand>
 8007712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d153      	bne.n	80077c2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
 800772e:	61bb      	str	r3, [r7, #24]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	b2da      	uxtb	r2, r3
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007746:	e03c      	b.n	80077c2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	b2da      	uxtb	r2, r3
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10c      	bne.n	8007782 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	b672      	cpsid	i
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	b662      	cpsie	i
 800777c:	617b      	str	r3, [r7, #20]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	18d1      	adds	r1, r2, r3
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007790:	f7ff ff00 	bl	8007594 <prvInsertTimerInActiveList>
					break;
 8007794:	e015      	b.n	80077c2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80077a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a6:	f000 fbc7 	bl	8007f38 <vPortFree>
 80077aa:	e00a      	b.n	80077c2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077be:	e000      	b.n	80077c2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077c2:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <prvProcessReceivedCommands+0x1cc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	1d39      	adds	r1, r7, #4
 80077c8:	2200      	movs	r2, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fbb6 	bl	8005f3c <xQueueReceive>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f47f af24 	bne.w	8007620 <prvProcessReceivedCommands+0x8>
	}
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	3730      	adds	r7, #48	; 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20001760 	.word	0x20001760

080077e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077ee:	e04a      	b.n	8007886 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077f0:	4b2e      	ldr	r3, [pc, #184]	; (80078ac <prvSwitchTimerLists+0xc4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fa:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <prvSwitchTimerLists+0xc4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3304      	adds	r3, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe f875 	bl	80058f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d030      	beq.n	8007886 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4413      	add	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	429a      	cmp	r2, r3
 8007834:	d90e      	bls.n	8007854 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007842:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <prvSwitchTimerLists+0xc4>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3304      	adds	r3, #4
 800784a:	4619      	mov	r1, r3
 800784c:	4610      	mov	r0, r2
 800784e:	f7fe f81a 	bl	8005886 <vListInsert>
 8007852:	e018      	b.n	8007886 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007854:	2300      	movs	r3, #0
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	2100      	movs	r1, #0
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff fd56 	bl	8007310 <xTimerGenericCommand>
 8007864:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10c      	bne.n	8007886 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	b672      	cpsid	i
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	b662      	cpsie	i
 8007880:	603b      	str	r3, [r7, #0]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <prvSwitchTimerLists+0xc4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1af      	bne.n	80077f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <prvSwitchTimerLists+0xc4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <prvSwitchTimerLists+0xc8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a04      	ldr	r2, [pc, #16]	; (80078ac <prvSwitchTimerLists+0xc4>)
 800789c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800789e:	4a04      	ldr	r2, [pc, #16]	; (80078b0 <prvSwitchTimerLists+0xc8>)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	6013      	str	r3, [r2, #0]
}
 80078a4:	bf00      	nop
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20001758 	.word	0x20001758
 80078b0:	2000175c 	.word	0x2000175c

080078b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078ba:	f000 f947 	bl	8007b4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <prvCheckForValidListAndQueue+0x60>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d120      	bne.n	8007908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078c6:	4814      	ldr	r0, [pc, #80]	; (8007918 <prvCheckForValidListAndQueue+0x64>)
 80078c8:	f7fd ff8c 	bl	80057e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078cc:	4813      	ldr	r0, [pc, #76]	; (800791c <prvCheckForValidListAndQueue+0x68>)
 80078ce:	f7fd ff89 	bl	80057e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <prvCheckForValidListAndQueue+0x6c>)
 80078d4:	4a10      	ldr	r2, [pc, #64]	; (8007918 <prvCheckForValidListAndQueue+0x64>)
 80078d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078d8:	4b12      	ldr	r3, [pc, #72]	; (8007924 <prvCheckForValidListAndQueue+0x70>)
 80078da:	4a10      	ldr	r2, [pc, #64]	; (800791c <prvCheckForValidListAndQueue+0x68>)
 80078dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078de:	2300      	movs	r3, #0
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <prvCheckForValidListAndQueue+0x74>)
 80078e4:	4a11      	ldr	r2, [pc, #68]	; (800792c <prvCheckForValidListAndQueue+0x78>)
 80078e6:	2110      	movs	r1, #16
 80078e8:	200a      	movs	r0, #10
 80078ea:	f7fe f899 	bl	8005a20 <xQueueGenericCreateStatic>
 80078ee:	4603      	mov	r3, r0
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <prvCheckForValidListAndQueue+0x60>)
 80078f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <prvCheckForValidListAndQueue+0x60>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <prvCheckForValidListAndQueue+0x60>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	490b      	ldr	r1, [pc, #44]	; (8007930 <prvCheckForValidListAndQueue+0x7c>)
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fd10 	bl	8006328 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007908:	f000 f954 	bl	8007bb4 <vPortExitCritical>
}
 800790c:	bf00      	nop
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20001760 	.word	0x20001760
 8007918:	20001730 	.word	0x20001730
 800791c:	20001744 	.word	0x20001744
 8007920:	20001758 	.word	0x20001758
 8007924:	2000175c 	.word	0x2000175c
 8007928:	2000180c 	.word	0x2000180c
 800792c:	2000176c 	.word	0x2000176c
 8007930:	0800ad78 	.word	0x0800ad78

08007934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3b04      	subs	r3, #4
 8007944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800794c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3b04      	subs	r3, #4
 8007952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b04      	subs	r3, #4
 8007962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007964:	4a0c      	ldr	r2, [pc, #48]	; (8007998 <pxPortInitialiseStack+0x64>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3b14      	subs	r3, #20
 800796e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3b04      	subs	r3, #4
 800797a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f06f 0202 	mvn.w	r2, #2
 8007982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3b20      	subs	r3, #32
 8007988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800798a:	68fb      	ldr	r3, [r7, #12]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	0800799d 	.word	0x0800799d

0800799c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079a6:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <prvTaskExitError+0x5c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d00c      	beq.n	80079ca <prvTaskExitError+0x2e>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	b672      	cpsid	i
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	b662      	cpsie	i
 80079c4:	60fb      	str	r3, [r7, #12]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <prvTaskExitError+0x2c>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	b672      	cpsid	i
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	b662      	cpsie	i
 80079de:	60bb      	str	r3, [r7, #8]
}
 80079e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079e2:	bf00      	nop
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0fc      	beq.n	80079e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	2000000c 	.word	0x2000000c
 80079fc:	00000000 	.word	0x00000000

08007a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <pxCurrentTCBConst2>)
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	6808      	ldr	r0, [r1, #0]
 8007a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	f380 8809 	msr	PSP, r0
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8811 	msr	BASEPRI, r0
 8007a1a:	4770      	bx	lr
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst2>:
 8007a20:	20001230 	.word	0x20001230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a28:	4808      	ldr	r0, [pc, #32]	; (8007a4c <prvPortStartFirstTask+0x24>)
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	6800      	ldr	r0, [r0, #0]
 8007a2e:	f380 8808 	msr	MSP, r0
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8814 	msr	CONTROL, r0
 8007a3a:	b662      	cpsie	i
 8007a3c:	b661      	cpsie	f
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	df00      	svc	0
 8007a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a4a:	bf00      	nop
 8007a4c:	e000ed08 	.word	0xe000ed08

08007a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <xPortStartScheduler+0xe4>)
 8007a58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	22ff      	movs	r2, #255	; 0xff
 8007a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b2f      	ldr	r3, [pc, #188]	; (8007b38 <xPortStartScheduler+0xe8>)
 8007a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a7e:	4b2f      	ldr	r3, [pc, #188]	; (8007b3c <xPortStartScheduler+0xec>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a84:	e009      	b.n	8007a9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007a86:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <xPortStartScheduler+0xec>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	4a2b      	ldr	r2, [pc, #172]	; (8007b3c <xPortStartScheduler+0xec>)
 8007a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d0ef      	beq.n	8007a86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aa6:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <xPortStartScheduler+0xec>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f1c3 0307 	rsb	r3, r3, #7
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d00c      	beq.n	8007acc <xPortStartScheduler+0x7c>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	b672      	cpsid	i
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	b662      	cpsie	i
 8007ac6:	60bb      	str	r3, [r7, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007acc:	4b1b      	ldr	r3, [pc, #108]	; (8007b3c <xPortStartScheduler+0xec>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	; (8007b3c <xPortStartScheduler+0xec>)
 8007ad4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ad6:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <xPortStartScheduler+0xec>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ade:	4a17      	ldr	r2, [pc, #92]	; (8007b3c <xPortStartScheduler+0xec>)
 8007ae0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aea:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <xPortStartScheduler+0xf0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <xPortStartScheduler+0xf0>)
 8007af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007af4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007af6:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <xPortStartScheduler+0xf0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a11      	ldr	r2, [pc, #68]	; (8007b40 <xPortStartScheduler+0xf0>)
 8007afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b02:	f000 f8dd 	bl	8007cc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b06:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <xPortStartScheduler+0xf4>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b0c:	f000 f8fc 	bl	8007d08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <xPortStartScheduler+0xf8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a0c      	ldr	r2, [pc, #48]	; (8007b48 <xPortStartScheduler+0xf8>)
 8007b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b1c:	f7ff ff84 	bl	8007a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b20:	f7ff f844 	bl	8006bac <vTaskSwitchContext>
	prvTaskExitError();
 8007b24:	f7ff ff3a 	bl	800799c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	e000e400 	.word	0xe000e400
 8007b38:	2000185c 	.word	0x2000185c
 8007b3c:	20001860 	.word	0x20001860
 8007b40:	e000ed20 	.word	0xe000ed20
 8007b44:	2000000c 	.word	0x2000000c
 8007b48:	e000ef34 	.word	0xe000ef34

08007b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	b672      	cpsid	i
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	b662      	cpsie	i
 8007b66:	607b      	str	r3, [r7, #4]
}
 8007b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b6a:	4b10      	ldr	r3, [pc, #64]	; (8007bac <vPortEnterCritical+0x60>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	4a0e      	ldr	r2, [pc, #56]	; (8007bac <vPortEnterCritical+0x60>)
 8007b72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b74:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <vPortEnterCritical+0x60>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d111      	bne.n	8007ba0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	; (8007bb0 <vPortEnterCritical+0x64>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00c      	beq.n	8007ba0 <vPortEnterCritical+0x54>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	b672      	cpsid	i
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	b662      	cpsie	i
 8007b9a:	603b      	str	r3, [r7, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vPortEnterCritical+0x52>
	}
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	2000000c 	.word	0x2000000c
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bba:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <vPortExitCritical+0x54>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10c      	bne.n	8007bdc <vPortExitCritical+0x28>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	b672      	cpsid	i
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	b662      	cpsie	i
 8007bd6:	607b      	str	r3, [r7, #4]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <vPortExitCritical+0x54>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <vPortExitCritical+0x54>)
 8007be4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <vPortExitCritical+0x54>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d105      	bne.n	8007bfa <vPortExitCritical+0x46>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f383 8811 	msr	BASEPRI, r3
}
 8007bf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	2000000c 	.word	0x2000000c
 8007c0c:	00000000 	.word	0x00000000

08007c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c10:	f3ef 8009 	mrs	r0, PSP
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <pxCurrentTCBConst>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	f01e 0f10 	tst.w	lr, #16
 8007c20:	bf08      	it	eq
 8007c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	6010      	str	r0, [r2, #0]
 8007c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c34:	b672      	cpsid	i
 8007c36:	f380 8811 	msr	BASEPRI, r0
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	b662      	cpsie	i
 8007c44:	f7fe ffb2 	bl	8006bac <vTaskSwitchContext>
 8007c48:	f04f 0000 	mov.w	r0, #0
 8007c4c:	f380 8811 	msr	BASEPRI, r0
 8007c50:	bc09      	pop	{r0, r3}
 8007c52:	6819      	ldr	r1, [r3, #0]
 8007c54:	6808      	ldr	r0, [r1, #0]
 8007c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	f01e 0f10 	tst.w	lr, #16
 8007c5e:	bf08      	it	eq
 8007c60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c64:	f380 8809 	msr	PSP, r0
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop

08007c70 <pxCurrentTCBConst>:
 8007c70:	20001230 	.word	0x20001230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	b672      	cpsid	i
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	b662      	cpsie	i
 8007c92:	607b      	str	r3, [r7, #4]
}
 8007c94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c96:	f7fe fecd 	bl	8006a34 <xTaskIncrementTick>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <SysTick_Handler+0x44>)
 8007ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	f383 8811 	msr	BASEPRI, r3
}
 8007cb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <vPortSetupTimerInterrupt+0x34>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <vPortSetupTimerInterrupt+0x38>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cd0:	4b0a      	ldr	r3, [pc, #40]	; (8007cfc <vPortSetupTimerInterrupt+0x3c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <vPortSetupTimerInterrupt+0x40>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	099b      	lsrs	r3, r3, #6
 8007cdc:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <vPortSetupTimerInterrupt+0x44>)
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ce2:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <vPortSetupTimerInterrupt+0x34>)
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	601a      	str	r2, [r3, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	e000e010 	.word	0xe000e010
 8007cf8:	e000e018 	.word	0xe000e018
 8007cfc:	20000000 	.word	0x20000000
 8007d00:	10624dd3 	.word	0x10624dd3
 8007d04:	e000e014 	.word	0xe000e014

08007d08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d18 <vPortEnableVFP+0x10>
 8007d0c:	6801      	ldr	r1, [r0, #0]
 8007d0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d12:	6001      	str	r1, [r0, #0]
 8007d14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d16:	bf00      	nop
 8007d18:	e000ed88 	.word	0xe000ed88

08007d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d22:	f3ef 8305 	mrs	r3, IPSR
 8007d26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d916      	bls.n	8007d5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d2e:	4a19      	ldr	r2, [pc, #100]	; (8007d94 <vPortValidateInterruptPriority+0x78>)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d38:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <vPortValidateInterruptPriority+0x7c>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	7afa      	ldrb	r2, [r7, #11]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d20c      	bcs.n	8007d5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	b672      	cpsid	i
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	b662      	cpsie	i
 8007d56:	607b      	str	r3, [r7, #4]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <vPortValidateInterruptPriority+0x80>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <vPortValidateInterruptPriority+0x84>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d90c      	bls.n	8007d86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	b672      	cpsid	i
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	b662      	cpsie	i
 8007d80:	603b      	str	r3, [r7, #0]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <vPortValidateInterruptPriority+0x68>
	}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	e000e3f0 	.word	0xe000e3f0
 8007d98:	2000185c 	.word	0x2000185c
 8007d9c:	e000ed0c 	.word	0xe000ed0c
 8007da0:	20001860 	.word	0x20001860

08007da4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007db0:	f7fe fd82 	bl	80068b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007db4:	4b5b      	ldr	r3, [pc, #364]	; (8007f24 <pvPortMalloc+0x180>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dbc:	f000 f91a 	bl	8007ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dc0:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <pvPortMalloc+0x184>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8092 	bne.w	8007ef2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01f      	beq.n	8007e14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007dd4:	2208      	movs	r2, #8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4413      	add	r3, r2
 8007dda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d016      	beq.n	8007e14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f023 0307 	bic.w	r3, r3, #7
 8007dec:	3308      	adds	r3, #8
 8007dee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00c      	beq.n	8007e14 <pvPortMalloc+0x70>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	b672      	cpsid	i
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	b662      	cpsie	i
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d06b      	beq.n	8007ef2 <pvPortMalloc+0x14e>
 8007e1a:	4b44      	ldr	r3, [pc, #272]	; (8007f2c <pvPortMalloc+0x188>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d866      	bhi.n	8007ef2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e24:	4b42      	ldr	r3, [pc, #264]	; (8007f30 <pvPortMalloc+0x18c>)
 8007e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e28:	4b41      	ldr	r3, [pc, #260]	; (8007f30 <pvPortMalloc+0x18c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2e:	e004      	b.n	8007e3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <pvPortMalloc+0xa8>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e4c:	4b35      	ldr	r3, [pc, #212]	; (8007f24 <pvPortMalloc+0x180>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d04d      	beq.n	8007ef2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	2308      	movs	r3, #8
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d921      	bls.n	8007ebc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00c      	beq.n	8007ea4 <pvPortMalloc+0x100>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	b672      	cpsid	i
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	b662      	cpsie	i
 8007e9e:	613b      	str	r3, [r7, #16]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb6:	69b8      	ldr	r0, [r7, #24]
 8007eb8:	f000 f8fe 	bl	80080b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ebc:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <pvPortMalloc+0x188>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	4a19      	ldr	r2, [pc, #100]	; (8007f2c <pvPortMalloc+0x188>)
 8007ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <pvPortMalloc+0x188>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	4b19      	ldr	r3, [pc, #100]	; (8007f34 <pvPortMalloc+0x190>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d203      	bcs.n	8007ede <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <pvPortMalloc+0x188>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <pvPortMalloc+0x190>)
 8007edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	4b11      	ldr	r3, [pc, #68]	; (8007f28 <pvPortMalloc+0x184>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ef2:	f7fe fcef 	bl	80068d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <pvPortMalloc+0x176>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	60fb      	str	r3, [r7, #12]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <pvPortMalloc+0x174>
	return pvReturn;
 8007f1a:	69fb      	ldr	r3, [r7, #28]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3728      	adds	r7, #40	; 0x28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	2000546c 	.word	0x2000546c
 8007f28:	20005478 	.word	0x20005478
 8007f2c:	20005470 	.word	0x20005470
 8007f30:	20005464 	.word	0x20005464
 8007f34:	20005474 	.word	0x20005474

08007f38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d04c      	beq.n	8007fe4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f4a:	2308      	movs	r3, #8
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4413      	add	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b23      	ldr	r3, [pc, #140]	; (8007fec <vPortFree+0xb4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4013      	ands	r3, r2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10c      	bne.n	8007f80 <vPortFree+0x48>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	60fb      	str	r3, [r7, #12]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <vPortFree+0x6a>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <vPortFree+0xb4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d019      	beq.n	8007fe4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d115      	bne.n	8007fe4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <vPortFree+0xb4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc8:	f7fe fc76 	bl	80068b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <vPortFree+0xb8>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4a06      	ldr	r2, [pc, #24]	; (8007ff0 <vPortFree+0xb8>)
 8007fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f000 f86c 	bl	80080b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007fe0:	f7fe fc78 	bl	80068d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fe4:	bf00      	nop
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20005478 	.word	0x20005478
 8007ff0:	20005470 	.word	0x20005470

08007ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008000:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <prvHeapInit+0xac>)
 8008002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3307      	adds	r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0307 	bic.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <prvHeapInit+0xac>)
 8008024:	4413      	add	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800802c:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <prvHeapInit+0xb0>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <prvHeapInit+0xb0>)
 8008034:	2200      	movs	r2, #0
 8008036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008040:	2208      	movs	r2, #8
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <prvHeapInit+0xb4>)
 8008054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <prvHeapInit+0xb4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <prvHeapInit+0xb4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008074:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <prvHeapInit+0xb4>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <prvHeapInit+0xb8>)
 8008082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <prvHeapInit+0xbc>)
 800808a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <prvHeapInit+0xc0>)
 800808e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20001864 	.word	0x20001864
 80080a4:	20005464 	.word	0x20005464
 80080a8:	2000546c 	.word	0x2000546c
 80080ac:	20005474 	.word	0x20005474
 80080b0:	20005470 	.word	0x20005470
 80080b4:	20005478 	.word	0x20005478

080080b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080c0:	4b28      	ldr	r3, [pc, #160]	; (8008164 <prvInsertBlockIntoFreeList+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e002      	b.n	80080cc <prvInsertBlockIntoFreeList+0x14>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d8f7      	bhi.n	80080c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	4413      	add	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d108      	bne.n	80080fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	441a      	add	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	441a      	add	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d118      	bne.n	8008140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <prvInsertBlockIntoFreeList+0xb0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d00d      	beq.n	8008136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	441a      	add	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	e008      	b.n	8008148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <prvInsertBlockIntoFreeList+0xb0>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e003      	b.n	8008148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d002      	beq.n	8008156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20005464 	.word	0x20005464
 8008168:	2000546c 	.word	0x2000546c

0800816c <__errno>:
 800816c:	4b01      	ldr	r3, [pc, #4]	; (8008174 <__errno+0x8>)
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000010 	.word	0x20000010

08008178 <std>:
 8008178:	2300      	movs	r3, #0
 800817a:	b510      	push	{r4, lr}
 800817c:	4604      	mov	r4, r0
 800817e:	e9c0 3300 	strd	r3, r3, [r0]
 8008182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008186:	6083      	str	r3, [r0, #8]
 8008188:	8181      	strh	r1, [r0, #12]
 800818a:	6643      	str	r3, [r0, #100]	; 0x64
 800818c:	81c2      	strh	r2, [r0, #14]
 800818e:	6183      	str	r3, [r0, #24]
 8008190:	4619      	mov	r1, r3
 8008192:	2208      	movs	r2, #8
 8008194:	305c      	adds	r0, #92	; 0x5c
 8008196:	f000 f91a 	bl	80083ce <memset>
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <std+0x38>)
 800819c:	6263      	str	r3, [r4, #36]	; 0x24
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <std+0x3c>)
 80081a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <std+0x40>)
 80081a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <std+0x44>)
 80081a8:	6224      	str	r4, [r4, #32]
 80081aa:	6323      	str	r3, [r4, #48]	; 0x30
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	08008f9d 	.word	0x08008f9d
 80081b4:	08008fbf 	.word	0x08008fbf
 80081b8:	08008ff7 	.word	0x08008ff7
 80081bc:	0800901b 	.word	0x0800901b

080081c0 <_cleanup_r>:
 80081c0:	4901      	ldr	r1, [pc, #4]	; (80081c8 <_cleanup_r+0x8>)
 80081c2:	f000 b8af 	b.w	8008324 <_fwalk_reent>
 80081c6:	bf00      	nop
 80081c8:	08009ee9 	.word	0x08009ee9

080081cc <__sfmoreglue>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	2268      	movs	r2, #104	; 0x68
 80081d0:	1e4d      	subs	r5, r1, #1
 80081d2:	4355      	muls	r5, r2
 80081d4:	460e      	mov	r6, r1
 80081d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081da:	f000 f921 	bl	8008420 <_malloc_r>
 80081de:	4604      	mov	r4, r0
 80081e0:	b140      	cbz	r0, 80081f4 <__sfmoreglue+0x28>
 80081e2:	2100      	movs	r1, #0
 80081e4:	e9c0 1600 	strd	r1, r6, [r0]
 80081e8:	300c      	adds	r0, #12
 80081ea:	60a0      	str	r0, [r4, #8]
 80081ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081f0:	f000 f8ed 	bl	80083ce <memset>
 80081f4:	4620      	mov	r0, r4
 80081f6:	bd70      	pop	{r4, r5, r6, pc}

080081f8 <__sfp_lock_acquire>:
 80081f8:	4801      	ldr	r0, [pc, #4]	; (8008200 <__sfp_lock_acquire+0x8>)
 80081fa:	f000 b8d8 	b.w	80083ae <__retarget_lock_acquire_recursive>
 80081fe:	bf00      	nop
 8008200:	2000547d 	.word	0x2000547d

08008204 <__sfp_lock_release>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__sfp_lock_release+0x8>)
 8008206:	f000 b8d3 	b.w	80083b0 <__retarget_lock_release_recursive>
 800820a:	bf00      	nop
 800820c:	2000547d 	.word	0x2000547d

08008210 <__sinit_lock_acquire>:
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <__sinit_lock_acquire+0x8>)
 8008212:	f000 b8cc 	b.w	80083ae <__retarget_lock_acquire_recursive>
 8008216:	bf00      	nop
 8008218:	2000547e 	.word	0x2000547e

0800821c <__sinit_lock_release>:
 800821c:	4801      	ldr	r0, [pc, #4]	; (8008224 <__sinit_lock_release+0x8>)
 800821e:	f000 b8c7 	b.w	80083b0 <__retarget_lock_release_recursive>
 8008222:	bf00      	nop
 8008224:	2000547e 	.word	0x2000547e

08008228 <__sinit>:
 8008228:	b510      	push	{r4, lr}
 800822a:	4604      	mov	r4, r0
 800822c:	f7ff fff0 	bl	8008210 <__sinit_lock_acquire>
 8008230:	69a3      	ldr	r3, [r4, #24]
 8008232:	b11b      	cbz	r3, 800823c <__sinit+0x14>
 8008234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008238:	f7ff bff0 	b.w	800821c <__sinit_lock_release>
 800823c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008240:	6523      	str	r3, [r4, #80]	; 0x50
 8008242:	4b13      	ldr	r3, [pc, #76]	; (8008290 <__sinit+0x68>)
 8008244:	4a13      	ldr	r2, [pc, #76]	; (8008294 <__sinit+0x6c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	62a2      	str	r2, [r4, #40]	; 0x28
 800824a:	42a3      	cmp	r3, r4
 800824c:	bf04      	itt	eq
 800824e:	2301      	moveq	r3, #1
 8008250:	61a3      	streq	r3, [r4, #24]
 8008252:	4620      	mov	r0, r4
 8008254:	f000 f820 	bl	8008298 <__sfp>
 8008258:	6060      	str	r0, [r4, #4]
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f81c 	bl	8008298 <__sfp>
 8008260:	60a0      	str	r0, [r4, #8]
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f818 	bl	8008298 <__sfp>
 8008268:	2200      	movs	r2, #0
 800826a:	60e0      	str	r0, [r4, #12]
 800826c:	2104      	movs	r1, #4
 800826e:	6860      	ldr	r0, [r4, #4]
 8008270:	f7ff ff82 	bl	8008178 <std>
 8008274:	68a0      	ldr	r0, [r4, #8]
 8008276:	2201      	movs	r2, #1
 8008278:	2109      	movs	r1, #9
 800827a:	f7ff ff7d 	bl	8008178 <std>
 800827e:	68e0      	ldr	r0, [r4, #12]
 8008280:	2202      	movs	r2, #2
 8008282:	2112      	movs	r1, #18
 8008284:	f7ff ff78 	bl	8008178 <std>
 8008288:	2301      	movs	r3, #1
 800828a:	61a3      	str	r3, [r4, #24]
 800828c:	e7d2      	b.n	8008234 <__sinit+0xc>
 800828e:	bf00      	nop
 8008290:	0800adf8 	.word	0x0800adf8
 8008294:	080081c1 	.word	0x080081c1

08008298 <__sfp>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	4607      	mov	r7, r0
 800829c:	f7ff ffac 	bl	80081f8 <__sfp_lock_acquire>
 80082a0:	4b1e      	ldr	r3, [pc, #120]	; (800831c <__sfp+0x84>)
 80082a2:	681e      	ldr	r6, [r3, #0]
 80082a4:	69b3      	ldr	r3, [r6, #24]
 80082a6:	b913      	cbnz	r3, 80082ae <__sfp+0x16>
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7ff ffbd 	bl	8008228 <__sinit>
 80082ae:	3648      	adds	r6, #72	; 0x48
 80082b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	d503      	bpl.n	80082c0 <__sfp+0x28>
 80082b8:	6833      	ldr	r3, [r6, #0]
 80082ba:	b30b      	cbz	r3, 8008300 <__sfp+0x68>
 80082bc:	6836      	ldr	r6, [r6, #0]
 80082be:	e7f7      	b.n	80082b0 <__sfp+0x18>
 80082c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082c4:	b9d5      	cbnz	r5, 80082fc <__sfp+0x64>
 80082c6:	4b16      	ldr	r3, [pc, #88]	; (8008320 <__sfp+0x88>)
 80082c8:	60e3      	str	r3, [r4, #12]
 80082ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ce:	6665      	str	r5, [r4, #100]	; 0x64
 80082d0:	f000 f86c 	bl	80083ac <__retarget_lock_init_recursive>
 80082d4:	f7ff ff96 	bl	8008204 <__sfp_lock_release>
 80082d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082e0:	6025      	str	r5, [r4, #0]
 80082e2:	61a5      	str	r5, [r4, #24]
 80082e4:	2208      	movs	r2, #8
 80082e6:	4629      	mov	r1, r5
 80082e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082ec:	f000 f86f 	bl	80083ce <memset>
 80082f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082f8:	4620      	mov	r0, r4
 80082fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fc:	3468      	adds	r4, #104	; 0x68
 80082fe:	e7d9      	b.n	80082b4 <__sfp+0x1c>
 8008300:	2104      	movs	r1, #4
 8008302:	4638      	mov	r0, r7
 8008304:	f7ff ff62 	bl	80081cc <__sfmoreglue>
 8008308:	4604      	mov	r4, r0
 800830a:	6030      	str	r0, [r6, #0]
 800830c:	2800      	cmp	r0, #0
 800830e:	d1d5      	bne.n	80082bc <__sfp+0x24>
 8008310:	f7ff ff78 	bl	8008204 <__sfp_lock_release>
 8008314:	230c      	movs	r3, #12
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	e7ee      	b.n	80082f8 <__sfp+0x60>
 800831a:	bf00      	nop
 800831c:	0800adf8 	.word	0x0800adf8
 8008320:	ffff0001 	.word	0xffff0001

08008324 <_fwalk_reent>:
 8008324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008328:	4606      	mov	r6, r0
 800832a:	4688      	mov	r8, r1
 800832c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008330:	2700      	movs	r7, #0
 8008332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008336:	f1b9 0901 	subs.w	r9, r9, #1
 800833a:	d505      	bpl.n	8008348 <_fwalk_reent+0x24>
 800833c:	6824      	ldr	r4, [r4, #0]
 800833e:	2c00      	cmp	r4, #0
 8008340:	d1f7      	bne.n	8008332 <_fwalk_reent+0xe>
 8008342:	4638      	mov	r0, r7
 8008344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008348:	89ab      	ldrh	r3, [r5, #12]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d907      	bls.n	800835e <_fwalk_reent+0x3a>
 800834e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008352:	3301      	adds	r3, #1
 8008354:	d003      	beq.n	800835e <_fwalk_reent+0x3a>
 8008356:	4629      	mov	r1, r5
 8008358:	4630      	mov	r0, r6
 800835a:	47c0      	blx	r8
 800835c:	4307      	orrs	r7, r0
 800835e:	3568      	adds	r5, #104	; 0x68
 8008360:	e7e9      	b.n	8008336 <_fwalk_reent+0x12>
	...

08008364 <__libc_init_array>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4d0d      	ldr	r5, [pc, #52]	; (800839c <__libc_init_array+0x38>)
 8008368:	4c0d      	ldr	r4, [pc, #52]	; (80083a0 <__libc_init_array+0x3c>)
 800836a:	1b64      	subs	r4, r4, r5
 800836c:	10a4      	asrs	r4, r4, #2
 800836e:	2600      	movs	r6, #0
 8008370:	42a6      	cmp	r6, r4
 8008372:	d109      	bne.n	8008388 <__libc_init_array+0x24>
 8008374:	4d0b      	ldr	r5, [pc, #44]	; (80083a4 <__libc_init_array+0x40>)
 8008376:	4c0c      	ldr	r4, [pc, #48]	; (80083a8 <__libc_init_array+0x44>)
 8008378:	f002 fc90 	bl	800ac9c <_init>
 800837c:	1b64      	subs	r4, r4, r5
 800837e:	10a4      	asrs	r4, r4, #2
 8008380:	2600      	movs	r6, #0
 8008382:	42a6      	cmp	r6, r4
 8008384:	d105      	bne.n	8008392 <__libc_init_array+0x2e>
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	f855 3b04 	ldr.w	r3, [r5], #4
 800838c:	4798      	blx	r3
 800838e:	3601      	adds	r6, #1
 8008390:	e7ee      	b.n	8008370 <__libc_init_array+0xc>
 8008392:	f855 3b04 	ldr.w	r3, [r5], #4
 8008396:	4798      	blx	r3
 8008398:	3601      	adds	r6, #1
 800839a:	e7f2      	b.n	8008382 <__libc_init_array+0x1e>
 800839c:	0800b17c 	.word	0x0800b17c
 80083a0:	0800b17c 	.word	0x0800b17c
 80083a4:	0800b17c 	.word	0x0800b17c
 80083a8:	0800b180 	.word	0x0800b180

080083ac <__retarget_lock_init_recursive>:
 80083ac:	4770      	bx	lr

080083ae <__retarget_lock_acquire_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <__retarget_lock_release_recursive>:
 80083b0:	4770      	bx	lr

080083b2 <memcpy>:
 80083b2:	440a      	add	r2, r1
 80083b4:	4291      	cmp	r1, r2
 80083b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ba:	d100      	bne.n	80083be <memcpy+0xc>
 80083bc:	4770      	bx	lr
 80083be:	b510      	push	{r4, lr}
 80083c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c8:	4291      	cmp	r1, r2
 80083ca:	d1f9      	bne.n	80083c0 <memcpy+0xe>
 80083cc:	bd10      	pop	{r4, pc}

080083ce <memset>:
 80083ce:	4402      	add	r2, r0
 80083d0:	4603      	mov	r3, r0
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d100      	bne.n	80083d8 <memset+0xa>
 80083d6:	4770      	bx	lr
 80083d8:	f803 1b01 	strb.w	r1, [r3], #1
 80083dc:	e7f9      	b.n	80083d2 <memset+0x4>
	...

080083e0 <sbrk_aligned>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4e0e      	ldr	r6, [pc, #56]	; (800841c <sbrk_aligned+0x3c>)
 80083e4:	460c      	mov	r4, r1
 80083e6:	6831      	ldr	r1, [r6, #0]
 80083e8:	4605      	mov	r5, r0
 80083ea:	b911      	cbnz	r1, 80083f2 <sbrk_aligned+0x12>
 80083ec:	f000 fdc6 	bl	8008f7c <_sbrk_r>
 80083f0:	6030      	str	r0, [r6, #0]
 80083f2:	4621      	mov	r1, r4
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 fdc1 	bl	8008f7c <_sbrk_r>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	d00a      	beq.n	8008414 <sbrk_aligned+0x34>
 80083fe:	1cc4      	adds	r4, r0, #3
 8008400:	f024 0403 	bic.w	r4, r4, #3
 8008404:	42a0      	cmp	r0, r4
 8008406:	d007      	beq.n	8008418 <sbrk_aligned+0x38>
 8008408:	1a21      	subs	r1, r4, r0
 800840a:	4628      	mov	r0, r5
 800840c:	f000 fdb6 	bl	8008f7c <_sbrk_r>
 8008410:	3001      	adds	r0, #1
 8008412:	d101      	bne.n	8008418 <sbrk_aligned+0x38>
 8008414:	f04f 34ff 	mov.w	r4, #4294967295
 8008418:	4620      	mov	r0, r4
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	20005484 	.word	0x20005484

08008420 <_malloc_r>:
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	1ccd      	adds	r5, r1, #3
 8008426:	f025 0503 	bic.w	r5, r5, #3
 800842a:	3508      	adds	r5, #8
 800842c:	2d0c      	cmp	r5, #12
 800842e:	bf38      	it	cc
 8008430:	250c      	movcc	r5, #12
 8008432:	2d00      	cmp	r5, #0
 8008434:	4607      	mov	r7, r0
 8008436:	db01      	blt.n	800843c <_malloc_r+0x1c>
 8008438:	42a9      	cmp	r1, r5
 800843a:	d905      	bls.n	8008448 <_malloc_r+0x28>
 800843c:	230c      	movs	r3, #12
 800843e:	603b      	str	r3, [r7, #0]
 8008440:	2600      	movs	r6, #0
 8008442:	4630      	mov	r0, r6
 8008444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008448:	4e2e      	ldr	r6, [pc, #184]	; (8008504 <_malloc_r+0xe4>)
 800844a:	f001 fe0d 	bl	800a068 <__malloc_lock>
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	461c      	mov	r4, r3
 8008452:	bb34      	cbnz	r4, 80084a2 <_malloc_r+0x82>
 8008454:	4629      	mov	r1, r5
 8008456:	4638      	mov	r0, r7
 8008458:	f7ff ffc2 	bl	80083e0 <sbrk_aligned>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	4604      	mov	r4, r0
 8008460:	d14d      	bne.n	80084fe <_malloc_r+0xde>
 8008462:	6834      	ldr	r4, [r6, #0]
 8008464:	4626      	mov	r6, r4
 8008466:	2e00      	cmp	r6, #0
 8008468:	d140      	bne.n	80084ec <_malloc_r+0xcc>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	4631      	mov	r1, r6
 800846e:	4638      	mov	r0, r7
 8008470:	eb04 0803 	add.w	r8, r4, r3
 8008474:	f000 fd82 	bl	8008f7c <_sbrk_r>
 8008478:	4580      	cmp	r8, r0
 800847a:	d13a      	bne.n	80084f2 <_malloc_r+0xd2>
 800847c:	6821      	ldr	r1, [r4, #0]
 800847e:	3503      	adds	r5, #3
 8008480:	1a6d      	subs	r5, r5, r1
 8008482:	f025 0503 	bic.w	r5, r5, #3
 8008486:	3508      	adds	r5, #8
 8008488:	2d0c      	cmp	r5, #12
 800848a:	bf38      	it	cc
 800848c:	250c      	movcc	r5, #12
 800848e:	4629      	mov	r1, r5
 8008490:	4638      	mov	r0, r7
 8008492:	f7ff ffa5 	bl	80083e0 <sbrk_aligned>
 8008496:	3001      	adds	r0, #1
 8008498:	d02b      	beq.n	80084f2 <_malloc_r+0xd2>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	442b      	add	r3, r5
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	e00e      	b.n	80084c0 <_malloc_r+0xa0>
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	1b52      	subs	r2, r2, r5
 80084a6:	d41e      	bmi.n	80084e6 <_malloc_r+0xc6>
 80084a8:	2a0b      	cmp	r2, #11
 80084aa:	d916      	bls.n	80084da <_malloc_r+0xba>
 80084ac:	1961      	adds	r1, r4, r5
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	6025      	str	r5, [r4, #0]
 80084b2:	bf18      	it	ne
 80084b4:	6059      	strne	r1, [r3, #4]
 80084b6:	6863      	ldr	r3, [r4, #4]
 80084b8:	bf08      	it	eq
 80084ba:	6031      	streq	r1, [r6, #0]
 80084bc:	5162      	str	r2, [r4, r5]
 80084be:	604b      	str	r3, [r1, #4]
 80084c0:	4638      	mov	r0, r7
 80084c2:	f104 060b 	add.w	r6, r4, #11
 80084c6:	f001 fdd5 	bl	800a074 <__malloc_unlock>
 80084ca:	f026 0607 	bic.w	r6, r6, #7
 80084ce:	1d23      	adds	r3, r4, #4
 80084d0:	1af2      	subs	r2, r6, r3
 80084d2:	d0b6      	beq.n	8008442 <_malloc_r+0x22>
 80084d4:	1b9b      	subs	r3, r3, r6
 80084d6:	50a3      	str	r3, [r4, r2]
 80084d8:	e7b3      	b.n	8008442 <_malloc_r+0x22>
 80084da:	6862      	ldr	r2, [r4, #4]
 80084dc:	42a3      	cmp	r3, r4
 80084de:	bf0c      	ite	eq
 80084e0:	6032      	streq	r2, [r6, #0]
 80084e2:	605a      	strne	r2, [r3, #4]
 80084e4:	e7ec      	b.n	80084c0 <_malloc_r+0xa0>
 80084e6:	4623      	mov	r3, r4
 80084e8:	6864      	ldr	r4, [r4, #4]
 80084ea:	e7b2      	b.n	8008452 <_malloc_r+0x32>
 80084ec:	4634      	mov	r4, r6
 80084ee:	6876      	ldr	r6, [r6, #4]
 80084f0:	e7b9      	b.n	8008466 <_malloc_r+0x46>
 80084f2:	230c      	movs	r3, #12
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	4638      	mov	r0, r7
 80084f8:	f001 fdbc 	bl	800a074 <__malloc_unlock>
 80084fc:	e7a1      	b.n	8008442 <_malloc_r+0x22>
 80084fe:	6025      	str	r5, [r4, #0]
 8008500:	e7de      	b.n	80084c0 <_malloc_r+0xa0>
 8008502:	bf00      	nop
 8008504:	20005480 	.word	0x20005480

08008508 <__cvt>:
 8008508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850a:	ed2d 8b02 	vpush	{d8}
 800850e:	eeb0 8b40 	vmov.f64	d8, d0
 8008512:	b085      	sub	sp, #20
 8008514:	4617      	mov	r7, r2
 8008516:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008518:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800851a:	ee18 2a90 	vmov	r2, s17
 800851e:	f025 0520 	bic.w	r5, r5, #32
 8008522:	2a00      	cmp	r2, #0
 8008524:	bfb6      	itet	lt
 8008526:	222d      	movlt	r2, #45	; 0x2d
 8008528:	2200      	movge	r2, #0
 800852a:	eeb1 8b40 	vneglt.f64	d8, d0
 800852e:	2d46      	cmp	r5, #70	; 0x46
 8008530:	460c      	mov	r4, r1
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	d004      	beq.n	8008540 <__cvt+0x38>
 8008536:	2d45      	cmp	r5, #69	; 0x45
 8008538:	d100      	bne.n	800853c <__cvt+0x34>
 800853a:	3401      	adds	r4, #1
 800853c:	2102      	movs	r1, #2
 800853e:	e000      	b.n	8008542 <__cvt+0x3a>
 8008540:	2103      	movs	r1, #3
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	ab02      	add	r3, sp, #8
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4622      	mov	r2, r4
 800854c:	4633      	mov	r3, r6
 800854e:	eeb0 0b48 	vmov.f64	d0, d8
 8008552:	f000 fed5 	bl	8009300 <_dtoa_r>
 8008556:	2d47      	cmp	r5, #71	; 0x47
 8008558:	d101      	bne.n	800855e <__cvt+0x56>
 800855a:	07fb      	lsls	r3, r7, #31
 800855c:	d51a      	bpl.n	8008594 <__cvt+0x8c>
 800855e:	2d46      	cmp	r5, #70	; 0x46
 8008560:	eb00 0204 	add.w	r2, r0, r4
 8008564:	d10c      	bne.n	8008580 <__cvt+0x78>
 8008566:	7803      	ldrb	r3, [r0, #0]
 8008568:	2b30      	cmp	r3, #48	; 0x30
 800856a:	d107      	bne.n	800857c <__cvt+0x74>
 800856c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008574:	bf1c      	itt	ne
 8008576:	f1c4 0401 	rsbne	r4, r4, #1
 800857a:	6034      	strne	r4, [r6, #0]
 800857c:	6833      	ldr	r3, [r6, #0]
 800857e:	441a      	add	r2, r3
 8008580:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	bf08      	it	eq
 800858a:	9203      	streq	r2, [sp, #12]
 800858c:	2130      	movs	r1, #48	; 0x30
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	4293      	cmp	r3, r2
 8008592:	d307      	bcc.n	80085a4 <__cvt+0x9c>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008598:	1a1b      	subs	r3, r3, r0
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	b005      	add	sp, #20
 800859e:	ecbd 8b02 	vpop	{d8}
 80085a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a4:	1c5c      	adds	r4, r3, #1
 80085a6:	9403      	str	r4, [sp, #12]
 80085a8:	7019      	strb	r1, [r3, #0]
 80085aa:	e7f0      	b.n	800858e <__cvt+0x86>

080085ac <__exponent>:
 80085ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ae:	4603      	mov	r3, r0
 80085b0:	2900      	cmp	r1, #0
 80085b2:	bfb8      	it	lt
 80085b4:	4249      	neglt	r1, r1
 80085b6:	f803 2b02 	strb.w	r2, [r3], #2
 80085ba:	bfb4      	ite	lt
 80085bc:	222d      	movlt	r2, #45	; 0x2d
 80085be:	222b      	movge	r2, #43	; 0x2b
 80085c0:	2909      	cmp	r1, #9
 80085c2:	7042      	strb	r2, [r0, #1]
 80085c4:	dd2a      	ble.n	800861c <__exponent+0x70>
 80085c6:	f10d 0407 	add.w	r4, sp, #7
 80085ca:	46a4      	mov	ip, r4
 80085cc:	270a      	movs	r7, #10
 80085ce:	46a6      	mov	lr, r4
 80085d0:	460a      	mov	r2, r1
 80085d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80085d6:	fb07 1516 	mls	r5, r7, r6, r1
 80085da:	3530      	adds	r5, #48	; 0x30
 80085dc:	2a63      	cmp	r2, #99	; 0x63
 80085de:	f104 34ff 	add.w	r4, r4, #4294967295
 80085e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085e6:	4631      	mov	r1, r6
 80085e8:	dcf1      	bgt.n	80085ce <__exponent+0x22>
 80085ea:	3130      	adds	r1, #48	; 0x30
 80085ec:	f1ae 0502 	sub.w	r5, lr, #2
 80085f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085f4:	1c44      	adds	r4, r0, #1
 80085f6:	4629      	mov	r1, r5
 80085f8:	4561      	cmp	r1, ip
 80085fa:	d30a      	bcc.n	8008612 <__exponent+0x66>
 80085fc:	f10d 0209 	add.w	r2, sp, #9
 8008600:	eba2 020e 	sub.w	r2, r2, lr
 8008604:	4565      	cmp	r5, ip
 8008606:	bf88      	it	hi
 8008608:	2200      	movhi	r2, #0
 800860a:	4413      	add	r3, r2
 800860c:	1a18      	subs	r0, r3, r0
 800860e:	b003      	add	sp, #12
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800861a:	e7ed      	b.n	80085f8 <__exponent+0x4c>
 800861c:	2330      	movs	r3, #48	; 0x30
 800861e:	3130      	adds	r1, #48	; 0x30
 8008620:	7083      	strb	r3, [r0, #2]
 8008622:	70c1      	strb	r1, [r0, #3]
 8008624:	1d03      	adds	r3, r0, #4
 8008626:	e7f1      	b.n	800860c <__exponent+0x60>

08008628 <_printf_float>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b08b      	sub	sp, #44	; 0x2c
 800862e:	460c      	mov	r4, r1
 8008630:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008634:	4616      	mov	r6, r2
 8008636:	461f      	mov	r7, r3
 8008638:	4605      	mov	r5, r0
 800863a:	f001 fc91 	bl	8009f60 <_localeconv_r>
 800863e:	f8d0 b000 	ldr.w	fp, [r0]
 8008642:	4658      	mov	r0, fp
 8008644:	f7f7 fdfc 	bl	8000240 <strlen>
 8008648:	2300      	movs	r3, #0
 800864a:	9308      	str	r3, [sp, #32]
 800864c:	f8d8 3000 	ldr.w	r3, [r8]
 8008650:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	3307      	adds	r3, #7
 8008658:	f023 0307 	bic.w	r3, r3, #7
 800865c:	f103 0108 	add.w	r1, r3, #8
 8008660:	f8c8 1000 	str.w	r1, [r8]
 8008664:	4682      	mov	sl, r0
 8008666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800866a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800866e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80088d0 <_printf_float+0x2a8>
 8008672:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008676:	eeb0 6bc0 	vabs.f64	d6, d0
 800867a:	eeb4 6b47 	vcmp.f64	d6, d7
 800867e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008682:	dd24      	ble.n	80086ce <_printf_float+0xa6>
 8008684:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	d502      	bpl.n	8008694 <_printf_float+0x6c>
 800868e:	232d      	movs	r3, #45	; 0x2d
 8008690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008694:	4b90      	ldr	r3, [pc, #576]	; (80088d8 <_printf_float+0x2b0>)
 8008696:	4891      	ldr	r0, [pc, #580]	; (80088dc <_printf_float+0x2b4>)
 8008698:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800869c:	bf94      	ite	ls
 800869e:	4698      	movls	r8, r3
 80086a0:	4680      	movhi	r8, r0
 80086a2:	2303      	movs	r3, #3
 80086a4:	6123      	str	r3, [r4, #16]
 80086a6:	f022 0204 	bic.w	r2, r2, #4
 80086aa:	2300      	movs	r3, #0
 80086ac:	6022      	str	r2, [r4, #0]
 80086ae:	9304      	str	r3, [sp, #16]
 80086b0:	9700      	str	r7, [sp, #0]
 80086b2:	4633      	mov	r3, r6
 80086b4:	aa09      	add	r2, sp, #36	; 0x24
 80086b6:	4621      	mov	r1, r4
 80086b8:	4628      	mov	r0, r5
 80086ba:	f000 f9d3 	bl	8008a64 <_printf_common>
 80086be:	3001      	adds	r0, #1
 80086c0:	f040 808a 	bne.w	80087d8 <_printf_float+0x1b0>
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	b00b      	add	sp, #44	; 0x2c
 80086ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80086d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d6:	d709      	bvc.n	80086ec <_printf_float+0xc4>
 80086d8:	ee10 3a90 	vmov	r3, s1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfbc      	itt	lt
 80086e0:	232d      	movlt	r3, #45	; 0x2d
 80086e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086e6:	487e      	ldr	r0, [pc, #504]	; (80088e0 <_printf_float+0x2b8>)
 80086e8:	4b7e      	ldr	r3, [pc, #504]	; (80088e4 <_printf_float+0x2bc>)
 80086ea:	e7d5      	b.n	8008698 <_printf_float+0x70>
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80086f2:	9104      	str	r1, [sp, #16]
 80086f4:	1c59      	adds	r1, r3, #1
 80086f6:	d13c      	bne.n	8008772 <_printf_float+0x14a>
 80086f8:	2306      	movs	r3, #6
 80086fa:	6063      	str	r3, [r4, #4]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	ab08      	add	r3, sp, #32
 8008702:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008706:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800870a:	ab07      	add	r3, sp, #28
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	6022      	str	r2, [r4, #0]
 8008712:	f10d 031b 	add.w	r3, sp, #27
 8008716:	4628      	mov	r0, r5
 8008718:	f7ff fef6 	bl	8008508 <__cvt>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	9907      	ldr	r1, [sp, #28]
 8008720:	2b47      	cmp	r3, #71	; 0x47
 8008722:	4680      	mov	r8, r0
 8008724:	d108      	bne.n	8008738 <_printf_float+0x110>
 8008726:	1cc8      	adds	r0, r1, #3
 8008728:	db02      	blt.n	8008730 <_printf_float+0x108>
 800872a:	6863      	ldr	r3, [r4, #4]
 800872c:	4299      	cmp	r1, r3
 800872e:	dd41      	ble.n	80087b4 <_printf_float+0x18c>
 8008730:	f1a9 0902 	sub.w	r9, r9, #2
 8008734:	fa5f f989 	uxtb.w	r9, r9
 8008738:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800873c:	d820      	bhi.n	8008780 <_printf_float+0x158>
 800873e:	3901      	subs	r1, #1
 8008740:	464a      	mov	r2, r9
 8008742:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008746:	9107      	str	r1, [sp, #28]
 8008748:	f7ff ff30 	bl	80085ac <__exponent>
 800874c:	9a08      	ldr	r2, [sp, #32]
 800874e:	9004      	str	r0, [sp, #16]
 8008750:	1813      	adds	r3, r2, r0
 8008752:	2a01      	cmp	r2, #1
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	dc02      	bgt.n	800875e <_printf_float+0x136>
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	07d2      	lsls	r2, r2, #31
 800875c:	d501      	bpl.n	8008762 <_printf_float+0x13a>
 800875e:	3301      	adds	r3, #1
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0a2      	beq.n	80086b0 <_printf_float+0x88>
 800876a:	232d      	movs	r3, #45	; 0x2d
 800876c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008770:	e79e      	b.n	80086b0 <_printf_float+0x88>
 8008772:	9904      	ldr	r1, [sp, #16]
 8008774:	2947      	cmp	r1, #71	; 0x47
 8008776:	d1c1      	bne.n	80086fc <_printf_float+0xd4>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1bf      	bne.n	80086fc <_printf_float+0xd4>
 800877c:	2301      	movs	r3, #1
 800877e:	e7bc      	b.n	80086fa <_printf_float+0xd2>
 8008780:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008784:	d118      	bne.n	80087b8 <_printf_float+0x190>
 8008786:	2900      	cmp	r1, #0
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	dd0b      	ble.n	80087a4 <_printf_float+0x17c>
 800878c:	6121      	str	r1, [r4, #16]
 800878e:	b913      	cbnz	r3, 8008796 <_printf_float+0x16e>
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	07d0      	lsls	r0, r2, #31
 8008794:	d502      	bpl.n	800879c <_printf_float+0x174>
 8008796:	3301      	adds	r3, #1
 8008798:	440b      	add	r3, r1
 800879a:	6123      	str	r3, [r4, #16]
 800879c:	2300      	movs	r3, #0
 800879e:	65a1      	str	r1, [r4, #88]	; 0x58
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	e7de      	b.n	8008762 <_printf_float+0x13a>
 80087a4:	b913      	cbnz	r3, 80087ac <_printf_float+0x184>
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	07d2      	lsls	r2, r2, #31
 80087aa:	d501      	bpl.n	80087b0 <_printf_float+0x188>
 80087ac:	3302      	adds	r3, #2
 80087ae:	e7f4      	b.n	800879a <_printf_float+0x172>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e7f2      	b.n	800879a <_printf_float+0x172>
 80087b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	4299      	cmp	r1, r3
 80087bc:	db05      	blt.n	80087ca <_printf_float+0x1a2>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6121      	str	r1, [r4, #16]
 80087c2:	07d8      	lsls	r0, r3, #31
 80087c4:	d5ea      	bpl.n	800879c <_printf_float+0x174>
 80087c6:	1c4b      	adds	r3, r1, #1
 80087c8:	e7e7      	b.n	800879a <_printf_float+0x172>
 80087ca:	2900      	cmp	r1, #0
 80087cc:	bfd4      	ite	le
 80087ce:	f1c1 0202 	rsble	r2, r1, #2
 80087d2:	2201      	movgt	r2, #1
 80087d4:	4413      	add	r3, r2
 80087d6:	e7e0      	b.n	800879a <_printf_float+0x172>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	055a      	lsls	r2, r3, #21
 80087dc:	d407      	bmi.n	80087ee <_printf_float+0x1c6>
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	4642      	mov	r2, r8
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	d12a      	bne.n	8008842 <_printf_float+0x21a>
 80087ec:	e76a      	b.n	80086c4 <_printf_float+0x9c>
 80087ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087f2:	f240 80e2 	bls.w	80089ba <_printf_float+0x392>
 80087f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80087fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	d133      	bne.n	800886c <_printf_float+0x244>
 8008804:	4a38      	ldr	r2, [pc, #224]	; (80088e8 <_printf_float+0x2c0>)
 8008806:	2301      	movs	r3, #1
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	47b8      	blx	r7
 800880e:	3001      	adds	r0, #1
 8008810:	f43f af58 	beq.w	80086c4 <_printf_float+0x9c>
 8008814:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008818:	429a      	cmp	r2, r3
 800881a:	db02      	blt.n	8008822 <_printf_float+0x1fa>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	07d8      	lsls	r0, r3, #31
 8008820:	d50f      	bpl.n	8008842 <_printf_float+0x21a>
 8008822:	4653      	mov	r3, sl
 8008824:	465a      	mov	r2, fp
 8008826:	4631      	mov	r1, r6
 8008828:	4628      	mov	r0, r5
 800882a:	47b8      	blx	r7
 800882c:	3001      	adds	r0, #1
 800882e:	f43f af49 	beq.w	80086c4 <_printf_float+0x9c>
 8008832:	f04f 0800 	mov.w	r8, #0
 8008836:	f104 091a 	add.w	r9, r4, #26
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	3b01      	subs	r3, #1
 800883e:	4543      	cmp	r3, r8
 8008840:	dc09      	bgt.n	8008856 <_printf_float+0x22e>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	079b      	lsls	r3, r3, #30
 8008846:	f100 8108 	bmi.w	8008a5a <_printf_float+0x432>
 800884a:	68e0      	ldr	r0, [r4, #12]
 800884c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884e:	4298      	cmp	r0, r3
 8008850:	bfb8      	it	lt
 8008852:	4618      	movlt	r0, r3
 8008854:	e738      	b.n	80086c8 <_printf_float+0xa0>
 8008856:	2301      	movs	r3, #1
 8008858:	464a      	mov	r2, r9
 800885a:	4631      	mov	r1, r6
 800885c:	4628      	mov	r0, r5
 800885e:	47b8      	blx	r7
 8008860:	3001      	adds	r0, #1
 8008862:	f43f af2f 	beq.w	80086c4 <_printf_float+0x9c>
 8008866:	f108 0801 	add.w	r8, r8, #1
 800886a:	e7e6      	b.n	800883a <_printf_float+0x212>
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dc3c      	bgt.n	80088ec <_printf_float+0x2c4>
 8008872:	4a1d      	ldr	r2, [pc, #116]	; (80088e8 <_printf_float+0x2c0>)
 8008874:	2301      	movs	r3, #1
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	f43f af21 	beq.w	80086c4 <_printf_float+0x9c>
 8008882:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008886:	4313      	orrs	r3, r2
 8008888:	d102      	bne.n	8008890 <_printf_float+0x268>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	07d9      	lsls	r1, r3, #31
 800888e:	d5d8      	bpl.n	8008842 <_printf_float+0x21a>
 8008890:	4653      	mov	r3, sl
 8008892:	465a      	mov	r2, fp
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f af12 	beq.w	80086c4 <_printf_float+0x9c>
 80088a0:	f04f 0900 	mov.w	r9, #0
 80088a4:	f104 0a1a 	add.w	sl, r4, #26
 80088a8:	9b07      	ldr	r3, [sp, #28]
 80088aa:	425b      	negs	r3, r3
 80088ac:	454b      	cmp	r3, r9
 80088ae:	dc01      	bgt.n	80088b4 <_printf_float+0x28c>
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	e795      	b.n	80087e0 <_printf_float+0x1b8>
 80088b4:	2301      	movs	r3, #1
 80088b6:	4652      	mov	r2, sl
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af00 	beq.w	80086c4 <_printf_float+0x9c>
 80088c4:	f109 0901 	add.w	r9, r9, #1
 80088c8:	e7ee      	b.n	80088a8 <_printf_float+0x280>
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w
 80088d0:	ffffffff 	.word	0xffffffff
 80088d4:	7fefffff 	.word	0x7fefffff
 80088d8:	0800adfc 	.word	0x0800adfc
 80088dc:	0800ae00 	.word	0x0800ae00
 80088e0:	0800ae08 	.word	0x0800ae08
 80088e4:	0800ae04 	.word	0x0800ae04
 80088e8:	0800ae0c 	.word	0x0800ae0c
 80088ec:	9a08      	ldr	r2, [sp, #32]
 80088ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088f0:	429a      	cmp	r2, r3
 80088f2:	bfa8      	it	ge
 80088f4:	461a      	movge	r2, r3
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	4691      	mov	r9, r2
 80088fa:	dc38      	bgt.n	800896e <_printf_float+0x346>
 80088fc:	2300      	movs	r3, #0
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008904:	f104 021a 	add.w	r2, r4, #26
 8008908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890a:	9905      	ldr	r1, [sp, #20]
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	eba3 0309 	sub.w	r3, r3, r9
 8008912:	428b      	cmp	r3, r1
 8008914:	dc33      	bgt.n	800897e <_printf_float+0x356>
 8008916:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800891a:	429a      	cmp	r2, r3
 800891c:	db3c      	blt.n	8008998 <_printf_float+0x370>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	07da      	lsls	r2, r3, #31
 8008922:	d439      	bmi.n	8008998 <_printf_float+0x370>
 8008924:	9b08      	ldr	r3, [sp, #32]
 8008926:	9a04      	ldr	r2, [sp, #16]
 8008928:	9907      	ldr	r1, [sp, #28]
 800892a:	1a9a      	subs	r2, r3, r2
 800892c:	eba3 0901 	sub.w	r9, r3, r1
 8008930:	4591      	cmp	r9, r2
 8008932:	bfa8      	it	ge
 8008934:	4691      	movge	r9, r2
 8008936:	f1b9 0f00 	cmp.w	r9, #0
 800893a:	dc35      	bgt.n	80089a8 <_printf_float+0x380>
 800893c:	f04f 0800 	mov.w	r8, #0
 8008940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008944:	f104 0a1a 	add.w	sl, r4, #26
 8008948:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	eba3 0309 	sub.w	r3, r3, r9
 8008952:	4543      	cmp	r3, r8
 8008954:	f77f af75 	ble.w	8008842 <_printf_float+0x21a>
 8008958:	2301      	movs	r3, #1
 800895a:	4652      	mov	r2, sl
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f aeae 	beq.w	80086c4 <_printf_float+0x9c>
 8008968:	f108 0801 	add.w	r8, r8, #1
 800896c:	e7ec      	b.n	8008948 <_printf_float+0x320>
 800896e:	4613      	mov	r3, r2
 8008970:	4631      	mov	r1, r6
 8008972:	4642      	mov	r2, r8
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	d1bf      	bne.n	80088fc <_printf_float+0x2d4>
 800897c:	e6a2      	b.n	80086c4 <_printf_float+0x9c>
 800897e:	2301      	movs	r3, #1
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	9204      	str	r2, [sp, #16]
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f ae9b 	beq.w	80086c4 <_printf_float+0x9c>
 800898e:	9b05      	ldr	r3, [sp, #20]
 8008990:	9a04      	ldr	r2, [sp, #16]
 8008992:	3301      	adds	r3, #1
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	e7b7      	b.n	8008908 <_printf_float+0x2e0>
 8008998:	4653      	mov	r3, sl
 800899a:	465a      	mov	r2, fp
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	d1be      	bne.n	8008924 <_printf_float+0x2fc>
 80089a6:	e68d      	b.n	80086c4 <_printf_float+0x9c>
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	464b      	mov	r3, r9
 80089ac:	4442      	add	r2, r8
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	d1c1      	bne.n	800893c <_printf_float+0x314>
 80089b8:	e684      	b.n	80086c4 <_printf_float+0x9c>
 80089ba:	9a08      	ldr	r2, [sp, #32]
 80089bc:	2a01      	cmp	r2, #1
 80089be:	dc01      	bgt.n	80089c4 <_printf_float+0x39c>
 80089c0:	07db      	lsls	r3, r3, #31
 80089c2:	d537      	bpl.n	8008a34 <_printf_float+0x40c>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4642      	mov	r2, r8
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f ae78 	beq.w	80086c4 <_printf_float+0x9c>
 80089d4:	4653      	mov	r3, sl
 80089d6:	465a      	mov	r2, fp
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f ae70 	beq.w	80086c4 <_printf_float+0x9c>
 80089e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80089e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f0:	d01b      	beq.n	8008a2a <_printf_float+0x402>
 80089f2:	9b08      	ldr	r3, [sp, #32]
 80089f4:	f108 0201 	add.w	r2, r8, #1
 80089f8:	3b01      	subs	r3, #1
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	d10e      	bne.n	8008a22 <_printf_float+0x3fa>
 8008a04:	e65e      	b.n	80086c4 <_printf_float+0x9c>
 8008a06:	2301      	movs	r3, #1
 8008a08:	464a      	mov	r2, r9
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	f43f ae57 	beq.w	80086c4 <_printf_float+0x9c>
 8008a16:	f108 0801 	add.w	r8, r8, #1
 8008a1a:	9b08      	ldr	r3, [sp, #32]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	4543      	cmp	r3, r8
 8008a20:	dcf1      	bgt.n	8008a06 <_printf_float+0x3de>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a28:	e6db      	b.n	80087e2 <_printf_float+0x1ba>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	f104 091a 	add.w	r9, r4, #26
 8008a32:	e7f2      	b.n	8008a1a <_printf_float+0x3f2>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4642      	mov	r2, r8
 8008a38:	e7df      	b.n	80089fa <_printf_float+0x3d2>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	464a      	mov	r2, r9
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	f43f ae3d 	beq.w	80086c4 <_printf_float+0x9c>
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a52:	1a5b      	subs	r3, r3, r1
 8008a54:	4543      	cmp	r3, r8
 8008a56:	dcf0      	bgt.n	8008a3a <_printf_float+0x412>
 8008a58:	e6f7      	b.n	800884a <_printf_float+0x222>
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	f104 0919 	add.w	r9, r4, #25
 8008a62:	e7f4      	b.n	8008a4e <_printf_float+0x426>

08008a64 <_printf_common>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	4616      	mov	r6, r2
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	688a      	ldr	r2, [r1, #8]
 8008a6e:	690b      	ldr	r3, [r1, #16]
 8008a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	bfb8      	it	lt
 8008a78:	4613      	movlt	r3, r2
 8008a7a:	6033      	str	r3, [r6, #0]
 8008a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a80:	4607      	mov	r7, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	b10a      	cbz	r2, 8008a8a <_printf_common+0x26>
 8008a86:	3301      	adds	r3, #1
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	0699      	lsls	r1, r3, #26
 8008a8e:	bf42      	ittt	mi
 8008a90:	6833      	ldrmi	r3, [r6, #0]
 8008a92:	3302      	addmi	r3, #2
 8008a94:	6033      	strmi	r3, [r6, #0]
 8008a96:	6825      	ldr	r5, [r4, #0]
 8008a98:	f015 0506 	ands.w	r5, r5, #6
 8008a9c:	d106      	bne.n	8008aac <_printf_common+0x48>
 8008a9e:	f104 0a19 	add.w	sl, r4, #25
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	6832      	ldr	r2, [r6, #0]
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	42ab      	cmp	r3, r5
 8008aaa:	dc26      	bgt.n	8008afa <_printf_common+0x96>
 8008aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab0:	1e13      	subs	r3, r2, #0
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	bf18      	it	ne
 8008ab6:	2301      	movne	r3, #1
 8008ab8:	0692      	lsls	r2, r2, #26
 8008aba:	d42b      	bmi.n	8008b14 <_printf_common+0xb0>
 8008abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	47c0      	blx	r8
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d01e      	beq.n	8008b08 <_printf_common+0xa4>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	68e5      	ldr	r5, [r4, #12]
 8008ace:	6832      	ldr	r2, [r6, #0]
 8008ad0:	f003 0306 	and.w	r3, r3, #6
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	bf08      	it	eq
 8008ad8:	1aad      	subeq	r5, r5, r2
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	6922      	ldr	r2, [r4, #16]
 8008ade:	bf0c      	ite	eq
 8008ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae4:	2500      	movne	r5, #0
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bfc4      	itt	gt
 8008aea:	1a9b      	subgt	r3, r3, r2
 8008aec:	18ed      	addgt	r5, r5, r3
 8008aee:	2600      	movs	r6, #0
 8008af0:	341a      	adds	r4, #26
 8008af2:	42b5      	cmp	r5, r6
 8008af4:	d11a      	bne.n	8008b2c <_printf_common+0xc8>
 8008af6:	2000      	movs	r0, #0
 8008af8:	e008      	b.n	8008b0c <_printf_common+0xa8>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	4649      	mov	r1, r9
 8008b00:	4638      	mov	r0, r7
 8008b02:	47c0      	blx	r8
 8008b04:	3001      	adds	r0, #1
 8008b06:	d103      	bne.n	8008b10 <_printf_common+0xac>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	3501      	adds	r5, #1
 8008b12:	e7c6      	b.n	8008aa2 <_printf_common+0x3e>
 8008b14:	18e1      	adds	r1, r4, r3
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	2030      	movs	r0, #48	; 0x30
 8008b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b1e:	4422      	add	r2, r4
 8008b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b28:	3302      	adds	r3, #2
 8008b2a:	e7c7      	b.n	8008abc <_printf_common+0x58>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4649      	mov	r1, r9
 8008b32:	4638      	mov	r0, r7
 8008b34:	47c0      	blx	r8
 8008b36:	3001      	adds	r0, #1
 8008b38:	d0e6      	beq.n	8008b08 <_printf_common+0xa4>
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7d9      	b.n	8008af2 <_printf_common+0x8e>
	...

08008b40 <_printf_i>:
 8008b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	7e0f      	ldrb	r7, [r1, #24]
 8008b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b48:	2f78      	cmp	r7, #120	; 0x78
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	469a      	mov	sl, r3
 8008b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b56:	d807      	bhi.n	8008b68 <_printf_i+0x28>
 8008b58:	2f62      	cmp	r7, #98	; 0x62
 8008b5a:	d80a      	bhi.n	8008b72 <_printf_i+0x32>
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	f000 80d8 	beq.w	8008d12 <_printf_i+0x1d2>
 8008b62:	2f58      	cmp	r7, #88	; 0x58
 8008b64:	f000 80a3 	beq.w	8008cae <_printf_i+0x16e>
 8008b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b70:	e03a      	b.n	8008be8 <_printf_i+0xa8>
 8008b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b76:	2b15      	cmp	r3, #21
 8008b78:	d8f6      	bhi.n	8008b68 <_printf_i+0x28>
 8008b7a:	a101      	add	r1, pc, #4	; (adr r1, 8008b80 <_printf_i+0x40>)
 8008b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008b69 	.word	0x08008b69
 8008b8c:	08008b69 	.word	0x08008b69
 8008b90:	08008b69 	.word	0x08008b69
 8008b94:	08008b69 	.word	0x08008b69
 8008b98:	08008bed 	.word	0x08008bed
 8008b9c:	08008b69 	.word	0x08008b69
 8008ba0:	08008b69 	.word	0x08008b69
 8008ba4:	08008b69 	.word	0x08008b69
 8008ba8:	08008b69 	.word	0x08008b69
 8008bac:	08008cf9 	.word	0x08008cf9
 8008bb0:	08008c1d 	.word	0x08008c1d
 8008bb4:	08008cdb 	.word	0x08008cdb
 8008bb8:	08008b69 	.word	0x08008b69
 8008bbc:	08008b69 	.word	0x08008b69
 8008bc0:	08008d1b 	.word	0x08008d1b
 8008bc4:	08008b69 	.word	0x08008b69
 8008bc8:	08008c1d 	.word	0x08008c1d
 8008bcc:	08008b69 	.word	0x08008b69
 8008bd0:	08008b69 	.word	0x08008b69
 8008bd4:	08008ce3 	.word	0x08008ce3
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	1d1a      	adds	r2, r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	602a      	str	r2, [r5, #0]
 8008be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be8:	2301      	movs	r3, #1
 8008bea:	e0a3      	b.n	8008d34 <_printf_i+0x1f4>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	6829      	ldr	r1, [r5, #0]
 8008bf0:	0606      	lsls	r6, r0, #24
 8008bf2:	f101 0304 	add.w	r3, r1, #4
 8008bf6:	d50a      	bpl.n	8008c0e <_printf_i+0xce>
 8008bf8:	680e      	ldr	r6, [r1, #0]
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	2e00      	cmp	r6, #0
 8008bfe:	da03      	bge.n	8008c08 <_printf_i+0xc8>
 8008c00:	232d      	movs	r3, #45	; 0x2d
 8008c02:	4276      	negs	r6, r6
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c08:	485e      	ldr	r0, [pc, #376]	; (8008d84 <_printf_i+0x244>)
 8008c0a:	230a      	movs	r3, #10
 8008c0c:	e019      	b.n	8008c42 <_printf_i+0x102>
 8008c0e:	680e      	ldr	r6, [r1, #0]
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c16:	bf18      	it	ne
 8008c18:	b236      	sxthne	r6, r6
 8008c1a:	e7ef      	b.n	8008bfc <_printf_i+0xbc>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	1d19      	adds	r1, r3, #4
 8008c22:	6029      	str	r1, [r5, #0]
 8008c24:	0601      	lsls	r1, r0, #24
 8008c26:	d501      	bpl.n	8008c2c <_printf_i+0xec>
 8008c28:	681e      	ldr	r6, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <_printf_i+0xf2>
 8008c2c:	0646      	lsls	r6, r0, #25
 8008c2e:	d5fb      	bpl.n	8008c28 <_printf_i+0xe8>
 8008c30:	881e      	ldrh	r6, [r3, #0]
 8008c32:	4854      	ldr	r0, [pc, #336]	; (8008d84 <_printf_i+0x244>)
 8008c34:	2f6f      	cmp	r7, #111	; 0x6f
 8008c36:	bf0c      	ite	eq
 8008c38:	2308      	moveq	r3, #8
 8008c3a:	230a      	movne	r3, #10
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c42:	6865      	ldr	r5, [r4, #4]
 8008c44:	60a5      	str	r5, [r4, #8]
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	bfa2      	ittt	ge
 8008c4a:	6821      	ldrge	r1, [r4, #0]
 8008c4c:	f021 0104 	bicge.w	r1, r1, #4
 8008c50:	6021      	strge	r1, [r4, #0]
 8008c52:	b90e      	cbnz	r6, 8008c58 <_printf_i+0x118>
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	d04d      	beq.n	8008cf4 <_printf_i+0x1b4>
 8008c58:	4615      	mov	r5, r2
 8008c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c62:	5dc7      	ldrb	r7, [r0, r7]
 8008c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c68:	4637      	mov	r7, r6
 8008c6a:	42bb      	cmp	r3, r7
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	d9f4      	bls.n	8008c5a <_printf_i+0x11a>
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d10b      	bne.n	8008c8c <_printf_i+0x14c>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	07de      	lsls	r6, r3, #31
 8008c78:	d508      	bpl.n	8008c8c <_printf_i+0x14c>
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6861      	ldr	r1, [r4, #4]
 8008c7e:	4299      	cmp	r1, r3
 8008c80:	bfde      	ittt	le
 8008c82:	2330      	movle	r3, #48	; 0x30
 8008c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c8c:	1b52      	subs	r2, r2, r5
 8008c8e:	6122      	str	r2, [r4, #16]
 8008c90:	f8cd a000 	str.w	sl, [sp]
 8008c94:	464b      	mov	r3, r9
 8008c96:	aa03      	add	r2, sp, #12
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	f7ff fee2 	bl	8008a64 <_printf_common>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d14c      	bne.n	8008d3e <_printf_i+0x1fe>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b004      	add	sp, #16
 8008caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cae:	4835      	ldr	r0, [pc, #212]	; (8008d84 <_printf_i+0x244>)
 8008cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cb4:	6829      	ldr	r1, [r5, #0]
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cbc:	6029      	str	r1, [r5, #0]
 8008cbe:	061d      	lsls	r5, r3, #24
 8008cc0:	d514      	bpl.n	8008cec <_printf_i+0x1ac>
 8008cc2:	07df      	lsls	r7, r3, #31
 8008cc4:	bf44      	itt	mi
 8008cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cca:	6023      	strmi	r3, [r4, #0]
 8008ccc:	b91e      	cbnz	r6, 8008cd6 <_printf_i+0x196>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f023 0320 	bic.w	r3, r3, #32
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	2310      	movs	r3, #16
 8008cd8:	e7b0      	b.n	8008c3c <_printf_i+0xfc>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	2378      	movs	r3, #120	; 0x78
 8008ce4:	4828      	ldr	r0, [pc, #160]	; (8008d88 <_printf_i+0x248>)
 8008ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cea:	e7e3      	b.n	8008cb4 <_printf_i+0x174>
 8008cec:	0659      	lsls	r1, r3, #25
 8008cee:	bf48      	it	mi
 8008cf0:	b2b6      	uxthmi	r6, r6
 8008cf2:	e7e6      	b.n	8008cc2 <_printf_i+0x182>
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	e7bb      	b.n	8008c70 <_printf_i+0x130>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	6826      	ldr	r6, [r4, #0]
 8008cfc:	6961      	ldr	r1, [r4, #20]
 8008cfe:	1d18      	adds	r0, r3, #4
 8008d00:	6028      	str	r0, [r5, #0]
 8008d02:	0635      	lsls	r5, r6, #24
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0x1cc>
 8008d08:	6019      	str	r1, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <_printf_i+0x1d2>
 8008d0c:	0670      	lsls	r0, r6, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0x1c8>
 8008d10:	8019      	strh	r1, [r3, #0]
 8008d12:	2300      	movs	r3, #0
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	4615      	mov	r5, r2
 8008d18:	e7ba      	b.n	8008c90 <_printf_i+0x150>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7f7 fa92 	bl	8000250 <memchr>
 8008d2c:	b108      	cbz	r0, 8008d32 <_printf_i+0x1f2>
 8008d2e:	1b40      	subs	r0, r0, r5
 8008d30:	6060      	str	r0, [r4, #4]
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	2300      	movs	r3, #0
 8008d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3c:	e7a8      	b.n	8008c90 <_printf_i+0x150>
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4649      	mov	r1, r9
 8008d44:	4640      	mov	r0, r8
 8008d46:	47d0      	blx	sl
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d0ab      	beq.n	8008ca4 <_printf_i+0x164>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	079b      	lsls	r3, r3, #30
 8008d50:	d413      	bmi.n	8008d7a <_printf_i+0x23a>
 8008d52:	68e0      	ldr	r0, [r4, #12]
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	4298      	cmp	r0, r3
 8008d58:	bfb8      	it	lt
 8008d5a:	4618      	movlt	r0, r3
 8008d5c:	e7a4      	b.n	8008ca8 <_printf_i+0x168>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4632      	mov	r2, r6
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d09b      	beq.n	8008ca4 <_printf_i+0x164>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	9903      	ldr	r1, [sp, #12]
 8008d72:	1a5b      	subs	r3, r3, r1
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dcf2      	bgt.n	8008d5e <_printf_i+0x21e>
 8008d78:	e7eb      	b.n	8008d52 <_printf_i+0x212>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	f104 0619 	add.w	r6, r4, #25
 8008d80:	e7f5      	b.n	8008d6e <_printf_i+0x22e>
 8008d82:	bf00      	nop
 8008d84:	0800ae0e 	.word	0x0800ae0e
 8008d88:	0800ae1f 	.word	0x0800ae1f

08008d8c <iprintf>:
 8008d8c:	b40f      	push	{r0, r1, r2, r3}
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <iprintf+0x2c>)
 8008d90:	b513      	push	{r0, r1, r4, lr}
 8008d92:	681c      	ldr	r4, [r3, #0]
 8008d94:	b124      	cbz	r4, 8008da0 <iprintf+0x14>
 8008d96:	69a3      	ldr	r3, [r4, #24]
 8008d98:	b913      	cbnz	r3, 8008da0 <iprintf+0x14>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7ff fa44 	bl	8008228 <__sinit>
 8008da0:	ab05      	add	r3, sp, #20
 8008da2:	9a04      	ldr	r2, [sp, #16]
 8008da4:	68a1      	ldr	r1, [r4, #8]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	4620      	mov	r0, r4
 8008daa:	f001 fd79 	bl	800a8a0 <_vfiprintf_r>
 8008dae:	b002      	add	sp, #8
 8008db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db4:	b004      	add	sp, #16
 8008db6:	4770      	bx	lr
 8008db8:	20000010 	.word	0x20000010

08008dbc <_puts_r>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	460e      	mov	r6, r1
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	b118      	cbz	r0, 8008dcc <_puts_r+0x10>
 8008dc4:	6983      	ldr	r3, [r0, #24]
 8008dc6:	b90b      	cbnz	r3, 8008dcc <_puts_r+0x10>
 8008dc8:	f7ff fa2e 	bl	8008228 <__sinit>
 8008dcc:	69ab      	ldr	r3, [r5, #24]
 8008dce:	68ac      	ldr	r4, [r5, #8]
 8008dd0:	b913      	cbnz	r3, 8008dd8 <_puts_r+0x1c>
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f7ff fa28 	bl	8008228 <__sinit>
 8008dd8:	4b2c      	ldr	r3, [pc, #176]	; (8008e8c <_puts_r+0xd0>)
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	d120      	bne.n	8008e20 <_puts_r+0x64>
 8008dde:	686c      	ldr	r4, [r5, #4]
 8008de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008de2:	07db      	lsls	r3, r3, #31
 8008de4:	d405      	bmi.n	8008df2 <_puts_r+0x36>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	0598      	lsls	r0, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_puts_r+0x36>
 8008dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dee:	f7ff fade 	bl	80083ae <__retarget_lock_acquire_recursive>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	0719      	lsls	r1, r3, #28
 8008df6:	d51d      	bpl.n	8008e34 <_puts_r+0x78>
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	b1db      	cbz	r3, 8008e34 <_puts_r+0x78>
 8008dfc:	3e01      	subs	r6, #1
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e04:	3b01      	subs	r3, #1
 8008e06:	60a3      	str	r3, [r4, #8]
 8008e08:	bb39      	cbnz	r1, 8008e5a <_puts_r+0x9e>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da38      	bge.n	8008e80 <_puts_r+0xc4>
 8008e0e:	4622      	mov	r2, r4
 8008e10:	210a      	movs	r1, #10
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 f906 	bl	8009024 <__swbuf_r>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d011      	beq.n	8008e40 <_puts_r+0x84>
 8008e1c:	250a      	movs	r5, #10
 8008e1e:	e011      	b.n	8008e44 <_puts_r+0x88>
 8008e20:	4b1b      	ldr	r3, [pc, #108]	; (8008e90 <_puts_r+0xd4>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d101      	bne.n	8008e2a <_puts_r+0x6e>
 8008e26:	68ac      	ldr	r4, [r5, #8]
 8008e28:	e7da      	b.n	8008de0 <_puts_r+0x24>
 8008e2a:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <_puts_r+0xd8>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	bf08      	it	eq
 8008e30:	68ec      	ldreq	r4, [r5, #12]
 8008e32:	e7d5      	b.n	8008de0 <_puts_r+0x24>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f958 	bl	80090ec <__swsetup_r>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d0dd      	beq.n	8008dfc <_puts_r+0x40>
 8008e40:	f04f 35ff 	mov.w	r5, #4294967295
 8008e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e46:	07da      	lsls	r2, r3, #31
 8008e48:	d405      	bmi.n	8008e56 <_puts_r+0x9a>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	059b      	lsls	r3, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_puts_r+0x9a>
 8008e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e52:	f7ff faad 	bl	80083b0 <__retarget_lock_release_recursive>
 8008e56:	4628      	mov	r0, r5
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da04      	bge.n	8008e68 <_puts_r+0xac>
 8008e5e:	69a2      	ldr	r2, [r4, #24]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	dc06      	bgt.n	8008e72 <_puts_r+0xb6>
 8008e64:	290a      	cmp	r1, #10
 8008e66:	d004      	beq.n	8008e72 <_puts_r+0xb6>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	7019      	strb	r1, [r3, #0]
 8008e70:	e7c5      	b.n	8008dfe <_puts_r+0x42>
 8008e72:	4622      	mov	r2, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f000 f8d5 	bl	8009024 <__swbuf_r>
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d1bf      	bne.n	8008dfe <_puts_r+0x42>
 8008e7e:	e7df      	b.n	8008e40 <_puts_r+0x84>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	250a      	movs	r5, #10
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	6022      	str	r2, [r4, #0]
 8008e88:	701d      	strb	r5, [r3, #0]
 8008e8a:	e7db      	b.n	8008e44 <_puts_r+0x88>
 8008e8c:	0800adb8 	.word	0x0800adb8
 8008e90:	0800add8 	.word	0x0800add8
 8008e94:	0800ad98 	.word	0x0800ad98

08008e98 <puts>:
 8008e98:	4b02      	ldr	r3, [pc, #8]	; (8008ea4 <puts+0xc>)
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	f7ff bf8d 	b.w	8008dbc <_puts_r>
 8008ea2:	bf00      	nop
 8008ea4:	20000010 	.word	0x20000010

08008ea8 <cleanup_glue>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	460c      	mov	r4, r1
 8008eac:	6809      	ldr	r1, [r1, #0]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	b109      	cbz	r1, 8008eb6 <cleanup_glue+0xe>
 8008eb2:	f7ff fff9 	bl	8008ea8 <cleanup_glue>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4628      	mov	r0, r5
 8008eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ebe:	f001 bc79 	b.w	800a7b4 <_free_r>
	...

08008ec4 <_reclaim_reent>:
 8008ec4:	4b2c      	ldr	r3, [pc, #176]	; (8008f78 <_reclaim_reent+0xb4>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4283      	cmp	r3, r0
 8008eca:	b570      	push	{r4, r5, r6, lr}
 8008ecc:	4604      	mov	r4, r0
 8008ece:	d051      	beq.n	8008f74 <_reclaim_reent+0xb0>
 8008ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ed2:	b143      	cbz	r3, 8008ee6 <_reclaim_reent+0x22>
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d14a      	bne.n	8008f70 <_reclaim_reent+0xac>
 8008eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008edc:	6819      	ldr	r1, [r3, #0]
 8008ede:	b111      	cbz	r1, 8008ee6 <_reclaim_reent+0x22>
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f001 fc67 	bl	800a7b4 <_free_r>
 8008ee6:	6961      	ldr	r1, [r4, #20]
 8008ee8:	b111      	cbz	r1, 8008ef0 <_reclaim_reent+0x2c>
 8008eea:	4620      	mov	r0, r4
 8008eec:	f001 fc62 	bl	800a7b4 <_free_r>
 8008ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ef2:	b111      	cbz	r1, 8008efa <_reclaim_reent+0x36>
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f001 fc5d 	bl	800a7b4 <_free_r>
 8008efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008efc:	b111      	cbz	r1, 8008f04 <_reclaim_reent+0x40>
 8008efe:	4620      	mov	r0, r4
 8008f00:	f001 fc58 	bl	800a7b4 <_free_r>
 8008f04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f06:	b111      	cbz	r1, 8008f0e <_reclaim_reent+0x4a>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f001 fc53 	bl	800a7b4 <_free_r>
 8008f0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f10:	b111      	cbz	r1, 8008f18 <_reclaim_reent+0x54>
 8008f12:	4620      	mov	r0, r4
 8008f14:	f001 fc4e 	bl	800a7b4 <_free_r>
 8008f18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f1a:	b111      	cbz	r1, 8008f22 <_reclaim_reent+0x5e>
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f001 fc49 	bl	800a7b4 <_free_r>
 8008f22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f24:	b111      	cbz	r1, 8008f2c <_reclaim_reent+0x68>
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 fc44 	bl	800a7b4 <_free_r>
 8008f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f2e:	b111      	cbz	r1, 8008f36 <_reclaim_reent+0x72>
 8008f30:	4620      	mov	r0, r4
 8008f32:	f001 fc3f 	bl	800a7b4 <_free_r>
 8008f36:	69a3      	ldr	r3, [r4, #24]
 8008f38:	b1e3      	cbz	r3, 8008f74 <_reclaim_reent+0xb0>
 8008f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4798      	blx	r3
 8008f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f42:	b1b9      	cbz	r1, 8008f74 <_reclaim_reent+0xb0>
 8008f44:	4620      	mov	r0, r4
 8008f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f4a:	f7ff bfad 	b.w	8008ea8 <cleanup_glue>
 8008f4e:	5949      	ldr	r1, [r1, r5]
 8008f50:	b941      	cbnz	r1, 8008f64 <_reclaim_reent+0xa0>
 8008f52:	3504      	adds	r5, #4
 8008f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f56:	2d80      	cmp	r5, #128	; 0x80
 8008f58:	68d9      	ldr	r1, [r3, #12]
 8008f5a:	d1f8      	bne.n	8008f4e <_reclaim_reent+0x8a>
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f001 fc29 	bl	800a7b4 <_free_r>
 8008f62:	e7ba      	b.n	8008eda <_reclaim_reent+0x16>
 8008f64:	680e      	ldr	r6, [r1, #0]
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 fc24 	bl	800a7b4 <_free_r>
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	e7ef      	b.n	8008f50 <_reclaim_reent+0x8c>
 8008f70:	2500      	movs	r5, #0
 8008f72:	e7ef      	b.n	8008f54 <_reclaim_reent+0x90>
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	bf00      	nop
 8008f78:	20000010 	.word	0x20000010

08008f7c <_sbrk_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d06      	ldr	r5, [pc, #24]	; (8008f98 <_sbrk_r+0x1c>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	4604      	mov	r4, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	602b      	str	r3, [r5, #0]
 8008f88:	f7f8 fad8 	bl	800153c <_sbrk>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_sbrk_r+0x1a>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_sbrk_r+0x1a>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20005488 	.word	0x20005488

08008f9c <__sread>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa4:	f001 fdac 	bl	800ab00 <_read_r>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	bfab      	itete	ge
 8008fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fae:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb0:	181b      	addge	r3, r3, r0
 8008fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fb6:	bfac      	ite	ge
 8008fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fba:	81a3      	strhlt	r3, [r4, #12]
 8008fbc:	bd10      	pop	{r4, pc}

08008fbe <__swrite>:
 8008fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	898b      	ldrh	r3, [r1, #12]
 8008fc6:	05db      	lsls	r3, r3, #23
 8008fc8:	4605      	mov	r5, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	4616      	mov	r6, r2
 8008fce:	d505      	bpl.n	8008fdc <__swrite+0x1e>
 8008fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f000 ffc6 	bl	8009f68 <_lseek_r>
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	4632      	mov	r2, r6
 8008fea:	463b      	mov	r3, r7
 8008fec:	4628      	mov	r0, r5
 8008fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff2:	f000 b869 	b.w	80090c8 <_write_r>

08008ff6 <__sseek>:
 8008ff6:	b510      	push	{r4, lr}
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ffe:	f000 ffb3 	bl	8009f68 <_lseek_r>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	bf15      	itete	ne
 8009008:	6560      	strne	r0, [r4, #84]	; 0x54
 800900a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800900e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009012:	81a3      	strheq	r3, [r4, #12]
 8009014:	bf18      	it	ne
 8009016:	81a3      	strhne	r3, [r4, #12]
 8009018:	bd10      	pop	{r4, pc}

0800901a <__sclose>:
 800901a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901e:	f000 b8d3 	b.w	80091c8 <_close_r>
	...

08009024 <__swbuf_r>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	460e      	mov	r6, r1
 8009028:	4614      	mov	r4, r2
 800902a:	4605      	mov	r5, r0
 800902c:	b118      	cbz	r0, 8009036 <__swbuf_r+0x12>
 800902e:	6983      	ldr	r3, [r0, #24]
 8009030:	b90b      	cbnz	r3, 8009036 <__swbuf_r+0x12>
 8009032:	f7ff f8f9 	bl	8008228 <__sinit>
 8009036:	4b21      	ldr	r3, [pc, #132]	; (80090bc <__swbuf_r+0x98>)
 8009038:	429c      	cmp	r4, r3
 800903a:	d12b      	bne.n	8009094 <__swbuf_r+0x70>
 800903c:	686c      	ldr	r4, [r5, #4]
 800903e:	69a3      	ldr	r3, [r4, #24]
 8009040:	60a3      	str	r3, [r4, #8]
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	071a      	lsls	r2, r3, #28
 8009046:	d52f      	bpl.n	80090a8 <__swbuf_r+0x84>
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	b36b      	cbz	r3, 80090a8 <__swbuf_r+0x84>
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	1ac0      	subs	r0, r0, r3
 8009052:	6963      	ldr	r3, [r4, #20]
 8009054:	b2f6      	uxtb	r6, r6
 8009056:	4283      	cmp	r3, r0
 8009058:	4637      	mov	r7, r6
 800905a:	dc04      	bgt.n	8009066 <__swbuf_r+0x42>
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 ff42 	bl	8009ee8 <_fflush_r>
 8009064:	bb30      	cbnz	r0, 80090b4 <__swbuf_r+0x90>
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	3b01      	subs	r3, #1
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	701e      	strb	r6, [r3, #0]
 8009074:	6963      	ldr	r3, [r4, #20]
 8009076:	3001      	adds	r0, #1
 8009078:	4283      	cmp	r3, r0
 800907a:	d004      	beq.n	8009086 <__swbuf_r+0x62>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	07db      	lsls	r3, r3, #31
 8009080:	d506      	bpl.n	8009090 <__swbuf_r+0x6c>
 8009082:	2e0a      	cmp	r6, #10
 8009084:	d104      	bne.n	8009090 <__swbuf_r+0x6c>
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f000 ff2d 	bl	8009ee8 <_fflush_r>
 800908e:	b988      	cbnz	r0, 80090b4 <__swbuf_r+0x90>
 8009090:	4638      	mov	r0, r7
 8009092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009094:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <__swbuf_r+0x9c>)
 8009096:	429c      	cmp	r4, r3
 8009098:	d101      	bne.n	800909e <__swbuf_r+0x7a>
 800909a:	68ac      	ldr	r4, [r5, #8]
 800909c:	e7cf      	b.n	800903e <__swbuf_r+0x1a>
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <__swbuf_r+0xa0>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	bf08      	it	eq
 80090a4:	68ec      	ldreq	r4, [r5, #12]
 80090a6:	e7ca      	b.n	800903e <__swbuf_r+0x1a>
 80090a8:	4621      	mov	r1, r4
 80090aa:	4628      	mov	r0, r5
 80090ac:	f000 f81e 	bl	80090ec <__swsetup_r>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d0cb      	beq.n	800904c <__swbuf_r+0x28>
 80090b4:	f04f 37ff 	mov.w	r7, #4294967295
 80090b8:	e7ea      	b.n	8009090 <__swbuf_r+0x6c>
 80090ba:	bf00      	nop
 80090bc:	0800adb8 	.word	0x0800adb8
 80090c0:	0800add8 	.word	0x0800add8
 80090c4:	0800ad98 	.word	0x0800ad98

080090c8 <_write_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	; (80090e8 <_write_r+0x20>)
 80090cc:	4604      	mov	r4, r0
 80090ce:	4608      	mov	r0, r1
 80090d0:	4611      	mov	r1, r2
 80090d2:	2200      	movs	r2, #0
 80090d4:	602a      	str	r2, [r5, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f7f8 f9df 	bl	800149a <_write>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_write_r+0x1e>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_write_r+0x1e>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20005488 	.word	0x20005488

080090ec <__swsetup_r>:
 80090ec:	4b32      	ldr	r3, [pc, #200]	; (80091b8 <__swsetup_r+0xcc>)
 80090ee:	b570      	push	{r4, r5, r6, lr}
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	4606      	mov	r6, r0
 80090f4:	460c      	mov	r4, r1
 80090f6:	b125      	cbz	r5, 8009102 <__swsetup_r+0x16>
 80090f8:	69ab      	ldr	r3, [r5, #24]
 80090fa:	b913      	cbnz	r3, 8009102 <__swsetup_r+0x16>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff f893 	bl	8008228 <__sinit>
 8009102:	4b2e      	ldr	r3, [pc, #184]	; (80091bc <__swsetup_r+0xd0>)
 8009104:	429c      	cmp	r4, r3
 8009106:	d10f      	bne.n	8009128 <__swsetup_r+0x3c>
 8009108:	686c      	ldr	r4, [r5, #4]
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009110:	0719      	lsls	r1, r3, #28
 8009112:	d42c      	bmi.n	800916e <__swsetup_r+0x82>
 8009114:	06dd      	lsls	r5, r3, #27
 8009116:	d411      	bmi.n	800913c <__swsetup_r+0x50>
 8009118:	2309      	movs	r3, #9
 800911a:	6033      	str	r3, [r6, #0]
 800911c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	e03e      	b.n	80091a6 <__swsetup_r+0xba>
 8009128:	4b25      	ldr	r3, [pc, #148]	; (80091c0 <__swsetup_r+0xd4>)
 800912a:	429c      	cmp	r4, r3
 800912c:	d101      	bne.n	8009132 <__swsetup_r+0x46>
 800912e:	68ac      	ldr	r4, [r5, #8]
 8009130:	e7eb      	b.n	800910a <__swsetup_r+0x1e>
 8009132:	4b24      	ldr	r3, [pc, #144]	; (80091c4 <__swsetup_r+0xd8>)
 8009134:	429c      	cmp	r4, r3
 8009136:	bf08      	it	eq
 8009138:	68ec      	ldreq	r4, [r5, #12]
 800913a:	e7e6      	b.n	800910a <__swsetup_r+0x1e>
 800913c:	0758      	lsls	r0, r3, #29
 800913e:	d512      	bpl.n	8009166 <__swsetup_r+0x7a>
 8009140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009142:	b141      	cbz	r1, 8009156 <__swsetup_r+0x6a>
 8009144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009148:	4299      	cmp	r1, r3
 800914a:	d002      	beq.n	8009152 <__swsetup_r+0x66>
 800914c:	4630      	mov	r0, r6
 800914e:	f001 fb31 	bl	800a7b4 <_free_r>
 8009152:	2300      	movs	r3, #0
 8009154:	6363      	str	r3, [r4, #52]	; 0x34
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	2300      	movs	r3, #0
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f043 0308 	orr.w	r3, r3, #8
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	b94b      	cbnz	r3, 8009186 <__swsetup_r+0x9a>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800917c:	d003      	beq.n	8009186 <__swsetup_r+0x9a>
 800917e:	4621      	mov	r1, r4
 8009180:	4630      	mov	r0, r6
 8009182:	f000 ff29 	bl	8009fd8 <__smakebuf_r>
 8009186:	89a0      	ldrh	r0, [r4, #12]
 8009188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800918c:	f010 0301 	ands.w	r3, r0, #1
 8009190:	d00a      	beq.n	80091a8 <__swsetup_r+0xbc>
 8009192:	2300      	movs	r3, #0
 8009194:	60a3      	str	r3, [r4, #8]
 8009196:	6963      	ldr	r3, [r4, #20]
 8009198:	425b      	negs	r3, r3
 800919a:	61a3      	str	r3, [r4, #24]
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	b943      	cbnz	r3, 80091b2 <__swsetup_r+0xc6>
 80091a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091a4:	d1ba      	bne.n	800911c <__swsetup_r+0x30>
 80091a6:	bd70      	pop	{r4, r5, r6, pc}
 80091a8:	0781      	lsls	r1, r0, #30
 80091aa:	bf58      	it	pl
 80091ac:	6963      	ldrpl	r3, [r4, #20]
 80091ae:	60a3      	str	r3, [r4, #8]
 80091b0:	e7f4      	b.n	800919c <__swsetup_r+0xb0>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e7f7      	b.n	80091a6 <__swsetup_r+0xba>
 80091b6:	bf00      	nop
 80091b8:	20000010 	.word	0x20000010
 80091bc:	0800adb8 	.word	0x0800adb8
 80091c0:	0800add8 	.word	0x0800add8
 80091c4:	0800ad98 	.word	0x0800ad98

080091c8 <_close_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	4d06      	ldr	r5, [pc, #24]	; (80091e4 <_close_r+0x1c>)
 80091cc:	2300      	movs	r3, #0
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	602b      	str	r3, [r5, #0]
 80091d4:	f7f8 f97d 	bl	80014d2 <_close>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_close_r+0x1a>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_close_r+0x1a>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20005488 	.word	0x20005488

080091e8 <quorem>:
 80091e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	6903      	ldr	r3, [r0, #16]
 80091ee:	690c      	ldr	r4, [r1, #16]
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	4607      	mov	r7, r0
 80091f4:	f2c0 8081 	blt.w	80092fa <quorem+0x112>
 80091f8:	3c01      	subs	r4, #1
 80091fa:	f101 0814 	add.w	r8, r1, #20
 80091fe:	f100 0514 	add.w	r5, r0, #20
 8009202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800920c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009210:	3301      	adds	r3, #1
 8009212:	429a      	cmp	r2, r3
 8009214:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009218:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800921c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009220:	d331      	bcc.n	8009286 <quorem+0x9e>
 8009222:	f04f 0e00 	mov.w	lr, #0
 8009226:	4640      	mov	r0, r8
 8009228:	46ac      	mov	ip, r5
 800922a:	46f2      	mov	sl, lr
 800922c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009230:	b293      	uxth	r3, r2
 8009232:	fb06 e303 	mla	r3, r6, r3, lr
 8009236:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800923a:	b29b      	uxth	r3, r3
 800923c:	ebaa 0303 	sub.w	r3, sl, r3
 8009240:	f8dc a000 	ldr.w	sl, [ip]
 8009244:	0c12      	lsrs	r2, r2, #16
 8009246:	fa13 f38a 	uxtah	r3, r3, sl
 800924a:	fb06 e202 	mla	r2, r6, r2, lr
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	9b00      	ldr	r3, [sp, #0]
 8009252:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009256:	b292      	uxth	r2, r2
 8009258:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800925c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009260:	f8bd 3000 	ldrh.w	r3, [sp]
 8009264:	4581      	cmp	r9, r0
 8009266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800926a:	f84c 3b04 	str.w	r3, [ip], #4
 800926e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009272:	d2db      	bcs.n	800922c <quorem+0x44>
 8009274:	f855 300b 	ldr.w	r3, [r5, fp]
 8009278:	b92b      	cbnz	r3, 8009286 <quorem+0x9e>
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	3b04      	subs	r3, #4
 800927e:	429d      	cmp	r5, r3
 8009280:	461a      	mov	r2, r3
 8009282:	d32e      	bcc.n	80092e2 <quorem+0xfa>
 8009284:	613c      	str	r4, [r7, #16]
 8009286:	4638      	mov	r0, r7
 8009288:	f001 f97c 	bl	800a584 <__mcmp>
 800928c:	2800      	cmp	r0, #0
 800928e:	db24      	blt.n	80092da <quorem+0xf2>
 8009290:	3601      	adds	r6, #1
 8009292:	4628      	mov	r0, r5
 8009294:	f04f 0c00 	mov.w	ip, #0
 8009298:	f858 2b04 	ldr.w	r2, [r8], #4
 800929c:	f8d0 e000 	ldr.w	lr, [r0]
 80092a0:	b293      	uxth	r3, r2
 80092a2:	ebac 0303 	sub.w	r3, ip, r3
 80092a6:	0c12      	lsrs	r2, r2, #16
 80092a8:	fa13 f38e 	uxtah	r3, r3, lr
 80092ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ba:	45c1      	cmp	r9, r8
 80092bc:	f840 3b04 	str.w	r3, [r0], #4
 80092c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092c4:	d2e8      	bcs.n	8009298 <quorem+0xb0>
 80092c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ce:	b922      	cbnz	r2, 80092da <quorem+0xf2>
 80092d0:	3b04      	subs	r3, #4
 80092d2:	429d      	cmp	r5, r3
 80092d4:	461a      	mov	r2, r3
 80092d6:	d30a      	bcc.n	80092ee <quorem+0x106>
 80092d8:	613c      	str	r4, [r7, #16]
 80092da:	4630      	mov	r0, r6
 80092dc:	b003      	add	sp, #12
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	6812      	ldr	r2, [r2, #0]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	d1cc      	bne.n	8009284 <quorem+0x9c>
 80092ea:	3c01      	subs	r4, #1
 80092ec:	e7c7      	b.n	800927e <quorem+0x96>
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	3b04      	subs	r3, #4
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1f0      	bne.n	80092d8 <quorem+0xf0>
 80092f6:	3c01      	subs	r4, #1
 80092f8:	e7eb      	b.n	80092d2 <quorem+0xea>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e7ee      	b.n	80092dc <quorem+0xf4>
	...

08009300 <_dtoa_r>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	ed2d 8b02 	vpush	{d8}
 8009308:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800930a:	b091      	sub	sp, #68	; 0x44
 800930c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009310:	ec59 8b10 	vmov	r8, r9, d0
 8009314:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009316:	9106      	str	r1, [sp, #24]
 8009318:	4606      	mov	r6, r0
 800931a:	9208      	str	r2, [sp, #32]
 800931c:	930c      	str	r3, [sp, #48]	; 0x30
 800931e:	b975      	cbnz	r5, 800933e <_dtoa_r+0x3e>
 8009320:	2010      	movs	r0, #16
 8009322:	f000 fe99 	bl	800a058 <malloc>
 8009326:	4602      	mov	r2, r0
 8009328:	6270      	str	r0, [r6, #36]	; 0x24
 800932a:	b920      	cbnz	r0, 8009336 <_dtoa_r+0x36>
 800932c:	4baa      	ldr	r3, [pc, #680]	; (80095d8 <_dtoa_r+0x2d8>)
 800932e:	21ea      	movs	r1, #234	; 0xea
 8009330:	48aa      	ldr	r0, [pc, #680]	; (80095dc <_dtoa_r+0x2dc>)
 8009332:	f001 fbf7 	bl	800ab24 <__assert_func>
 8009336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800933a:	6005      	str	r5, [r0, #0]
 800933c:	60c5      	str	r5, [r0, #12]
 800933e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009340:	6819      	ldr	r1, [r3, #0]
 8009342:	b151      	cbz	r1, 800935a <_dtoa_r+0x5a>
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	604a      	str	r2, [r1, #4]
 8009348:	2301      	movs	r3, #1
 800934a:	4093      	lsls	r3, r2
 800934c:	608b      	str	r3, [r1, #8]
 800934e:	4630      	mov	r0, r6
 8009350:	f000 fed6 	bl	800a100 <_Bfree>
 8009354:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f1b9 0300 	subs.w	r3, r9, #0
 800935e:	bfbb      	ittet	lt
 8009360:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009364:	9303      	strlt	r3, [sp, #12]
 8009366:	2300      	movge	r3, #0
 8009368:	2201      	movlt	r2, #1
 800936a:	bfac      	ite	ge
 800936c:	6023      	strge	r3, [r4, #0]
 800936e:	6022      	strlt	r2, [r4, #0]
 8009370:	4b9b      	ldr	r3, [pc, #620]	; (80095e0 <_dtoa_r+0x2e0>)
 8009372:	9c03      	ldr	r4, [sp, #12]
 8009374:	43a3      	bics	r3, r4
 8009376:	d11c      	bne.n	80093b2 <_dtoa_r+0xb2>
 8009378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800937a:	f242 730f 	movw	r3, #9999	; 0x270f
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009384:	ea53 0308 	orrs.w	r3, r3, r8
 8009388:	f000 84fd 	beq.w	8009d86 <_dtoa_r+0xa86>
 800938c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800938e:	b963      	cbnz	r3, 80093aa <_dtoa_r+0xaa>
 8009390:	4b94      	ldr	r3, [pc, #592]	; (80095e4 <_dtoa_r+0x2e4>)
 8009392:	e01f      	b.n	80093d4 <_dtoa_r+0xd4>
 8009394:	4b94      	ldr	r3, [pc, #592]	; (80095e8 <_dtoa_r+0x2e8>)
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	3308      	adds	r3, #8
 800939a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	9801      	ldr	r0, [sp, #4]
 80093a0:	b011      	add	sp, #68	; 0x44
 80093a2:	ecbd 8b02 	vpop	{d8}
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	4b8e      	ldr	r3, [pc, #568]	; (80095e4 <_dtoa_r+0x2e4>)
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	3303      	adds	r3, #3
 80093b0:	e7f3      	b.n	800939a <_dtoa_r+0x9a>
 80093b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80093b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093be:	d10b      	bne.n	80093d8 <_dtoa_r+0xd8>
 80093c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093c2:	2301      	movs	r3, #1
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 84d9 	beq.w	8009d80 <_dtoa_r+0xa80>
 80093ce:	4887      	ldr	r0, [pc, #540]	; (80095ec <_dtoa_r+0x2ec>)
 80093d0:	6018      	str	r0, [r3, #0]
 80093d2:	1e43      	subs	r3, r0, #1
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	e7e2      	b.n	800939e <_dtoa_r+0x9e>
 80093d8:	a90f      	add	r1, sp, #60	; 0x3c
 80093da:	aa0e      	add	r2, sp, #56	; 0x38
 80093dc:	4630      	mov	r0, r6
 80093de:	eeb0 0b48 	vmov.f64	d0, d8
 80093e2:	f001 f975 	bl	800a6d0 <__d2b>
 80093e6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80093ea:	4605      	mov	r5, r0
 80093ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d046      	beq.n	8009480 <_dtoa_r+0x180>
 80093f2:	ee18 4a90 	vmov	r4, s17
 80093f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80093fa:	ec53 2b18 	vmov	r2, r3, d8
 80093fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009406:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800940a:	2400      	movs	r4, #0
 800940c:	ec43 2b16 	vmov	d6, r2, r3
 8009410:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009414:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80095c0 <_dtoa_r+0x2c0>
 8009418:	ee36 7b47 	vsub.f64	d7, d6, d7
 800941c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80095c8 <_dtoa_r+0x2c8>
 8009420:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009424:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80095d0 <_dtoa_r+0x2d0>
 8009428:	ee07 1a90 	vmov	s15, r1
 800942c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009430:	eeb0 7b46 	vmov.f64	d7, d6
 8009434:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009438:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800943c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009444:	ee16 ba90 	vmov	fp, s13
 8009448:	940a      	str	r4, [sp, #40]	; 0x28
 800944a:	d508      	bpl.n	800945e <_dtoa_r+0x15e>
 800944c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009450:	eeb4 6b47 	vcmp.f64	d6, d7
 8009454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009458:	bf18      	it	ne
 800945a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800945e:	f1bb 0f16 	cmp.w	fp, #22
 8009462:	d82f      	bhi.n	80094c4 <_dtoa_r+0x1c4>
 8009464:	4b62      	ldr	r3, [pc, #392]	; (80095f0 <_dtoa_r+0x2f0>)
 8009466:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800946a:	ed93 7b00 	vldr	d7, [r3]
 800946e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	d501      	bpl.n	800947c <_dtoa_r+0x17c>
 8009478:	f10b 3bff 	add.w	fp, fp, #4294967295
 800947c:	2300      	movs	r3, #0
 800947e:	e022      	b.n	80094c6 <_dtoa_r+0x1c6>
 8009480:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009482:	4401      	add	r1, r0
 8009484:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009488:	2b20      	cmp	r3, #32
 800948a:	bfc1      	itttt	gt
 800948c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009490:	fa04 f303 	lslgt.w	r3, r4, r3
 8009494:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009498:	fa28 f804 	lsrgt.w	r8, r8, r4
 800949c:	bfd6      	itet	le
 800949e:	f1c3 0320 	rsble	r3, r3, #32
 80094a2:	ea43 0808 	orrgt.w	r8, r3, r8
 80094a6:	fa08 f803 	lslle.w	r8, r8, r3
 80094aa:	ee07 8a90 	vmov	s15, r8
 80094ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80094b2:	3901      	subs	r1, #1
 80094b4:	ee17 4a90 	vmov	r4, s15
 80094b8:	ec53 2b17 	vmov	r2, r3, d7
 80094bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80094c0:	2401      	movs	r4, #1
 80094c2:	e7a3      	b.n	800940c <_dtoa_r+0x10c>
 80094c4:	2301      	movs	r3, #1
 80094c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c8:	1a43      	subs	r3, r0, r1
 80094ca:	1e5a      	subs	r2, r3, #1
 80094cc:	bf45      	ittet	mi
 80094ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80094d2:	9304      	strmi	r3, [sp, #16]
 80094d4:	2300      	movpl	r3, #0
 80094d6:	2300      	movmi	r3, #0
 80094d8:	9205      	str	r2, [sp, #20]
 80094da:	bf54      	ite	pl
 80094dc:	9304      	strpl	r3, [sp, #16]
 80094de:	9305      	strmi	r3, [sp, #20]
 80094e0:	f1bb 0f00 	cmp.w	fp, #0
 80094e4:	db18      	blt.n	8009518 <_dtoa_r+0x218>
 80094e6:	9b05      	ldr	r3, [sp, #20]
 80094e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80094ec:	445b      	add	r3, fp
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	2300      	movs	r3, #0
 80094f2:	9a06      	ldr	r2, [sp, #24]
 80094f4:	2a09      	cmp	r2, #9
 80094f6:	d849      	bhi.n	800958c <_dtoa_r+0x28c>
 80094f8:	2a05      	cmp	r2, #5
 80094fa:	bfc4      	itt	gt
 80094fc:	3a04      	subgt	r2, #4
 80094fe:	9206      	strgt	r2, [sp, #24]
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	f1a2 0202 	sub.w	r2, r2, #2
 8009506:	bfcc      	ite	gt
 8009508:	2400      	movgt	r4, #0
 800950a:	2401      	movle	r4, #1
 800950c:	2a03      	cmp	r2, #3
 800950e:	d848      	bhi.n	80095a2 <_dtoa_r+0x2a2>
 8009510:	e8df f002 	tbb	[pc, r2]
 8009514:	3a2c2e0b 	.word	0x3a2c2e0b
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	2200      	movs	r2, #0
 800951c:	eba3 030b 	sub.w	r3, r3, fp
 8009520:	9304      	str	r3, [sp, #16]
 8009522:	9209      	str	r2, [sp, #36]	; 0x24
 8009524:	f1cb 0300 	rsb	r3, fp, #0
 8009528:	e7e3      	b.n	80094f2 <_dtoa_r+0x1f2>
 800952a:	2200      	movs	r2, #0
 800952c:	9207      	str	r2, [sp, #28]
 800952e:	9a08      	ldr	r2, [sp, #32]
 8009530:	2a00      	cmp	r2, #0
 8009532:	dc39      	bgt.n	80095a8 <_dtoa_r+0x2a8>
 8009534:	f04f 0a01 	mov.w	sl, #1
 8009538:	46d1      	mov	r9, sl
 800953a:	4652      	mov	r2, sl
 800953c:	f8cd a020 	str.w	sl, [sp, #32]
 8009540:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009542:	2100      	movs	r1, #0
 8009544:	6079      	str	r1, [r7, #4]
 8009546:	2004      	movs	r0, #4
 8009548:	f100 0c14 	add.w	ip, r0, #20
 800954c:	4594      	cmp	ip, r2
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	d92f      	bls.n	80095b2 <_dtoa_r+0x2b2>
 8009552:	4630      	mov	r0, r6
 8009554:	930d      	str	r3, [sp, #52]	; 0x34
 8009556:	f000 fd93 	bl	800a080 <_Balloc>
 800955a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800955c:	9001      	str	r0, [sp, #4]
 800955e:	4602      	mov	r2, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	d149      	bne.n	80095f8 <_dtoa_r+0x2f8>
 8009564:	4b23      	ldr	r3, [pc, #140]	; (80095f4 <_dtoa_r+0x2f4>)
 8009566:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800956a:	e6e1      	b.n	8009330 <_dtoa_r+0x30>
 800956c:	2201      	movs	r2, #1
 800956e:	e7dd      	b.n	800952c <_dtoa_r+0x22c>
 8009570:	2200      	movs	r2, #0
 8009572:	9207      	str	r2, [sp, #28]
 8009574:	9a08      	ldr	r2, [sp, #32]
 8009576:	eb0b 0a02 	add.w	sl, fp, r2
 800957a:	f10a 0901 	add.w	r9, sl, #1
 800957e:	464a      	mov	r2, r9
 8009580:	2a01      	cmp	r2, #1
 8009582:	bfb8      	it	lt
 8009584:	2201      	movlt	r2, #1
 8009586:	e7db      	b.n	8009540 <_dtoa_r+0x240>
 8009588:	2201      	movs	r2, #1
 800958a:	e7f2      	b.n	8009572 <_dtoa_r+0x272>
 800958c:	2401      	movs	r4, #1
 800958e:	2200      	movs	r2, #0
 8009590:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009594:	f04f 3aff 	mov.w	sl, #4294967295
 8009598:	2100      	movs	r1, #0
 800959a:	46d1      	mov	r9, sl
 800959c:	2212      	movs	r2, #18
 800959e:	9108      	str	r1, [sp, #32]
 80095a0:	e7ce      	b.n	8009540 <_dtoa_r+0x240>
 80095a2:	2201      	movs	r2, #1
 80095a4:	9207      	str	r2, [sp, #28]
 80095a6:	e7f5      	b.n	8009594 <_dtoa_r+0x294>
 80095a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80095ac:	46d1      	mov	r9, sl
 80095ae:	4652      	mov	r2, sl
 80095b0:	e7c6      	b.n	8009540 <_dtoa_r+0x240>
 80095b2:	3101      	adds	r1, #1
 80095b4:	6079      	str	r1, [r7, #4]
 80095b6:	0040      	lsls	r0, r0, #1
 80095b8:	e7c6      	b.n	8009548 <_dtoa_r+0x248>
 80095ba:	bf00      	nop
 80095bc:	f3af 8000 	nop.w
 80095c0:	636f4361 	.word	0x636f4361
 80095c4:	3fd287a7 	.word	0x3fd287a7
 80095c8:	8b60c8b3 	.word	0x8b60c8b3
 80095cc:	3fc68a28 	.word	0x3fc68a28
 80095d0:	509f79fb 	.word	0x509f79fb
 80095d4:	3fd34413 	.word	0x3fd34413
 80095d8:	0800ae3d 	.word	0x0800ae3d
 80095dc:	0800ae54 	.word	0x0800ae54
 80095e0:	7ff00000 	.word	0x7ff00000
 80095e4:	0800ae39 	.word	0x0800ae39
 80095e8:	0800ae30 	.word	0x0800ae30
 80095ec:	0800ae0d 	.word	0x0800ae0d
 80095f0:	0800af48 	.word	0x0800af48
 80095f4:	0800aeaf 	.word	0x0800aeaf
 80095f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80095fa:	9901      	ldr	r1, [sp, #4]
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	f1b9 0f0e 	cmp.w	r9, #14
 8009602:	d86c      	bhi.n	80096de <_dtoa_r+0x3de>
 8009604:	2c00      	cmp	r4, #0
 8009606:	d06a      	beq.n	80096de <_dtoa_r+0x3de>
 8009608:	f1bb 0f00 	cmp.w	fp, #0
 800960c:	f340 80a0 	ble.w	8009750 <_dtoa_r+0x450>
 8009610:	49c1      	ldr	r1, [pc, #772]	; (8009918 <_dtoa_r+0x618>)
 8009612:	f00b 020f 	and.w	r2, fp, #15
 8009616:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800961a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800961e:	ed92 7b00 	vldr	d7, [r2]
 8009622:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009626:	f000 8087 	beq.w	8009738 <_dtoa_r+0x438>
 800962a:	4abc      	ldr	r2, [pc, #752]	; (800991c <_dtoa_r+0x61c>)
 800962c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009630:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009634:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009638:	f001 010f 	and.w	r1, r1, #15
 800963c:	2203      	movs	r2, #3
 800963e:	48b7      	ldr	r0, [pc, #732]	; (800991c <_dtoa_r+0x61c>)
 8009640:	2900      	cmp	r1, #0
 8009642:	d17b      	bne.n	800973c <_dtoa_r+0x43c>
 8009644:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009648:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800964c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009652:	2900      	cmp	r1, #0
 8009654:	f000 80a2 	beq.w	800979c <_dtoa_r+0x49c>
 8009658:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800965c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009660:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	f140 8098 	bpl.w	800979c <_dtoa_r+0x49c>
 800966c:	f1b9 0f00 	cmp.w	r9, #0
 8009670:	f000 8094 	beq.w	800979c <_dtoa_r+0x49c>
 8009674:	f1ba 0f00 	cmp.w	sl, #0
 8009678:	dd2f      	ble.n	80096da <_dtoa_r+0x3da>
 800967a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800967e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009682:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009686:	f10b 37ff 	add.w	r7, fp, #4294967295
 800968a:	3201      	adds	r2, #1
 800968c:	4650      	mov	r0, sl
 800968e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009692:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009696:	ee07 2a90 	vmov	s15, r2
 800969a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800969e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80096a2:	ee15 4a90 	vmov	r4, s11
 80096a6:	ec52 1b15 	vmov	r1, r2, d5
 80096aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d177      	bne.n	80097a2 <_dtoa_r+0x4a2>
 80096b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096ba:	ec42 1b17 	vmov	d7, r1, r2
 80096be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c6:	f300 8263 	bgt.w	8009b90 <_dtoa_r+0x890>
 80096ca:	eeb1 7b47 	vneg.f64	d7, d7
 80096ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	f100 8258 	bmi.w	8009b8a <_dtoa_r+0x88a>
 80096da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	f2c0 811d 	blt.w	8009920 <_dtoa_r+0x620>
 80096e6:	f1bb 0f0e 	cmp.w	fp, #14
 80096ea:	f300 8119 	bgt.w	8009920 <_dtoa_r+0x620>
 80096ee:	4b8a      	ldr	r3, [pc, #552]	; (8009918 <_dtoa_r+0x618>)
 80096f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096f4:	ed93 6b00 	vldr	d6, [r3]
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f280 80b7 	bge.w	800986e <_dtoa_r+0x56e>
 8009700:	f1b9 0f00 	cmp.w	r9, #0
 8009704:	f300 80b3 	bgt.w	800986e <_dtoa_r+0x56e>
 8009708:	f040 823f 	bne.w	8009b8a <_dtoa_r+0x88a>
 800970c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009710:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800971c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009720:	464c      	mov	r4, r9
 8009722:	464f      	mov	r7, r9
 8009724:	f280 8215 	bge.w	8009b52 <_dtoa_r+0x852>
 8009728:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800972c:	2331      	movs	r3, #49	; 0x31
 800972e:	f808 3b01 	strb.w	r3, [r8], #1
 8009732:	f10b 0b01 	add.w	fp, fp, #1
 8009736:	e211      	b.n	8009b5c <_dtoa_r+0x85c>
 8009738:	2202      	movs	r2, #2
 800973a:	e780      	b.n	800963e <_dtoa_r+0x33e>
 800973c:	07cc      	lsls	r4, r1, #31
 800973e:	d504      	bpl.n	800974a <_dtoa_r+0x44a>
 8009740:	ed90 6b00 	vldr	d6, [r0]
 8009744:	3201      	adds	r2, #1
 8009746:	ee27 7b06 	vmul.f64	d7, d7, d6
 800974a:	1049      	asrs	r1, r1, #1
 800974c:	3008      	adds	r0, #8
 800974e:	e777      	b.n	8009640 <_dtoa_r+0x340>
 8009750:	d022      	beq.n	8009798 <_dtoa_r+0x498>
 8009752:	f1cb 0100 	rsb	r1, fp, #0
 8009756:	4a70      	ldr	r2, [pc, #448]	; (8009918 <_dtoa_r+0x618>)
 8009758:	f001 000f 	and.w	r0, r1, #15
 800975c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009760:	ed92 7b00 	vldr	d7, [r2]
 8009764:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009768:	ed8d 7b02 	vstr	d7, [sp, #8]
 800976c:	486b      	ldr	r0, [pc, #428]	; (800991c <_dtoa_r+0x61c>)
 800976e:	1109      	asrs	r1, r1, #4
 8009770:	2400      	movs	r4, #0
 8009772:	2202      	movs	r2, #2
 8009774:	b929      	cbnz	r1, 8009782 <_dtoa_r+0x482>
 8009776:	2c00      	cmp	r4, #0
 8009778:	f43f af6a 	beq.w	8009650 <_dtoa_r+0x350>
 800977c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009780:	e766      	b.n	8009650 <_dtoa_r+0x350>
 8009782:	07cf      	lsls	r7, r1, #31
 8009784:	d505      	bpl.n	8009792 <_dtoa_r+0x492>
 8009786:	ed90 6b00 	vldr	d6, [r0]
 800978a:	3201      	adds	r2, #1
 800978c:	2401      	movs	r4, #1
 800978e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009792:	1049      	asrs	r1, r1, #1
 8009794:	3008      	adds	r0, #8
 8009796:	e7ed      	b.n	8009774 <_dtoa_r+0x474>
 8009798:	2202      	movs	r2, #2
 800979a:	e759      	b.n	8009650 <_dtoa_r+0x350>
 800979c:	465f      	mov	r7, fp
 800979e:	4648      	mov	r0, r9
 80097a0:	e775      	b.n	800968e <_dtoa_r+0x38e>
 80097a2:	ec42 1b17 	vmov	d7, r1, r2
 80097a6:	4a5c      	ldr	r2, [pc, #368]	; (8009918 <_dtoa_r+0x618>)
 80097a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80097ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80097b0:	9a01      	ldr	r2, [sp, #4]
 80097b2:	1814      	adds	r4, r2, r0
 80097b4:	9a07      	ldr	r2, [sp, #28]
 80097b6:	b352      	cbz	r2, 800980e <_dtoa_r+0x50e>
 80097b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80097bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80097c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80097c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80097cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80097d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80097d4:	ee14 2a90 	vmov	r2, s9
 80097d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80097dc:	3230      	adds	r2, #48	; 0x30
 80097de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80097e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	f808 2b01 	strb.w	r2, [r8], #1
 80097ee:	d439      	bmi.n	8009864 <_dtoa_r+0x564>
 80097f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80097f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80097f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fc:	d472      	bmi.n	80098e4 <_dtoa_r+0x5e4>
 80097fe:	45a0      	cmp	r8, r4
 8009800:	f43f af6b 	beq.w	80096da <_dtoa_r+0x3da>
 8009804:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009808:	ee26 6b03 	vmul.f64	d6, d6, d3
 800980c:	e7e0      	b.n	80097d0 <_dtoa_r+0x4d0>
 800980e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009812:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009816:	4621      	mov	r1, r4
 8009818:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800981c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009820:	ee14 2a90 	vmov	r2, s9
 8009824:	3230      	adds	r2, #48	; 0x30
 8009826:	f808 2b01 	strb.w	r2, [r8], #1
 800982a:	45a0      	cmp	r8, r4
 800982c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009830:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009834:	d118      	bne.n	8009868 <_dtoa_r+0x568>
 8009836:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800983a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800983e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	dc4d      	bgt.n	80098e4 <_dtoa_r+0x5e4>
 8009848:	ee35 7b47 	vsub.f64	d7, d5, d7
 800984c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009854:	f57f af41 	bpl.w	80096da <_dtoa_r+0x3da>
 8009858:	4688      	mov	r8, r1
 800985a:	3901      	subs	r1, #1
 800985c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009860:	2b30      	cmp	r3, #48	; 0x30
 8009862:	d0f9      	beq.n	8009858 <_dtoa_r+0x558>
 8009864:	46bb      	mov	fp, r7
 8009866:	e02a      	b.n	80098be <_dtoa_r+0x5be>
 8009868:	ee26 6b03 	vmul.f64	d6, d6, d3
 800986c:	e7d6      	b.n	800981c <_dtoa_r+0x51c>
 800986e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009872:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009876:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800987a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800987e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009882:	ee15 3a10 	vmov	r3, s10
 8009886:	3330      	adds	r3, #48	; 0x30
 8009888:	f808 3b01 	strb.w	r3, [r8], #1
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	eba8 0303 	sub.w	r3, r8, r3
 8009892:	4599      	cmp	r9, r3
 8009894:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009898:	eea3 7b46 	vfms.f64	d7, d3, d6
 800989c:	d133      	bne.n	8009906 <_dtoa_r+0x606>
 800989e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80098a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098aa:	dc1a      	bgt.n	80098e2 <_dtoa_r+0x5e2>
 80098ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80098b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b4:	d103      	bne.n	80098be <_dtoa_r+0x5be>
 80098b6:	ee15 3a10 	vmov	r3, s10
 80098ba:	07d9      	lsls	r1, r3, #31
 80098bc:	d411      	bmi.n	80098e2 <_dtoa_r+0x5e2>
 80098be:	4629      	mov	r1, r5
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 fc1d 	bl	800a100 <_Bfree>
 80098c6:	2300      	movs	r3, #0
 80098c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ca:	f888 3000 	strb.w	r3, [r8]
 80098ce:	f10b 0301 	add.w	r3, fp, #1
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f43f ad61 	beq.w	800939e <_dtoa_r+0x9e>
 80098dc:	f8c3 8000 	str.w	r8, [r3]
 80098e0:	e55d      	b.n	800939e <_dtoa_r+0x9e>
 80098e2:	465f      	mov	r7, fp
 80098e4:	4643      	mov	r3, r8
 80098e6:	4698      	mov	r8, r3
 80098e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ec:	2a39      	cmp	r2, #57	; 0x39
 80098ee:	d106      	bne.n	80098fe <_dtoa_r+0x5fe>
 80098f0:	9a01      	ldr	r2, [sp, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d1f7      	bne.n	80098e6 <_dtoa_r+0x5e6>
 80098f6:	9901      	ldr	r1, [sp, #4]
 80098f8:	2230      	movs	r2, #48	; 0x30
 80098fa:	3701      	adds	r7, #1
 80098fc:	700a      	strb	r2, [r1, #0]
 80098fe:	781a      	ldrb	r2, [r3, #0]
 8009900:	3201      	adds	r2, #1
 8009902:	701a      	strb	r2, [r3, #0]
 8009904:	e7ae      	b.n	8009864 <_dtoa_r+0x564>
 8009906:	ee27 7b04 	vmul.f64	d7, d7, d4
 800990a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009912:	d1b2      	bne.n	800987a <_dtoa_r+0x57a>
 8009914:	e7d3      	b.n	80098be <_dtoa_r+0x5be>
 8009916:	bf00      	nop
 8009918:	0800af48 	.word	0x0800af48
 800991c:	0800af20 	.word	0x0800af20
 8009920:	9907      	ldr	r1, [sp, #28]
 8009922:	2900      	cmp	r1, #0
 8009924:	f000 80d0 	beq.w	8009ac8 <_dtoa_r+0x7c8>
 8009928:	9906      	ldr	r1, [sp, #24]
 800992a:	2901      	cmp	r1, #1
 800992c:	f300 80b4 	bgt.w	8009a98 <_dtoa_r+0x798>
 8009930:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009932:	2900      	cmp	r1, #0
 8009934:	f000 80ac 	beq.w	8009a90 <_dtoa_r+0x790>
 8009938:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800993c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009940:	461c      	mov	r4, r3
 8009942:	930a      	str	r3, [sp, #40]	; 0x28
 8009944:	9b04      	ldr	r3, [sp, #16]
 8009946:	4413      	add	r3, r2
 8009948:	9304      	str	r3, [sp, #16]
 800994a:	9b05      	ldr	r3, [sp, #20]
 800994c:	2101      	movs	r1, #1
 800994e:	4413      	add	r3, r2
 8009950:	4630      	mov	r0, r6
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	f000 fc8c 	bl	800a270 <__i2b>
 8009958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800995a:	4607      	mov	r7, r0
 800995c:	f1b8 0f00 	cmp.w	r8, #0
 8009960:	dd0d      	ble.n	800997e <_dtoa_r+0x67e>
 8009962:	9a05      	ldr	r2, [sp, #20]
 8009964:	2a00      	cmp	r2, #0
 8009966:	dd0a      	ble.n	800997e <_dtoa_r+0x67e>
 8009968:	4542      	cmp	r2, r8
 800996a:	9904      	ldr	r1, [sp, #16]
 800996c:	bfa8      	it	ge
 800996e:	4642      	movge	r2, r8
 8009970:	1a89      	subs	r1, r1, r2
 8009972:	9104      	str	r1, [sp, #16]
 8009974:	9905      	ldr	r1, [sp, #20]
 8009976:	eba8 0802 	sub.w	r8, r8, r2
 800997a:	1a8a      	subs	r2, r1, r2
 800997c:	9205      	str	r2, [sp, #20]
 800997e:	b303      	cbz	r3, 80099c2 <_dtoa_r+0x6c2>
 8009980:	9a07      	ldr	r2, [sp, #28]
 8009982:	2a00      	cmp	r2, #0
 8009984:	f000 80a5 	beq.w	8009ad2 <_dtoa_r+0x7d2>
 8009988:	2c00      	cmp	r4, #0
 800998a:	dd13      	ble.n	80099b4 <_dtoa_r+0x6b4>
 800998c:	4639      	mov	r1, r7
 800998e:	4622      	mov	r2, r4
 8009990:	4630      	mov	r0, r6
 8009992:	930d      	str	r3, [sp, #52]	; 0x34
 8009994:	f000 fd2c 	bl	800a3f0 <__pow5mult>
 8009998:	462a      	mov	r2, r5
 800999a:	4601      	mov	r1, r0
 800999c:	4607      	mov	r7, r0
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 fc7c 	bl	800a29c <__multiply>
 80099a4:	4629      	mov	r1, r5
 80099a6:	900a      	str	r0, [sp, #40]	; 0x28
 80099a8:	4630      	mov	r0, r6
 80099aa:	f000 fba9 	bl	800a100 <_Bfree>
 80099ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b2:	4615      	mov	r5, r2
 80099b4:	1b1a      	subs	r2, r3, r4
 80099b6:	d004      	beq.n	80099c2 <_dtoa_r+0x6c2>
 80099b8:	4629      	mov	r1, r5
 80099ba:	4630      	mov	r0, r6
 80099bc:	f000 fd18 	bl	800a3f0 <__pow5mult>
 80099c0:	4605      	mov	r5, r0
 80099c2:	2101      	movs	r1, #1
 80099c4:	4630      	mov	r0, r6
 80099c6:	f000 fc53 	bl	800a270 <__i2b>
 80099ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	f340 8081 	ble.w	8009ad6 <_dtoa_r+0x7d6>
 80099d4:	461a      	mov	r2, r3
 80099d6:	4601      	mov	r1, r0
 80099d8:	4630      	mov	r0, r6
 80099da:	f000 fd09 	bl	800a3f0 <__pow5mult>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	4604      	mov	r4, r0
 80099e4:	dd7a      	ble.n	8009adc <_dtoa_r+0x7dc>
 80099e6:	2300      	movs	r3, #0
 80099e8:	930a      	str	r3, [sp, #40]	; 0x28
 80099ea:	6922      	ldr	r2, [r4, #16]
 80099ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80099f0:	6910      	ldr	r0, [r2, #16]
 80099f2:	f000 fbed 	bl	800a1d0 <__hi0bits>
 80099f6:	f1c0 0020 	rsb	r0, r0, #32
 80099fa:	9b05      	ldr	r3, [sp, #20]
 80099fc:	4418      	add	r0, r3
 80099fe:	f010 001f 	ands.w	r0, r0, #31
 8009a02:	f000 808c 	beq.w	8009b1e <_dtoa_r+0x81e>
 8009a06:	f1c0 0220 	rsb	r2, r0, #32
 8009a0a:	2a04      	cmp	r2, #4
 8009a0c:	f340 8085 	ble.w	8009b1a <_dtoa_r+0x81a>
 8009a10:	f1c0 001c 	rsb	r0, r0, #28
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	4403      	add	r3, r0
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	4403      	add	r3, r0
 8009a1e:	4480      	add	r8, r0
 8009a20:	9305      	str	r3, [sp, #20]
 8009a22:	9b04      	ldr	r3, [sp, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dd05      	ble.n	8009a34 <_dtoa_r+0x734>
 8009a28:	4629      	mov	r1, r5
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f000 fd39 	bl	800a4a4 <__lshift>
 8009a32:	4605      	mov	r5, r0
 8009a34:	9b05      	ldr	r3, [sp, #20]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dd05      	ble.n	8009a46 <_dtoa_r+0x746>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f000 fd30 	bl	800a4a4 <__lshift>
 8009a44:	4604      	mov	r4, r0
 8009a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d06a      	beq.n	8009b22 <_dtoa_r+0x822>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 fd98 	bl	800a584 <__mcmp>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	da64      	bge.n	8009b22 <_dtoa_r+0x822>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	220a      	movs	r2, #10
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f000 fb70 	bl	800a144 <__multadd>
 8009a64:	9b07      	ldr	r3, [sp, #28]
 8009a66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8191 	beq.w	8009d94 <_dtoa_r+0xa94>
 8009a72:	4639      	mov	r1, r7
 8009a74:	2300      	movs	r3, #0
 8009a76:	220a      	movs	r2, #10
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 fb63 	bl	800a144 <__multadd>
 8009a7e:	f1ba 0f00 	cmp.w	sl, #0
 8009a82:	4607      	mov	r7, r0
 8009a84:	f300 808d 	bgt.w	8009ba2 <_dtoa_r+0x8a2>
 8009a88:	9b06      	ldr	r3, [sp, #24]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	dc50      	bgt.n	8009b30 <_dtoa_r+0x830>
 8009a8e:	e088      	b.n	8009ba2 <_dtoa_r+0x8a2>
 8009a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a96:	e751      	b.n	800993c <_dtoa_r+0x63c>
 8009a98:	f109 34ff 	add.w	r4, r9, #4294967295
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bfbf      	itttt	lt
 8009aa0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009aa2:	1ae3      	sublt	r3, r4, r3
 8009aa4:	18d2      	addlt	r2, r2, r3
 8009aa6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009aa8:	bfb6      	itet	lt
 8009aaa:	4623      	movlt	r3, r4
 8009aac:	1b1c      	subge	r4, r3, r4
 8009aae:	2400      	movlt	r4, #0
 8009ab0:	f1b9 0f00 	cmp.w	r9, #0
 8009ab4:	bfb5      	itete	lt
 8009ab6:	9a04      	ldrlt	r2, [sp, #16]
 8009ab8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009abc:	eba2 0809 	sublt.w	r8, r2, r9
 8009ac0:	464a      	movge	r2, r9
 8009ac2:	bfb8      	it	lt
 8009ac4:	2200      	movlt	r2, #0
 8009ac6:	e73c      	b.n	8009942 <_dtoa_r+0x642>
 8009ac8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009acc:	9f07      	ldr	r7, [sp, #28]
 8009ace:	461c      	mov	r4, r3
 8009ad0:	e744      	b.n	800995c <_dtoa_r+0x65c>
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	e770      	b.n	80099b8 <_dtoa_r+0x6b8>
 8009ad6:	9b06      	ldr	r3, [sp, #24]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	dc18      	bgt.n	8009b0e <_dtoa_r+0x80e>
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	b9b3      	cbnz	r3, 8009b0e <_dtoa_r+0x80e>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009ae6:	b9a2      	cbnz	r2, 8009b12 <_dtoa_r+0x812>
 8009ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009aec:	0d12      	lsrs	r2, r2, #20
 8009aee:	0512      	lsls	r2, r2, #20
 8009af0:	b18a      	cbz	r2, 8009b16 <_dtoa_r+0x816>
 8009af2:	9b04      	ldr	r3, [sp, #16]
 8009af4:	3301      	adds	r3, #1
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	9b05      	ldr	r3, [sp, #20]
 8009afa:	3301      	adds	r3, #1
 8009afc:	9305      	str	r3, [sp, #20]
 8009afe:	2301      	movs	r3, #1
 8009b00:	930a      	str	r3, [sp, #40]	; 0x28
 8009b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f47f af70 	bne.w	80099ea <_dtoa_r+0x6ea>
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	e775      	b.n	80099fa <_dtoa_r+0x6fa>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e7f6      	b.n	8009b00 <_dtoa_r+0x800>
 8009b12:	9b02      	ldr	r3, [sp, #8]
 8009b14:	e7f4      	b.n	8009b00 <_dtoa_r+0x800>
 8009b16:	920a      	str	r2, [sp, #40]	; 0x28
 8009b18:	e7f3      	b.n	8009b02 <_dtoa_r+0x802>
 8009b1a:	d082      	beq.n	8009a22 <_dtoa_r+0x722>
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	301c      	adds	r0, #28
 8009b20:	e778      	b.n	8009a14 <_dtoa_r+0x714>
 8009b22:	f1b9 0f00 	cmp.w	r9, #0
 8009b26:	dc37      	bgt.n	8009b98 <_dtoa_r+0x898>
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	dd34      	ble.n	8009b98 <_dtoa_r+0x898>
 8009b2e:	46ca      	mov	sl, r9
 8009b30:	f1ba 0f00 	cmp.w	sl, #0
 8009b34:	d10d      	bne.n	8009b52 <_dtoa_r+0x852>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4653      	mov	r3, sl
 8009b3a:	2205      	movs	r2, #5
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 fb01 	bl	800a144 <__multadd>
 8009b42:	4601      	mov	r1, r0
 8009b44:	4604      	mov	r4, r0
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 fd1c 	bl	800a584 <__mcmp>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f73f adeb 	bgt.w	8009728 <_dtoa_r+0x428>
 8009b52:	9b08      	ldr	r3, [sp, #32]
 8009b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b58:	ea6f 0b03 	mvn.w	fp, r3
 8009b5c:	f04f 0900 	mov.w	r9, #0
 8009b60:	4621      	mov	r1, r4
 8009b62:	4630      	mov	r0, r6
 8009b64:	f000 facc 	bl	800a100 <_Bfree>
 8009b68:	2f00      	cmp	r7, #0
 8009b6a:	f43f aea8 	beq.w	80098be <_dtoa_r+0x5be>
 8009b6e:	f1b9 0f00 	cmp.w	r9, #0
 8009b72:	d005      	beq.n	8009b80 <_dtoa_r+0x880>
 8009b74:	45b9      	cmp	r9, r7
 8009b76:	d003      	beq.n	8009b80 <_dtoa_r+0x880>
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f000 fac0 	bl	800a100 <_Bfree>
 8009b80:	4639      	mov	r1, r7
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 fabc 	bl	800a100 <_Bfree>
 8009b88:	e699      	b.n	80098be <_dtoa_r+0x5be>
 8009b8a:	2400      	movs	r4, #0
 8009b8c:	4627      	mov	r7, r4
 8009b8e:	e7e0      	b.n	8009b52 <_dtoa_r+0x852>
 8009b90:	46bb      	mov	fp, r7
 8009b92:	4604      	mov	r4, r0
 8009b94:	4607      	mov	r7, r0
 8009b96:	e5c7      	b.n	8009728 <_dtoa_r+0x428>
 8009b98:	9b07      	ldr	r3, [sp, #28]
 8009b9a:	46ca      	mov	sl, r9
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 8100 	beq.w	8009da2 <_dtoa_r+0xaa2>
 8009ba2:	f1b8 0f00 	cmp.w	r8, #0
 8009ba6:	dd05      	ble.n	8009bb4 <_dtoa_r+0x8b4>
 8009ba8:	4639      	mov	r1, r7
 8009baa:	4642      	mov	r2, r8
 8009bac:	4630      	mov	r0, r6
 8009bae:	f000 fc79 	bl	800a4a4 <__lshift>
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d05d      	beq.n	8009c76 <_dtoa_r+0x976>
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f000 fa5f 	bl	800a080 <_Balloc>
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	b928      	cbnz	r0, 8009bd2 <_dtoa_r+0x8d2>
 8009bc6:	4b82      	ldr	r3, [pc, #520]	; (8009dd0 <_dtoa_r+0xad0>)
 8009bc8:	4602      	mov	r2, r0
 8009bca:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009bce:	f7ff bbaf 	b.w	8009330 <_dtoa_r+0x30>
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	3202      	adds	r2, #2
 8009bd6:	0092      	lsls	r2, r2, #2
 8009bd8:	f107 010c 	add.w	r1, r7, #12
 8009bdc:	300c      	adds	r0, #12
 8009bde:	f7fe fbe8 	bl	80083b2 <memcpy>
 8009be2:	2201      	movs	r2, #1
 8009be4:	4641      	mov	r1, r8
 8009be6:	4630      	mov	r0, r6
 8009be8:	f000 fc5c 	bl	800a4a4 <__lshift>
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	9b01      	ldr	r3, [sp, #4]
 8009bf4:	4453      	add	r3, sl
 8009bf6:	9308      	str	r3, [sp, #32]
 8009bf8:	9b02      	ldr	r3, [sp, #8]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	46b9      	mov	r9, r7
 8009c00:	9307      	str	r3, [sp, #28]
 8009c02:	4607      	mov	r7, r0
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	4621      	mov	r1, r4
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	9302      	str	r3, [sp, #8]
 8009c0e:	f7ff faeb 	bl	80091e8 <quorem>
 8009c12:	4603      	mov	r3, r0
 8009c14:	3330      	adds	r3, #48	; 0x30
 8009c16:	9005      	str	r0, [sp, #20]
 8009c18:	4649      	mov	r1, r9
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1e:	f000 fcb1 	bl	800a584 <__mcmp>
 8009c22:	463a      	mov	r2, r7
 8009c24:	4682      	mov	sl, r0
 8009c26:	4621      	mov	r1, r4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fcc7 	bl	800a5bc <__mdiff>
 8009c2e:	68c2      	ldr	r2, [r0, #12]
 8009c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c32:	4680      	mov	r8, r0
 8009c34:	bb0a      	cbnz	r2, 8009c7a <_dtoa_r+0x97a>
 8009c36:	4601      	mov	r1, r0
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f000 fca3 	bl	800a584 <__mcmp>
 8009c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c40:	4602      	mov	r2, r0
 8009c42:	4641      	mov	r1, r8
 8009c44:	4630      	mov	r0, r6
 8009c46:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009c4a:	f000 fa59 	bl	800a100 <_Bfree>
 8009c4e:	9b06      	ldr	r3, [sp, #24]
 8009c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c52:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c56:	ea43 0102 	orr.w	r1, r3, r2
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c60:	d10d      	bne.n	8009c7e <_dtoa_r+0x97e>
 8009c62:	2b39      	cmp	r3, #57	; 0x39
 8009c64:	d029      	beq.n	8009cba <_dtoa_r+0x9ba>
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	dd01      	ble.n	8009c70 <_dtoa_r+0x970>
 8009c6c:	9b05      	ldr	r3, [sp, #20]
 8009c6e:	3331      	adds	r3, #49	; 0x31
 8009c70:	9a02      	ldr	r2, [sp, #8]
 8009c72:	7013      	strb	r3, [r2, #0]
 8009c74:	e774      	b.n	8009b60 <_dtoa_r+0x860>
 8009c76:	4638      	mov	r0, r7
 8009c78:	e7b8      	b.n	8009bec <_dtoa_r+0x8ec>
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	e7e1      	b.n	8009c42 <_dtoa_r+0x942>
 8009c7e:	f1ba 0f00 	cmp.w	sl, #0
 8009c82:	db06      	blt.n	8009c92 <_dtoa_r+0x992>
 8009c84:	9906      	ldr	r1, [sp, #24]
 8009c86:	ea41 0a0a 	orr.w	sl, r1, sl
 8009c8a:	9907      	ldr	r1, [sp, #28]
 8009c8c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009c90:	d120      	bne.n	8009cd4 <_dtoa_r+0x9d4>
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	ddec      	ble.n	8009c70 <_dtoa_r+0x970>
 8009c96:	4629      	mov	r1, r5
 8009c98:	2201      	movs	r2, #1
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	f000 fc01 	bl	800a4a4 <__lshift>
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	f000 fc6d 	bl	800a584 <__mcmp>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	9b04      	ldr	r3, [sp, #16]
 8009cae:	dc02      	bgt.n	8009cb6 <_dtoa_r+0x9b6>
 8009cb0:	d1de      	bne.n	8009c70 <_dtoa_r+0x970>
 8009cb2:	07da      	lsls	r2, r3, #31
 8009cb4:	d5dc      	bpl.n	8009c70 <_dtoa_r+0x970>
 8009cb6:	2b39      	cmp	r3, #57	; 0x39
 8009cb8:	d1d8      	bne.n	8009c6c <_dtoa_r+0x96c>
 8009cba:	9a02      	ldr	r2, [sp, #8]
 8009cbc:	2339      	movs	r3, #57	; 0x39
 8009cbe:	7013      	strb	r3, [r2, #0]
 8009cc0:	4643      	mov	r3, r8
 8009cc2:	4698      	mov	r8, r3
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009cca:	2a39      	cmp	r2, #57	; 0x39
 8009ccc:	d051      	beq.n	8009d72 <_dtoa_r+0xa72>
 8009cce:	3201      	adds	r2, #1
 8009cd0:	701a      	strb	r2, [r3, #0]
 8009cd2:	e745      	b.n	8009b60 <_dtoa_r+0x860>
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	dd03      	ble.n	8009ce0 <_dtoa_r+0x9e0>
 8009cd8:	2b39      	cmp	r3, #57	; 0x39
 8009cda:	d0ee      	beq.n	8009cba <_dtoa_r+0x9ba>
 8009cdc:	3301      	adds	r3, #1
 8009cde:	e7c7      	b.n	8009c70 <_dtoa_r+0x970>
 8009ce0:	9a04      	ldr	r2, [sp, #16]
 8009ce2:	9908      	ldr	r1, [sp, #32]
 8009ce4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ce8:	428a      	cmp	r2, r1
 8009cea:	d02b      	beq.n	8009d44 <_dtoa_r+0xa44>
 8009cec:	4629      	mov	r1, r5
 8009cee:	2300      	movs	r3, #0
 8009cf0:	220a      	movs	r2, #10
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 fa26 	bl	800a144 <__multadd>
 8009cf8:	45b9      	cmp	r9, r7
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	f04f 020a 	mov.w	r2, #10
 8009d04:	4649      	mov	r1, r9
 8009d06:	4630      	mov	r0, r6
 8009d08:	d107      	bne.n	8009d1a <_dtoa_r+0xa1a>
 8009d0a:	f000 fa1b 	bl	800a144 <__multadd>
 8009d0e:	4681      	mov	r9, r0
 8009d10:	4607      	mov	r7, r0
 8009d12:	9b04      	ldr	r3, [sp, #16]
 8009d14:	3301      	adds	r3, #1
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	e774      	b.n	8009c04 <_dtoa_r+0x904>
 8009d1a:	f000 fa13 	bl	800a144 <__multadd>
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4681      	mov	r9, r0
 8009d22:	2300      	movs	r3, #0
 8009d24:	220a      	movs	r2, #10
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fa0c 	bl	800a144 <__multadd>
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	e7f0      	b.n	8009d12 <_dtoa_r+0xa12>
 8009d30:	f1ba 0f00 	cmp.w	sl, #0
 8009d34:	9a01      	ldr	r2, [sp, #4]
 8009d36:	bfcc      	ite	gt
 8009d38:	46d0      	movgt	r8, sl
 8009d3a:	f04f 0801 	movle.w	r8, #1
 8009d3e:	4490      	add	r8, r2
 8009d40:	f04f 0900 	mov.w	r9, #0
 8009d44:	4629      	mov	r1, r5
 8009d46:	2201      	movs	r2, #1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	9302      	str	r3, [sp, #8]
 8009d4c:	f000 fbaa 	bl	800a4a4 <__lshift>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4605      	mov	r5, r0
 8009d54:	f000 fc16 	bl	800a584 <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dcb1      	bgt.n	8009cc0 <_dtoa_r+0x9c0>
 8009d5c:	d102      	bne.n	8009d64 <_dtoa_r+0xa64>
 8009d5e:	9b02      	ldr	r3, [sp, #8]
 8009d60:	07db      	lsls	r3, r3, #31
 8009d62:	d4ad      	bmi.n	8009cc0 <_dtoa_r+0x9c0>
 8009d64:	4643      	mov	r3, r8
 8009d66:	4698      	mov	r8, r3
 8009d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d6c:	2a30      	cmp	r2, #48	; 0x30
 8009d6e:	d0fa      	beq.n	8009d66 <_dtoa_r+0xa66>
 8009d70:	e6f6      	b.n	8009b60 <_dtoa_r+0x860>
 8009d72:	9a01      	ldr	r2, [sp, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d1a4      	bne.n	8009cc2 <_dtoa_r+0x9c2>
 8009d78:	f10b 0b01 	add.w	fp, fp, #1
 8009d7c:	2331      	movs	r3, #49	; 0x31
 8009d7e:	e778      	b.n	8009c72 <_dtoa_r+0x972>
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <_dtoa_r+0xad4>)
 8009d82:	f7ff bb27 	b.w	80093d4 <_dtoa_r+0xd4>
 8009d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f47f ab03 	bne.w	8009394 <_dtoa_r+0x94>
 8009d8e:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <_dtoa_r+0xad8>)
 8009d90:	f7ff bb20 	b.w	80093d4 <_dtoa_r+0xd4>
 8009d94:	f1ba 0f00 	cmp.w	sl, #0
 8009d98:	dc03      	bgt.n	8009da2 <_dtoa_r+0xaa2>
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	f73f aec7 	bgt.w	8009b30 <_dtoa_r+0x830>
 8009da2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009da6:	4621      	mov	r1, r4
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7ff fa1d 	bl	80091e8 <quorem>
 8009dae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009db2:	f808 3b01 	strb.w	r3, [r8], #1
 8009db6:	9a01      	ldr	r2, [sp, #4]
 8009db8:	eba8 0202 	sub.w	r2, r8, r2
 8009dbc:	4592      	cmp	sl, r2
 8009dbe:	ddb7      	ble.n	8009d30 <_dtoa_r+0xa30>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f000 f9bc 	bl	800a144 <__multadd>
 8009dcc:	4605      	mov	r5, r0
 8009dce:	e7ea      	b.n	8009da6 <_dtoa_r+0xaa6>
 8009dd0:	0800aeaf 	.word	0x0800aeaf
 8009dd4:	0800ae0c 	.word	0x0800ae0c
 8009dd8:	0800ae30 	.word	0x0800ae30

08009ddc <__sflush_r>:
 8009ddc:	898a      	ldrh	r2, [r1, #12]
 8009dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de2:	4605      	mov	r5, r0
 8009de4:	0710      	lsls	r0, r2, #28
 8009de6:	460c      	mov	r4, r1
 8009de8:	d458      	bmi.n	8009e9c <__sflush_r+0xc0>
 8009dea:	684b      	ldr	r3, [r1, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dc05      	bgt.n	8009dfc <__sflush_r+0x20>
 8009df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dc02      	bgt.n	8009dfc <__sflush_r+0x20>
 8009df6:	2000      	movs	r0, #0
 8009df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	d0f9      	beq.n	8009df6 <__sflush_r+0x1a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e08:	682f      	ldr	r7, [r5, #0]
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	d032      	beq.n	8009e74 <__sflush_r+0x98>
 8009e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	075a      	lsls	r2, r3, #29
 8009e14:	d505      	bpl.n	8009e22 <__sflush_r+0x46>
 8009e16:	6863      	ldr	r3, [r4, #4]
 8009e18:	1ac0      	subs	r0, r0, r3
 8009e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e1c:	b10b      	cbz	r3, 8009e22 <__sflush_r+0x46>
 8009e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e20:	1ac0      	subs	r0, r0, r3
 8009e22:	2300      	movs	r3, #0
 8009e24:	4602      	mov	r2, r0
 8009e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e28:	6a21      	ldr	r1, [r4, #32]
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b0      	blx	r6
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	d106      	bne.n	8009e42 <__sflush_r+0x66>
 8009e34:	6829      	ldr	r1, [r5, #0]
 8009e36:	291d      	cmp	r1, #29
 8009e38:	d82c      	bhi.n	8009e94 <__sflush_r+0xb8>
 8009e3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ee4 <__sflush_r+0x108>)
 8009e3c:	40ca      	lsrs	r2, r1
 8009e3e:	07d6      	lsls	r6, r2, #31
 8009e40:	d528      	bpl.n	8009e94 <__sflush_r+0xb8>
 8009e42:	2200      	movs	r2, #0
 8009e44:	6062      	str	r2, [r4, #4]
 8009e46:	04d9      	lsls	r1, r3, #19
 8009e48:	6922      	ldr	r2, [r4, #16]
 8009e4a:	6022      	str	r2, [r4, #0]
 8009e4c:	d504      	bpl.n	8009e58 <__sflush_r+0x7c>
 8009e4e:	1c42      	adds	r2, r0, #1
 8009e50:	d101      	bne.n	8009e56 <__sflush_r+0x7a>
 8009e52:	682b      	ldr	r3, [r5, #0]
 8009e54:	b903      	cbnz	r3, 8009e58 <__sflush_r+0x7c>
 8009e56:	6560      	str	r0, [r4, #84]	; 0x54
 8009e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e5a:	602f      	str	r7, [r5, #0]
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d0ca      	beq.n	8009df6 <__sflush_r+0x1a>
 8009e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e64:	4299      	cmp	r1, r3
 8009e66:	d002      	beq.n	8009e6e <__sflush_r+0x92>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 fca3 	bl	800a7b4 <_free_r>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	6360      	str	r0, [r4, #52]	; 0x34
 8009e72:	e7c1      	b.n	8009df8 <__sflush_r+0x1c>
 8009e74:	6a21      	ldr	r1, [r4, #32]
 8009e76:	2301      	movs	r3, #1
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b0      	blx	r6
 8009e7c:	1c41      	adds	r1, r0, #1
 8009e7e:	d1c7      	bne.n	8009e10 <__sflush_r+0x34>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0c4      	beq.n	8009e10 <__sflush_r+0x34>
 8009e86:	2b1d      	cmp	r3, #29
 8009e88:	d001      	beq.n	8009e8e <__sflush_r+0xb2>
 8009e8a:	2b16      	cmp	r3, #22
 8009e8c:	d101      	bne.n	8009e92 <__sflush_r+0xb6>
 8009e8e:	602f      	str	r7, [r5, #0]
 8009e90:	e7b1      	b.n	8009df6 <__sflush_r+0x1a>
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e98:	81a3      	strh	r3, [r4, #12]
 8009e9a:	e7ad      	b.n	8009df8 <__sflush_r+0x1c>
 8009e9c:	690f      	ldr	r7, [r1, #16]
 8009e9e:	2f00      	cmp	r7, #0
 8009ea0:	d0a9      	beq.n	8009df6 <__sflush_r+0x1a>
 8009ea2:	0793      	lsls	r3, r2, #30
 8009ea4:	680e      	ldr	r6, [r1, #0]
 8009ea6:	bf08      	it	eq
 8009ea8:	694b      	ldreq	r3, [r1, #20]
 8009eaa:	600f      	str	r7, [r1, #0]
 8009eac:	bf18      	it	ne
 8009eae:	2300      	movne	r3, #0
 8009eb0:	eba6 0807 	sub.w	r8, r6, r7
 8009eb4:	608b      	str	r3, [r1, #8]
 8009eb6:	f1b8 0f00 	cmp.w	r8, #0
 8009eba:	dd9c      	ble.n	8009df6 <__sflush_r+0x1a>
 8009ebc:	6a21      	ldr	r1, [r4, #32]
 8009ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ec0:	4643      	mov	r3, r8
 8009ec2:	463a      	mov	r2, r7
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	47b0      	blx	r6
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	dc06      	bgt.n	8009eda <__sflush_r+0xfe>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	e78e      	b.n	8009df8 <__sflush_r+0x1c>
 8009eda:	4407      	add	r7, r0
 8009edc:	eba8 0800 	sub.w	r8, r8, r0
 8009ee0:	e7e9      	b.n	8009eb6 <__sflush_r+0xda>
 8009ee2:	bf00      	nop
 8009ee4:	20400001 	.word	0x20400001

08009ee8 <_fflush_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	690b      	ldr	r3, [r1, #16]
 8009eec:	4605      	mov	r5, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	b913      	cbnz	r3, 8009ef8 <_fflush_r+0x10>
 8009ef2:	2500      	movs	r5, #0
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	b118      	cbz	r0, 8009f02 <_fflush_r+0x1a>
 8009efa:	6983      	ldr	r3, [r0, #24]
 8009efc:	b90b      	cbnz	r3, 8009f02 <_fflush_r+0x1a>
 8009efe:	f7fe f993 	bl	8008228 <__sinit>
 8009f02:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <_fflush_r+0x6c>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	d11b      	bne.n	8009f40 <_fflush_r+0x58>
 8009f08:	686c      	ldr	r4, [r5, #4]
 8009f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ef      	beq.n	8009ef2 <_fflush_r+0xa>
 8009f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f14:	07d0      	lsls	r0, r2, #31
 8009f16:	d404      	bmi.n	8009f22 <_fflush_r+0x3a>
 8009f18:	0599      	lsls	r1, r3, #22
 8009f1a:	d402      	bmi.n	8009f22 <_fflush_r+0x3a>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1e:	f7fe fa46 	bl	80083ae <__retarget_lock_acquire_recursive>
 8009f22:	4628      	mov	r0, r5
 8009f24:	4621      	mov	r1, r4
 8009f26:	f7ff ff59 	bl	8009ddc <__sflush_r>
 8009f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f2c:	07da      	lsls	r2, r3, #31
 8009f2e:	4605      	mov	r5, r0
 8009f30:	d4e0      	bmi.n	8009ef4 <_fflush_r+0xc>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	059b      	lsls	r3, r3, #22
 8009f36:	d4dd      	bmi.n	8009ef4 <_fflush_r+0xc>
 8009f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3a:	f7fe fa39 	bl	80083b0 <__retarget_lock_release_recursive>
 8009f3e:	e7d9      	b.n	8009ef4 <_fflush_r+0xc>
 8009f40:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <_fflush_r+0x70>)
 8009f42:	429c      	cmp	r4, r3
 8009f44:	d101      	bne.n	8009f4a <_fflush_r+0x62>
 8009f46:	68ac      	ldr	r4, [r5, #8]
 8009f48:	e7df      	b.n	8009f0a <_fflush_r+0x22>
 8009f4a:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <_fflush_r+0x74>)
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	bf08      	it	eq
 8009f50:	68ec      	ldreq	r4, [r5, #12]
 8009f52:	e7da      	b.n	8009f0a <_fflush_r+0x22>
 8009f54:	0800adb8 	.word	0x0800adb8
 8009f58:	0800add8 	.word	0x0800add8
 8009f5c:	0800ad98 	.word	0x0800ad98

08009f60 <_localeconv_r>:
 8009f60:	4800      	ldr	r0, [pc, #0]	; (8009f64 <_localeconv_r+0x4>)
 8009f62:	4770      	bx	lr
 8009f64:	20000164 	.word	0x20000164

08009f68 <_lseek_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d07      	ldr	r5, [pc, #28]	; (8009f88 <_lseek_r+0x20>)
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	4608      	mov	r0, r1
 8009f70:	4611      	mov	r1, r2
 8009f72:	2200      	movs	r2, #0
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f7f7 fad2 	bl	8001520 <_lseek>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_lseek_r+0x1e>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_lseek_r+0x1e>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	20005488 	.word	0x20005488

08009f8c <__swhatbuf_r>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	460e      	mov	r6, r1
 8009f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f94:	2900      	cmp	r1, #0
 8009f96:	b096      	sub	sp, #88	; 0x58
 8009f98:	4614      	mov	r4, r2
 8009f9a:	461d      	mov	r5, r3
 8009f9c:	da08      	bge.n	8009fb0 <__swhatbuf_r+0x24>
 8009f9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	061a      	lsls	r2, r3, #24
 8009fa8:	d410      	bmi.n	8009fcc <__swhatbuf_r+0x40>
 8009faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fae:	e00e      	b.n	8009fce <__swhatbuf_r+0x42>
 8009fb0:	466a      	mov	r2, sp
 8009fb2:	f000 fde7 	bl	800ab84 <_fstat_r>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	dbf1      	blt.n	8009f9e <__swhatbuf_r+0x12>
 8009fba:	9a01      	ldr	r2, [sp, #4]
 8009fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fc4:	425a      	negs	r2, r3
 8009fc6:	415a      	adcs	r2, r3
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	e7ee      	b.n	8009faa <__swhatbuf_r+0x1e>
 8009fcc:	2340      	movs	r3, #64	; 0x40
 8009fce:	2000      	movs	r0, #0
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	b016      	add	sp, #88	; 0x58
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fd8 <__smakebuf_r>:
 8009fd8:	898b      	ldrh	r3, [r1, #12]
 8009fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fdc:	079d      	lsls	r5, r3, #30
 8009fde:	4606      	mov	r6, r0
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	d507      	bpl.n	8009ff4 <__smakebuf_r+0x1c>
 8009fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	6123      	str	r3, [r4, #16]
 8009fec:	2301      	movs	r3, #1
 8009fee:	6163      	str	r3, [r4, #20]
 8009ff0:	b002      	add	sp, #8
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	ab01      	add	r3, sp, #4
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	f7ff ffc8 	bl	8009f8c <__swhatbuf_r>
 8009ffc:	9900      	ldr	r1, [sp, #0]
 8009ffe:	4605      	mov	r5, r0
 800a000:	4630      	mov	r0, r6
 800a002:	f7fe fa0d 	bl	8008420 <_malloc_r>
 800a006:	b948      	cbnz	r0, 800a01c <__smakebuf_r+0x44>
 800a008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00c:	059a      	lsls	r2, r3, #22
 800a00e:	d4ef      	bmi.n	8009ff0 <__smakebuf_r+0x18>
 800a010:	f023 0303 	bic.w	r3, r3, #3
 800a014:	f043 0302 	orr.w	r3, r3, #2
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	e7e3      	b.n	8009fe4 <__smakebuf_r+0xc>
 800a01c:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <__smakebuf_r+0x7c>)
 800a01e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	6020      	str	r0, [r4, #0]
 800a024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a028:	81a3      	strh	r3, [r4, #12]
 800a02a:	9b00      	ldr	r3, [sp, #0]
 800a02c:	6163      	str	r3, [r4, #20]
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	6120      	str	r0, [r4, #16]
 800a032:	b15b      	cbz	r3, 800a04c <__smakebuf_r+0x74>
 800a034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 fdb5 	bl	800aba8 <_isatty_r>
 800a03e:	b128      	cbz	r0, 800a04c <__smakebuf_r+0x74>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	89a0      	ldrh	r0, [r4, #12]
 800a04e:	4305      	orrs	r5, r0
 800a050:	81a5      	strh	r5, [r4, #12]
 800a052:	e7cd      	b.n	8009ff0 <__smakebuf_r+0x18>
 800a054:	080081c1 	.word	0x080081c1

0800a058 <malloc>:
 800a058:	4b02      	ldr	r3, [pc, #8]	; (800a064 <malloc+0xc>)
 800a05a:	4601      	mov	r1, r0
 800a05c:	6818      	ldr	r0, [r3, #0]
 800a05e:	f7fe b9df 	b.w	8008420 <_malloc_r>
 800a062:	bf00      	nop
 800a064:	20000010 	.word	0x20000010

0800a068 <__malloc_lock>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__malloc_lock+0x8>)
 800a06a:	f7fe b9a0 	b.w	80083ae <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	2000547c 	.word	0x2000547c

0800a074 <__malloc_unlock>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__malloc_unlock+0x8>)
 800a076:	f7fe b99b 	b.w	80083b0 <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	2000547c 	.word	0x2000547c

0800a080 <_Balloc>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a084:	4604      	mov	r4, r0
 800a086:	460d      	mov	r5, r1
 800a088:	b976      	cbnz	r6, 800a0a8 <_Balloc+0x28>
 800a08a:	2010      	movs	r0, #16
 800a08c:	f7ff ffe4 	bl	800a058 <malloc>
 800a090:	4602      	mov	r2, r0
 800a092:	6260      	str	r0, [r4, #36]	; 0x24
 800a094:	b920      	cbnz	r0, 800a0a0 <_Balloc+0x20>
 800a096:	4b18      	ldr	r3, [pc, #96]	; (800a0f8 <_Balloc+0x78>)
 800a098:	4818      	ldr	r0, [pc, #96]	; (800a0fc <_Balloc+0x7c>)
 800a09a:	2166      	movs	r1, #102	; 0x66
 800a09c:	f000 fd42 	bl	800ab24 <__assert_func>
 800a0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0a4:	6006      	str	r6, [r0, #0]
 800a0a6:	60c6      	str	r6, [r0, #12]
 800a0a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0aa:	68f3      	ldr	r3, [r6, #12]
 800a0ac:	b183      	cbz	r3, 800a0d0 <_Balloc+0x50>
 800a0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0b6:	b9b8      	cbnz	r0, 800a0e8 <_Balloc+0x68>
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a0be:	1d72      	adds	r2, r6, #5
 800a0c0:	0092      	lsls	r2, r2, #2
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 fb60 	bl	800a788 <_calloc_r>
 800a0c8:	b160      	cbz	r0, 800a0e4 <_Balloc+0x64>
 800a0ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0ce:	e00e      	b.n	800a0ee <_Balloc+0x6e>
 800a0d0:	2221      	movs	r2, #33	; 0x21
 800a0d2:	2104      	movs	r1, #4
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 fb57 	bl	800a788 <_calloc_r>
 800a0da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0dc:	60f0      	str	r0, [r6, #12]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e4      	bne.n	800a0ae <_Balloc+0x2e>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	6802      	ldr	r2, [r0, #0]
 800a0ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0f4:	e7f7      	b.n	800a0e6 <_Balloc+0x66>
 800a0f6:	bf00      	nop
 800a0f8:	0800ae3d 	.word	0x0800ae3d
 800a0fc:	0800aec0 	.word	0x0800aec0

0800a100 <_Bfree>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a104:	4605      	mov	r5, r0
 800a106:	460c      	mov	r4, r1
 800a108:	b976      	cbnz	r6, 800a128 <_Bfree+0x28>
 800a10a:	2010      	movs	r0, #16
 800a10c:	f7ff ffa4 	bl	800a058 <malloc>
 800a110:	4602      	mov	r2, r0
 800a112:	6268      	str	r0, [r5, #36]	; 0x24
 800a114:	b920      	cbnz	r0, 800a120 <_Bfree+0x20>
 800a116:	4b09      	ldr	r3, [pc, #36]	; (800a13c <_Bfree+0x3c>)
 800a118:	4809      	ldr	r0, [pc, #36]	; (800a140 <_Bfree+0x40>)
 800a11a:	218a      	movs	r1, #138	; 0x8a
 800a11c:	f000 fd02 	bl	800ab24 <__assert_func>
 800a120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a124:	6006      	str	r6, [r0, #0]
 800a126:	60c6      	str	r6, [r0, #12]
 800a128:	b13c      	cbz	r4, 800a13a <_Bfree+0x3a>
 800a12a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a12c:	6862      	ldr	r2, [r4, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a134:	6021      	str	r1, [r4, #0]
 800a136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	0800ae3d 	.word	0x0800ae3d
 800a140:	0800aec0 	.word	0x0800aec0

0800a144 <__multadd>:
 800a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a148:	690d      	ldr	r5, [r1, #16]
 800a14a:	4607      	mov	r7, r0
 800a14c:	460c      	mov	r4, r1
 800a14e:	461e      	mov	r6, r3
 800a150:	f101 0c14 	add.w	ip, r1, #20
 800a154:	2000      	movs	r0, #0
 800a156:	f8dc 3000 	ldr.w	r3, [ip]
 800a15a:	b299      	uxth	r1, r3
 800a15c:	fb02 6101 	mla	r1, r2, r1, r6
 800a160:	0c1e      	lsrs	r6, r3, #16
 800a162:	0c0b      	lsrs	r3, r1, #16
 800a164:	fb02 3306 	mla	r3, r2, r6, r3
 800a168:	b289      	uxth	r1, r1
 800a16a:	3001      	adds	r0, #1
 800a16c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a170:	4285      	cmp	r5, r0
 800a172:	f84c 1b04 	str.w	r1, [ip], #4
 800a176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a17a:	dcec      	bgt.n	800a156 <__multadd+0x12>
 800a17c:	b30e      	cbz	r6, 800a1c2 <__multadd+0x7e>
 800a17e:	68a3      	ldr	r3, [r4, #8]
 800a180:	42ab      	cmp	r3, r5
 800a182:	dc19      	bgt.n	800a1b8 <__multadd+0x74>
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	4638      	mov	r0, r7
 800a188:	3101      	adds	r1, #1
 800a18a:	f7ff ff79 	bl	800a080 <_Balloc>
 800a18e:	4680      	mov	r8, r0
 800a190:	b928      	cbnz	r0, 800a19e <__multadd+0x5a>
 800a192:	4602      	mov	r2, r0
 800a194:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <__multadd+0x84>)
 800a196:	480d      	ldr	r0, [pc, #52]	; (800a1cc <__multadd+0x88>)
 800a198:	21b5      	movs	r1, #181	; 0xb5
 800a19a:	f000 fcc3 	bl	800ab24 <__assert_func>
 800a19e:	6922      	ldr	r2, [r4, #16]
 800a1a0:	3202      	adds	r2, #2
 800a1a2:	f104 010c 	add.w	r1, r4, #12
 800a1a6:	0092      	lsls	r2, r2, #2
 800a1a8:	300c      	adds	r0, #12
 800a1aa:	f7fe f902 	bl	80083b2 <memcpy>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff ffa5 	bl	800a100 <_Bfree>
 800a1b6:	4644      	mov	r4, r8
 800a1b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1bc:	3501      	adds	r5, #1
 800a1be:	615e      	str	r6, [r3, #20]
 800a1c0:	6125      	str	r5, [r4, #16]
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c8:	0800aeaf 	.word	0x0800aeaf
 800a1cc:	0800aec0 	.word	0x0800aec0

0800a1d0 <__hi0bits>:
 800a1d0:	0c03      	lsrs	r3, r0, #16
 800a1d2:	041b      	lsls	r3, r3, #16
 800a1d4:	b9d3      	cbnz	r3, 800a20c <__hi0bits+0x3c>
 800a1d6:	0400      	lsls	r0, r0, #16
 800a1d8:	2310      	movs	r3, #16
 800a1da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1de:	bf04      	itt	eq
 800a1e0:	0200      	lsleq	r0, r0, #8
 800a1e2:	3308      	addeq	r3, #8
 800a1e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1e8:	bf04      	itt	eq
 800a1ea:	0100      	lsleq	r0, r0, #4
 800a1ec:	3304      	addeq	r3, #4
 800a1ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1f2:	bf04      	itt	eq
 800a1f4:	0080      	lsleq	r0, r0, #2
 800a1f6:	3302      	addeq	r3, #2
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	db05      	blt.n	800a208 <__hi0bits+0x38>
 800a1fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a200:	f103 0301 	add.w	r3, r3, #1
 800a204:	bf08      	it	eq
 800a206:	2320      	moveq	r3, #32
 800a208:	4618      	mov	r0, r3
 800a20a:	4770      	bx	lr
 800a20c:	2300      	movs	r3, #0
 800a20e:	e7e4      	b.n	800a1da <__hi0bits+0xa>

0800a210 <__lo0bits>:
 800a210:	6803      	ldr	r3, [r0, #0]
 800a212:	f013 0207 	ands.w	r2, r3, #7
 800a216:	4601      	mov	r1, r0
 800a218:	d00b      	beq.n	800a232 <__lo0bits+0x22>
 800a21a:	07da      	lsls	r2, r3, #31
 800a21c:	d423      	bmi.n	800a266 <__lo0bits+0x56>
 800a21e:	0798      	lsls	r0, r3, #30
 800a220:	bf49      	itett	mi
 800a222:	085b      	lsrmi	r3, r3, #1
 800a224:	089b      	lsrpl	r3, r3, #2
 800a226:	2001      	movmi	r0, #1
 800a228:	600b      	strmi	r3, [r1, #0]
 800a22a:	bf5c      	itt	pl
 800a22c:	600b      	strpl	r3, [r1, #0]
 800a22e:	2002      	movpl	r0, #2
 800a230:	4770      	bx	lr
 800a232:	b298      	uxth	r0, r3
 800a234:	b9a8      	cbnz	r0, 800a262 <__lo0bits+0x52>
 800a236:	0c1b      	lsrs	r3, r3, #16
 800a238:	2010      	movs	r0, #16
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	b90a      	cbnz	r2, 800a242 <__lo0bits+0x32>
 800a23e:	3008      	adds	r0, #8
 800a240:	0a1b      	lsrs	r3, r3, #8
 800a242:	071a      	lsls	r2, r3, #28
 800a244:	bf04      	itt	eq
 800a246:	091b      	lsreq	r3, r3, #4
 800a248:	3004      	addeq	r0, #4
 800a24a:	079a      	lsls	r2, r3, #30
 800a24c:	bf04      	itt	eq
 800a24e:	089b      	lsreq	r3, r3, #2
 800a250:	3002      	addeq	r0, #2
 800a252:	07da      	lsls	r2, r3, #31
 800a254:	d403      	bmi.n	800a25e <__lo0bits+0x4e>
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	f100 0001 	add.w	r0, r0, #1
 800a25c:	d005      	beq.n	800a26a <__lo0bits+0x5a>
 800a25e:	600b      	str	r3, [r1, #0]
 800a260:	4770      	bx	lr
 800a262:	4610      	mov	r0, r2
 800a264:	e7e9      	b.n	800a23a <__lo0bits+0x2a>
 800a266:	2000      	movs	r0, #0
 800a268:	4770      	bx	lr
 800a26a:	2020      	movs	r0, #32
 800a26c:	4770      	bx	lr
	...

0800a270 <__i2b>:
 800a270:	b510      	push	{r4, lr}
 800a272:	460c      	mov	r4, r1
 800a274:	2101      	movs	r1, #1
 800a276:	f7ff ff03 	bl	800a080 <_Balloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	b928      	cbnz	r0, 800a28a <__i2b+0x1a>
 800a27e:	4b05      	ldr	r3, [pc, #20]	; (800a294 <__i2b+0x24>)
 800a280:	4805      	ldr	r0, [pc, #20]	; (800a298 <__i2b+0x28>)
 800a282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a286:	f000 fc4d 	bl	800ab24 <__assert_func>
 800a28a:	2301      	movs	r3, #1
 800a28c:	6144      	str	r4, [r0, #20]
 800a28e:	6103      	str	r3, [r0, #16]
 800a290:	bd10      	pop	{r4, pc}
 800a292:	bf00      	nop
 800a294:	0800aeaf 	.word	0x0800aeaf
 800a298:	0800aec0 	.word	0x0800aec0

0800a29c <__multiply>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	4691      	mov	r9, r2
 800a2a2:	690a      	ldr	r2, [r1, #16]
 800a2a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	bfb8      	it	lt
 800a2ac:	460b      	movlt	r3, r1
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	bfbc      	itt	lt
 800a2b2:	464c      	movlt	r4, r9
 800a2b4:	4699      	movlt	r9, r3
 800a2b6:	6927      	ldr	r7, [r4, #16]
 800a2b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2bc:	68a3      	ldr	r3, [r4, #8]
 800a2be:	6861      	ldr	r1, [r4, #4]
 800a2c0:	eb07 060a 	add.w	r6, r7, sl
 800a2c4:	42b3      	cmp	r3, r6
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	bfb8      	it	lt
 800a2ca:	3101      	addlt	r1, #1
 800a2cc:	f7ff fed8 	bl	800a080 <_Balloc>
 800a2d0:	b930      	cbnz	r0, 800a2e0 <__multiply+0x44>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	4b44      	ldr	r3, [pc, #272]	; (800a3e8 <__multiply+0x14c>)
 800a2d6:	4845      	ldr	r0, [pc, #276]	; (800a3ec <__multiply+0x150>)
 800a2d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a2dc:	f000 fc22 	bl	800ab24 <__assert_func>
 800a2e0:	f100 0514 	add.w	r5, r0, #20
 800a2e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	d321      	bcc.n	800a334 <__multiply+0x98>
 800a2f0:	f104 0314 	add.w	r3, r4, #20
 800a2f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2f8:	f109 0314 	add.w	r3, r9, #20
 800a2fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	1b3a      	subs	r2, r7, r4
 800a304:	3a15      	subs	r2, #21
 800a306:	f022 0203 	bic.w	r2, r2, #3
 800a30a:	3204      	adds	r2, #4
 800a30c:	f104 0115 	add.w	r1, r4, #21
 800a310:	428f      	cmp	r7, r1
 800a312:	bf38      	it	cc
 800a314:	2204      	movcc	r2, #4
 800a316:	9201      	str	r2, [sp, #4]
 800a318:	9a02      	ldr	r2, [sp, #8]
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d80c      	bhi.n	800a33a <__multiply+0x9e>
 800a320:	2e00      	cmp	r6, #0
 800a322:	dd03      	ble.n	800a32c <__multiply+0x90>
 800a324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d05a      	beq.n	800a3e2 <__multiply+0x146>
 800a32c:	6106      	str	r6, [r0, #16]
 800a32e:	b005      	add	sp, #20
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	f843 2b04 	str.w	r2, [r3], #4
 800a338:	e7d8      	b.n	800a2ec <__multiply+0x50>
 800a33a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a33e:	f1ba 0f00 	cmp.w	sl, #0
 800a342:	d024      	beq.n	800a38e <__multiply+0xf2>
 800a344:	f104 0e14 	add.w	lr, r4, #20
 800a348:	46a9      	mov	r9, r5
 800a34a:	f04f 0c00 	mov.w	ip, #0
 800a34e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a352:	f8d9 1000 	ldr.w	r1, [r9]
 800a356:	fa1f fb82 	uxth.w	fp, r2
 800a35a:	b289      	uxth	r1, r1
 800a35c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a364:	f8d9 2000 	ldr.w	r2, [r9]
 800a368:	4461      	add	r1, ip
 800a36a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a36e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a376:	b289      	uxth	r1, r1
 800a378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a37c:	4577      	cmp	r7, lr
 800a37e:	f849 1b04 	str.w	r1, [r9], #4
 800a382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a386:	d8e2      	bhi.n	800a34e <__multiply+0xb2>
 800a388:	9a01      	ldr	r2, [sp, #4]
 800a38a:	f845 c002 	str.w	ip, [r5, r2]
 800a38e:	9a03      	ldr	r2, [sp, #12]
 800a390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a394:	3304      	adds	r3, #4
 800a396:	f1b9 0f00 	cmp.w	r9, #0
 800a39a:	d020      	beq.n	800a3de <__multiply+0x142>
 800a39c:	6829      	ldr	r1, [r5, #0]
 800a39e:	f104 0c14 	add.w	ip, r4, #20
 800a3a2:	46ae      	mov	lr, r5
 800a3a4:	f04f 0a00 	mov.w	sl, #0
 800a3a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a3ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a3b4:	4492      	add	sl, r2
 800a3b6:	b289      	uxth	r1, r1
 800a3b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a3bc:	f84e 1b04 	str.w	r1, [lr], #4
 800a3c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3c4:	f8be 1000 	ldrh.w	r1, [lr]
 800a3c8:	0c12      	lsrs	r2, r2, #16
 800a3ca:	fb09 1102 	mla	r1, r9, r2, r1
 800a3ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3d2:	4567      	cmp	r7, ip
 800a3d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3d8:	d8e6      	bhi.n	800a3a8 <__multiply+0x10c>
 800a3da:	9a01      	ldr	r2, [sp, #4]
 800a3dc:	50a9      	str	r1, [r5, r2]
 800a3de:	3504      	adds	r5, #4
 800a3e0:	e79a      	b.n	800a318 <__multiply+0x7c>
 800a3e2:	3e01      	subs	r6, #1
 800a3e4:	e79c      	b.n	800a320 <__multiply+0x84>
 800a3e6:	bf00      	nop
 800a3e8:	0800aeaf 	.word	0x0800aeaf
 800a3ec:	0800aec0 	.word	0x0800aec0

0800a3f0 <__pow5mult>:
 800a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	4615      	mov	r5, r2
 800a3f6:	f012 0203 	ands.w	r2, r2, #3
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	d007      	beq.n	800a410 <__pow5mult+0x20>
 800a400:	4c25      	ldr	r4, [pc, #148]	; (800a498 <__pow5mult+0xa8>)
 800a402:	3a01      	subs	r2, #1
 800a404:	2300      	movs	r3, #0
 800a406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a40a:	f7ff fe9b 	bl	800a144 <__multadd>
 800a40e:	4607      	mov	r7, r0
 800a410:	10ad      	asrs	r5, r5, #2
 800a412:	d03d      	beq.n	800a490 <__pow5mult+0xa0>
 800a414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a416:	b97c      	cbnz	r4, 800a438 <__pow5mult+0x48>
 800a418:	2010      	movs	r0, #16
 800a41a:	f7ff fe1d 	bl	800a058 <malloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	6270      	str	r0, [r6, #36]	; 0x24
 800a422:	b928      	cbnz	r0, 800a430 <__pow5mult+0x40>
 800a424:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <__pow5mult+0xac>)
 800a426:	481e      	ldr	r0, [pc, #120]	; (800a4a0 <__pow5mult+0xb0>)
 800a428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a42c:	f000 fb7a 	bl	800ab24 <__assert_func>
 800a430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a434:	6004      	str	r4, [r0, #0]
 800a436:	60c4      	str	r4, [r0, #12]
 800a438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a440:	b94c      	cbnz	r4, 800a456 <__pow5mult+0x66>
 800a442:	f240 2171 	movw	r1, #625	; 0x271
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff12 	bl	800a270 <__i2b>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a452:	4604      	mov	r4, r0
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	07eb      	lsls	r3, r5, #31
 800a45c:	d50a      	bpl.n	800a474 <__pow5mult+0x84>
 800a45e:	4639      	mov	r1, r7
 800a460:	4622      	mov	r2, r4
 800a462:	4630      	mov	r0, r6
 800a464:	f7ff ff1a 	bl	800a29c <__multiply>
 800a468:	4639      	mov	r1, r7
 800a46a:	4680      	mov	r8, r0
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7ff fe47 	bl	800a100 <_Bfree>
 800a472:	4647      	mov	r7, r8
 800a474:	106d      	asrs	r5, r5, #1
 800a476:	d00b      	beq.n	800a490 <__pow5mult+0xa0>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	b938      	cbnz	r0, 800a48c <__pow5mult+0x9c>
 800a47c:	4622      	mov	r2, r4
 800a47e:	4621      	mov	r1, r4
 800a480:	4630      	mov	r0, r6
 800a482:	f7ff ff0b 	bl	800a29c <__multiply>
 800a486:	6020      	str	r0, [r4, #0]
 800a488:	f8c0 9000 	str.w	r9, [r0]
 800a48c:	4604      	mov	r4, r0
 800a48e:	e7e4      	b.n	800a45a <__pow5mult+0x6a>
 800a490:	4638      	mov	r0, r7
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a496:	bf00      	nop
 800a498:	0800b010 	.word	0x0800b010
 800a49c:	0800ae3d 	.word	0x0800ae3d
 800a4a0:	0800aec0 	.word	0x0800aec0

0800a4a4 <__lshift>:
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	6849      	ldr	r1, [r1, #4]
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	4691      	mov	r9, r2
 800a4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4bc:	f108 0601 	add.w	r6, r8, #1
 800a4c0:	42b3      	cmp	r3, r6
 800a4c2:	db0b      	blt.n	800a4dc <__lshift+0x38>
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f7ff fddb 	bl	800a080 <_Balloc>
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	b948      	cbnz	r0, 800a4e2 <__lshift+0x3e>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	4b2a      	ldr	r3, [pc, #168]	; (800a57c <__lshift+0xd8>)
 800a4d2:	482b      	ldr	r0, [pc, #172]	; (800a580 <__lshift+0xdc>)
 800a4d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4d8:	f000 fb24 	bl	800ab24 <__assert_func>
 800a4dc:	3101      	adds	r1, #1
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	e7ee      	b.n	800a4c0 <__lshift+0x1c>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f100 0114 	add.w	r1, r0, #20
 800a4e8:	f100 0210 	add.w	r2, r0, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	4553      	cmp	r3, sl
 800a4f0:	db37      	blt.n	800a562 <__lshift+0xbe>
 800a4f2:	6920      	ldr	r0, [r4, #16]
 800a4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4f8:	f104 0314 	add.w	r3, r4, #20
 800a4fc:	f019 091f 	ands.w	r9, r9, #31
 800a500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a508:	d02f      	beq.n	800a56a <__lshift+0xc6>
 800a50a:	f1c9 0e20 	rsb	lr, r9, #32
 800a50e:	468a      	mov	sl, r1
 800a510:	f04f 0c00 	mov.w	ip, #0
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	fa02 f209 	lsl.w	r2, r2, r9
 800a51a:	ea42 020c 	orr.w	r2, r2, ip
 800a51e:	f84a 2b04 	str.w	r2, [sl], #4
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	4298      	cmp	r0, r3
 800a528:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a52c:	d8f2      	bhi.n	800a514 <__lshift+0x70>
 800a52e:	1b03      	subs	r3, r0, r4
 800a530:	3b15      	subs	r3, #21
 800a532:	f023 0303 	bic.w	r3, r3, #3
 800a536:	3304      	adds	r3, #4
 800a538:	f104 0215 	add.w	r2, r4, #21
 800a53c:	4290      	cmp	r0, r2
 800a53e:	bf38      	it	cc
 800a540:	2304      	movcc	r3, #4
 800a542:	f841 c003 	str.w	ip, [r1, r3]
 800a546:	f1bc 0f00 	cmp.w	ip, #0
 800a54a:	d001      	beq.n	800a550 <__lshift+0xac>
 800a54c:	f108 0602 	add.w	r6, r8, #2
 800a550:	3e01      	subs	r6, #1
 800a552:	4638      	mov	r0, r7
 800a554:	612e      	str	r6, [r5, #16]
 800a556:	4621      	mov	r1, r4
 800a558:	f7ff fdd2 	bl	800a100 <_Bfree>
 800a55c:	4628      	mov	r0, r5
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	f842 0f04 	str.w	r0, [r2, #4]!
 800a566:	3301      	adds	r3, #1
 800a568:	e7c1      	b.n	800a4ee <__lshift+0x4a>
 800a56a:	3904      	subs	r1, #4
 800a56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a570:	f841 2f04 	str.w	r2, [r1, #4]!
 800a574:	4298      	cmp	r0, r3
 800a576:	d8f9      	bhi.n	800a56c <__lshift+0xc8>
 800a578:	e7ea      	b.n	800a550 <__lshift+0xac>
 800a57a:	bf00      	nop
 800a57c:	0800aeaf 	.word	0x0800aeaf
 800a580:	0800aec0 	.word	0x0800aec0

0800a584 <__mcmp>:
 800a584:	b530      	push	{r4, r5, lr}
 800a586:	6902      	ldr	r2, [r0, #16]
 800a588:	690c      	ldr	r4, [r1, #16]
 800a58a:	1b12      	subs	r2, r2, r4
 800a58c:	d10e      	bne.n	800a5ac <__mcmp+0x28>
 800a58e:	f100 0314 	add.w	r3, r0, #20
 800a592:	3114      	adds	r1, #20
 800a594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a59c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5a4:	42a5      	cmp	r5, r4
 800a5a6:	d003      	beq.n	800a5b0 <__mcmp+0x2c>
 800a5a8:	d305      	bcc.n	800a5b6 <__mcmp+0x32>
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	bd30      	pop	{r4, r5, pc}
 800a5b0:	4283      	cmp	r3, r0
 800a5b2:	d3f3      	bcc.n	800a59c <__mcmp+0x18>
 800a5b4:	e7fa      	b.n	800a5ac <__mcmp+0x28>
 800a5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ba:	e7f7      	b.n	800a5ac <__mcmp+0x28>

0800a5bc <__mdiff>:
 800a5bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	f7ff ffdb 	bl	800a584 <__mcmp>
 800a5ce:	1e05      	subs	r5, r0, #0
 800a5d0:	d110      	bne.n	800a5f4 <__mdiff+0x38>
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff fd53 	bl	800a080 <_Balloc>
 800a5da:	b930      	cbnz	r0, 800a5ea <__mdiff+0x2e>
 800a5dc:	4b3a      	ldr	r3, [pc, #232]	; (800a6c8 <__mdiff+0x10c>)
 800a5de:	4602      	mov	r2, r0
 800a5e0:	f240 2132 	movw	r1, #562	; 0x232
 800a5e4:	4839      	ldr	r0, [pc, #228]	; (800a6cc <__mdiff+0x110>)
 800a5e6:	f000 fa9d 	bl	800ab24 <__assert_func>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f4:	bfa4      	itt	ge
 800a5f6:	4643      	movge	r3, r8
 800a5f8:	46a0      	movge	r8, r4
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a600:	bfa6      	itte	ge
 800a602:	461c      	movge	r4, r3
 800a604:	2500      	movge	r5, #0
 800a606:	2501      	movlt	r5, #1
 800a608:	f7ff fd3a 	bl	800a080 <_Balloc>
 800a60c:	b920      	cbnz	r0, 800a618 <__mdiff+0x5c>
 800a60e:	4b2e      	ldr	r3, [pc, #184]	; (800a6c8 <__mdiff+0x10c>)
 800a610:	4602      	mov	r2, r0
 800a612:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a616:	e7e5      	b.n	800a5e4 <__mdiff+0x28>
 800a618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a61c:	6926      	ldr	r6, [r4, #16]
 800a61e:	60c5      	str	r5, [r0, #12]
 800a620:	f104 0914 	add.w	r9, r4, #20
 800a624:	f108 0514 	add.w	r5, r8, #20
 800a628:	f100 0e14 	add.w	lr, r0, #20
 800a62c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a634:	f108 0210 	add.w	r2, r8, #16
 800a638:	46f2      	mov	sl, lr
 800a63a:	2100      	movs	r1, #0
 800a63c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a644:	fa1f f883 	uxth.w	r8, r3
 800a648:	fa11 f18b 	uxtah	r1, r1, fp
 800a64c:	0c1b      	lsrs	r3, r3, #16
 800a64e:	eba1 0808 	sub.w	r8, r1, r8
 800a652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a65a:	fa1f f888 	uxth.w	r8, r8
 800a65e:	1419      	asrs	r1, r3, #16
 800a660:	454e      	cmp	r6, r9
 800a662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a666:	f84a 3b04 	str.w	r3, [sl], #4
 800a66a:	d8e7      	bhi.n	800a63c <__mdiff+0x80>
 800a66c:	1b33      	subs	r3, r6, r4
 800a66e:	3b15      	subs	r3, #21
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	3304      	adds	r3, #4
 800a676:	3415      	adds	r4, #21
 800a678:	42a6      	cmp	r6, r4
 800a67a:	bf38      	it	cc
 800a67c:	2304      	movcc	r3, #4
 800a67e:	441d      	add	r5, r3
 800a680:	4473      	add	r3, lr
 800a682:	469e      	mov	lr, r3
 800a684:	462e      	mov	r6, r5
 800a686:	4566      	cmp	r6, ip
 800a688:	d30e      	bcc.n	800a6a8 <__mdiff+0xec>
 800a68a:	f10c 0203 	add.w	r2, ip, #3
 800a68e:	1b52      	subs	r2, r2, r5
 800a690:	f022 0203 	bic.w	r2, r2, #3
 800a694:	3d03      	subs	r5, #3
 800a696:	45ac      	cmp	ip, r5
 800a698:	bf38      	it	cc
 800a69a:	2200      	movcc	r2, #0
 800a69c:	441a      	add	r2, r3
 800a69e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6a2:	b17b      	cbz	r3, 800a6c4 <__mdiff+0x108>
 800a6a4:	6107      	str	r7, [r0, #16]
 800a6a6:	e7a3      	b.n	800a5f0 <__mdiff+0x34>
 800a6a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6ac:	fa11 f288 	uxtah	r2, r1, r8
 800a6b0:	1414      	asrs	r4, r2, #16
 800a6b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6b6:	b292      	uxth	r2, r2
 800a6b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6bc:	f84e 2b04 	str.w	r2, [lr], #4
 800a6c0:	1421      	asrs	r1, r4, #16
 800a6c2:	e7e0      	b.n	800a686 <__mdiff+0xca>
 800a6c4:	3f01      	subs	r7, #1
 800a6c6:	e7ea      	b.n	800a69e <__mdiff+0xe2>
 800a6c8:	0800aeaf 	.word	0x0800aeaf
 800a6cc:	0800aec0 	.word	0x0800aec0

0800a6d0 <__d2b>:
 800a6d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6d4:	4689      	mov	r9, r1
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	ec57 6b10 	vmov	r6, r7, d0
 800a6dc:	4690      	mov	r8, r2
 800a6de:	f7ff fccf 	bl	800a080 <_Balloc>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	b930      	cbnz	r0, 800a6f4 <__d2b+0x24>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <__d2b+0xb0>)
 800a6ea:	4826      	ldr	r0, [pc, #152]	; (800a784 <__d2b+0xb4>)
 800a6ec:	f240 310a 	movw	r1, #778	; 0x30a
 800a6f0:	f000 fa18 	bl	800ab24 <__assert_func>
 800a6f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a6f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6fc:	bb35      	cbnz	r5, 800a74c <__d2b+0x7c>
 800a6fe:	2e00      	cmp	r6, #0
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	d028      	beq.n	800a756 <__d2b+0x86>
 800a704:	4668      	mov	r0, sp
 800a706:	9600      	str	r6, [sp, #0]
 800a708:	f7ff fd82 	bl	800a210 <__lo0bits>
 800a70c:	9900      	ldr	r1, [sp, #0]
 800a70e:	b300      	cbz	r0, 800a752 <__d2b+0x82>
 800a710:	9a01      	ldr	r2, [sp, #4]
 800a712:	f1c0 0320 	rsb	r3, r0, #32
 800a716:	fa02 f303 	lsl.w	r3, r2, r3
 800a71a:	430b      	orrs	r3, r1
 800a71c:	40c2      	lsrs	r2, r0
 800a71e:	6163      	str	r3, [r4, #20]
 800a720:	9201      	str	r2, [sp, #4]
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	61a3      	str	r3, [r4, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	bf14      	ite	ne
 800a72a:	2202      	movne	r2, #2
 800a72c:	2201      	moveq	r2, #1
 800a72e:	6122      	str	r2, [r4, #16]
 800a730:	b1d5      	cbz	r5, 800a768 <__d2b+0x98>
 800a732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a736:	4405      	add	r5, r0
 800a738:	f8c9 5000 	str.w	r5, [r9]
 800a73c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a740:	f8c8 0000 	str.w	r0, [r8]
 800a744:	4620      	mov	r0, r4
 800a746:	b003      	add	sp, #12
 800a748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a74c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a750:	e7d5      	b.n	800a6fe <__d2b+0x2e>
 800a752:	6161      	str	r1, [r4, #20]
 800a754:	e7e5      	b.n	800a722 <__d2b+0x52>
 800a756:	a801      	add	r0, sp, #4
 800a758:	f7ff fd5a 	bl	800a210 <__lo0bits>
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	6163      	str	r3, [r4, #20]
 800a760:	2201      	movs	r2, #1
 800a762:	6122      	str	r2, [r4, #16]
 800a764:	3020      	adds	r0, #32
 800a766:	e7e3      	b.n	800a730 <__d2b+0x60>
 800a768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a76c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a770:	f8c9 0000 	str.w	r0, [r9]
 800a774:	6918      	ldr	r0, [r3, #16]
 800a776:	f7ff fd2b 	bl	800a1d0 <__hi0bits>
 800a77a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a77e:	e7df      	b.n	800a740 <__d2b+0x70>
 800a780:	0800aeaf 	.word	0x0800aeaf
 800a784:	0800aec0 	.word	0x0800aec0

0800a788 <_calloc_r>:
 800a788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a78a:	fba1 2402 	umull	r2, r4, r1, r2
 800a78e:	b94c      	cbnz	r4, 800a7a4 <_calloc_r+0x1c>
 800a790:	4611      	mov	r1, r2
 800a792:	9201      	str	r2, [sp, #4]
 800a794:	f7fd fe44 	bl	8008420 <_malloc_r>
 800a798:	9a01      	ldr	r2, [sp, #4]
 800a79a:	4605      	mov	r5, r0
 800a79c:	b930      	cbnz	r0, 800a7ac <_calloc_r+0x24>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	b003      	add	sp, #12
 800a7a2:	bd30      	pop	{r4, r5, pc}
 800a7a4:	220c      	movs	r2, #12
 800a7a6:	6002      	str	r2, [r0, #0]
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	e7f8      	b.n	800a79e <_calloc_r+0x16>
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f7fd fe0e 	bl	80083ce <memset>
 800a7b2:	e7f4      	b.n	800a79e <_calloc_r+0x16>

0800a7b4 <_free_r>:
 800a7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d044      	beq.n	800a844 <_free_r+0x90>
 800a7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7be:	9001      	str	r0, [sp, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7c6:	bfb8      	it	lt
 800a7c8:	18e4      	addlt	r4, r4, r3
 800a7ca:	f7ff fc4d 	bl	800a068 <__malloc_lock>
 800a7ce:	4a1e      	ldr	r2, [pc, #120]	; (800a848 <_free_r+0x94>)
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	6813      	ldr	r3, [r2, #0]
 800a7d4:	b933      	cbnz	r3, 800a7e4 <_free_r+0x30>
 800a7d6:	6063      	str	r3, [r4, #4]
 800a7d8:	6014      	str	r4, [r2, #0]
 800a7da:	b003      	add	sp, #12
 800a7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7e0:	f7ff bc48 	b.w	800a074 <__malloc_unlock>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d908      	bls.n	800a7fa <_free_r+0x46>
 800a7e8:	6825      	ldr	r5, [r4, #0]
 800a7ea:	1961      	adds	r1, r4, r5
 800a7ec:	428b      	cmp	r3, r1
 800a7ee:	bf01      	itttt	eq
 800a7f0:	6819      	ldreq	r1, [r3, #0]
 800a7f2:	685b      	ldreq	r3, [r3, #4]
 800a7f4:	1949      	addeq	r1, r1, r5
 800a7f6:	6021      	streq	r1, [r4, #0]
 800a7f8:	e7ed      	b.n	800a7d6 <_free_r+0x22>
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	b10b      	cbz	r3, 800a804 <_free_r+0x50>
 800a800:	42a3      	cmp	r3, r4
 800a802:	d9fa      	bls.n	800a7fa <_free_r+0x46>
 800a804:	6811      	ldr	r1, [r2, #0]
 800a806:	1855      	adds	r5, r2, r1
 800a808:	42a5      	cmp	r5, r4
 800a80a:	d10b      	bne.n	800a824 <_free_r+0x70>
 800a80c:	6824      	ldr	r4, [r4, #0]
 800a80e:	4421      	add	r1, r4
 800a810:	1854      	adds	r4, r2, r1
 800a812:	42a3      	cmp	r3, r4
 800a814:	6011      	str	r1, [r2, #0]
 800a816:	d1e0      	bne.n	800a7da <_free_r+0x26>
 800a818:	681c      	ldr	r4, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	6053      	str	r3, [r2, #4]
 800a81e:	4421      	add	r1, r4
 800a820:	6011      	str	r1, [r2, #0]
 800a822:	e7da      	b.n	800a7da <_free_r+0x26>
 800a824:	d902      	bls.n	800a82c <_free_r+0x78>
 800a826:	230c      	movs	r3, #12
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	e7d6      	b.n	800a7da <_free_r+0x26>
 800a82c:	6825      	ldr	r5, [r4, #0]
 800a82e:	1961      	adds	r1, r4, r5
 800a830:	428b      	cmp	r3, r1
 800a832:	bf04      	itt	eq
 800a834:	6819      	ldreq	r1, [r3, #0]
 800a836:	685b      	ldreq	r3, [r3, #4]
 800a838:	6063      	str	r3, [r4, #4]
 800a83a:	bf04      	itt	eq
 800a83c:	1949      	addeq	r1, r1, r5
 800a83e:	6021      	streq	r1, [r4, #0]
 800a840:	6054      	str	r4, [r2, #4]
 800a842:	e7ca      	b.n	800a7da <_free_r+0x26>
 800a844:	b003      	add	sp, #12
 800a846:	bd30      	pop	{r4, r5, pc}
 800a848:	20005480 	.word	0x20005480

0800a84c <__sfputc_r>:
 800a84c:	6893      	ldr	r3, [r2, #8]
 800a84e:	3b01      	subs	r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	b410      	push	{r4}
 800a854:	6093      	str	r3, [r2, #8]
 800a856:	da08      	bge.n	800a86a <__sfputc_r+0x1e>
 800a858:	6994      	ldr	r4, [r2, #24]
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	db01      	blt.n	800a862 <__sfputc_r+0x16>
 800a85e:	290a      	cmp	r1, #10
 800a860:	d103      	bne.n	800a86a <__sfputc_r+0x1e>
 800a862:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a866:	f7fe bbdd 	b.w	8009024 <__swbuf_r>
 800a86a:	6813      	ldr	r3, [r2, #0]
 800a86c:	1c58      	adds	r0, r3, #1
 800a86e:	6010      	str	r0, [r2, #0]
 800a870:	7019      	strb	r1, [r3, #0]
 800a872:	4608      	mov	r0, r1
 800a874:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <__sfputs_r>:
 800a87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87c:	4606      	mov	r6, r0
 800a87e:	460f      	mov	r7, r1
 800a880:	4614      	mov	r4, r2
 800a882:	18d5      	adds	r5, r2, r3
 800a884:	42ac      	cmp	r4, r5
 800a886:	d101      	bne.n	800a88c <__sfputs_r+0x12>
 800a888:	2000      	movs	r0, #0
 800a88a:	e007      	b.n	800a89c <__sfputs_r+0x22>
 800a88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a890:	463a      	mov	r2, r7
 800a892:	4630      	mov	r0, r6
 800a894:	f7ff ffda 	bl	800a84c <__sfputc_r>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d1f3      	bne.n	800a884 <__sfputs_r+0xa>
 800a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a0 <_vfiprintf_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	b09d      	sub	sp, #116	; 0x74
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	4698      	mov	r8, r3
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	b118      	cbz	r0, 800a8b8 <_vfiprintf_r+0x18>
 800a8b0:	6983      	ldr	r3, [r0, #24]
 800a8b2:	b90b      	cbnz	r3, 800a8b8 <_vfiprintf_r+0x18>
 800a8b4:	f7fd fcb8 	bl	8008228 <__sinit>
 800a8b8:	4b89      	ldr	r3, [pc, #548]	; (800aae0 <_vfiprintf_r+0x240>)
 800a8ba:	429d      	cmp	r5, r3
 800a8bc:	d11b      	bne.n	800a8f6 <_vfiprintf_r+0x56>
 800a8be:	6875      	ldr	r5, [r6, #4]
 800a8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c2:	07d9      	lsls	r1, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_vfiprintf_r+0x32>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_vfiprintf_r+0x32>
 800a8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ce:	f7fd fd6e 	bl	80083ae <__retarget_lock_acquire_recursive>
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	071b      	lsls	r3, r3, #28
 800a8d6:	d501      	bpl.n	800a8dc <_vfiprintf_r+0x3c>
 800a8d8:	692b      	ldr	r3, [r5, #16]
 800a8da:	b9eb      	cbnz	r3, 800a918 <_vfiprintf_r+0x78>
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7fe fc04 	bl	80090ec <__swsetup_r>
 800a8e4:	b1c0      	cbz	r0, 800a918 <_vfiprintf_r+0x78>
 800a8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e8:	07dc      	lsls	r4, r3, #31
 800a8ea:	d50e      	bpl.n	800a90a <_vfiprintf_r+0x6a>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	b01d      	add	sp, #116	; 0x74
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	4b7b      	ldr	r3, [pc, #492]	; (800aae4 <_vfiprintf_r+0x244>)
 800a8f8:	429d      	cmp	r5, r3
 800a8fa:	d101      	bne.n	800a900 <_vfiprintf_r+0x60>
 800a8fc:	68b5      	ldr	r5, [r6, #8]
 800a8fe:	e7df      	b.n	800a8c0 <_vfiprintf_r+0x20>
 800a900:	4b79      	ldr	r3, [pc, #484]	; (800aae8 <_vfiprintf_r+0x248>)
 800a902:	429d      	cmp	r5, r3
 800a904:	bf08      	it	eq
 800a906:	68f5      	ldreq	r5, [r6, #12]
 800a908:	e7da      	b.n	800a8c0 <_vfiprintf_r+0x20>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	0598      	lsls	r0, r3, #22
 800a90e:	d4ed      	bmi.n	800a8ec <_vfiprintf_r+0x4c>
 800a910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a912:	f7fd fd4d 	bl	80083b0 <__retarget_lock_release_recursive>
 800a916:	e7e9      	b.n	800a8ec <_vfiprintf_r+0x4c>
 800a918:	2300      	movs	r3, #0
 800a91a:	9309      	str	r3, [sp, #36]	; 0x24
 800a91c:	2320      	movs	r3, #32
 800a91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a922:	f8cd 800c 	str.w	r8, [sp, #12]
 800a926:	2330      	movs	r3, #48	; 0x30
 800a928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aaec <_vfiprintf_r+0x24c>
 800a92c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a930:	f04f 0901 	mov.w	r9, #1
 800a934:	4623      	mov	r3, r4
 800a936:	469a      	mov	sl, r3
 800a938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a93c:	b10a      	cbz	r2, 800a942 <_vfiprintf_r+0xa2>
 800a93e:	2a25      	cmp	r2, #37	; 0x25
 800a940:	d1f9      	bne.n	800a936 <_vfiprintf_r+0x96>
 800a942:	ebba 0b04 	subs.w	fp, sl, r4
 800a946:	d00b      	beq.n	800a960 <_vfiprintf_r+0xc0>
 800a948:	465b      	mov	r3, fp
 800a94a:	4622      	mov	r2, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f7ff ff93 	bl	800a87a <__sfputs_r>
 800a954:	3001      	adds	r0, #1
 800a956:	f000 80aa 	beq.w	800aaae <_vfiprintf_r+0x20e>
 800a95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95c:	445a      	add	r2, fp
 800a95e:	9209      	str	r2, [sp, #36]	; 0x24
 800a960:	f89a 3000 	ldrb.w	r3, [sl]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80a2 	beq.w	800aaae <_vfiprintf_r+0x20e>
 800a96a:	2300      	movs	r3, #0
 800a96c:	f04f 32ff 	mov.w	r2, #4294967295
 800a970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a974:	f10a 0a01 	add.w	sl, sl, #1
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a980:	931a      	str	r3, [sp, #104]	; 0x68
 800a982:	4654      	mov	r4, sl
 800a984:	2205      	movs	r2, #5
 800a986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98a:	4858      	ldr	r0, [pc, #352]	; (800aaec <_vfiprintf_r+0x24c>)
 800a98c:	f7f5 fc60 	bl	8000250 <memchr>
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	b9d8      	cbnz	r0, 800a9cc <_vfiprintf_r+0x12c>
 800a994:	06d1      	lsls	r1, r2, #27
 800a996:	bf44      	itt	mi
 800a998:	2320      	movmi	r3, #32
 800a99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a99e:	0713      	lsls	r3, r2, #28
 800a9a0:	bf44      	itt	mi
 800a9a2:	232b      	movmi	r3, #43	; 0x2b
 800a9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ae:	d015      	beq.n	800a9dc <_vfiprintf_r+0x13c>
 800a9b0:	9a07      	ldr	r2, [sp, #28]
 800a9b2:	4654      	mov	r4, sl
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f04f 0c0a 	mov.w	ip, #10
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c0:	3b30      	subs	r3, #48	; 0x30
 800a9c2:	2b09      	cmp	r3, #9
 800a9c4:	d94e      	bls.n	800aa64 <_vfiprintf_r+0x1c4>
 800a9c6:	b1b0      	cbz	r0, 800a9f6 <_vfiprintf_r+0x156>
 800a9c8:	9207      	str	r2, [sp, #28]
 800a9ca:	e014      	b.n	800a9f6 <_vfiprintf_r+0x156>
 800a9cc:	eba0 0308 	sub.w	r3, r0, r8
 800a9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	46a2      	mov	sl, r4
 800a9da:	e7d2      	b.n	800a982 <_vfiprintf_r+0xe2>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1d19      	adds	r1, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	9103      	str	r1, [sp, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfbb      	ittet	lt
 800a9e8:	425b      	neglt	r3, r3
 800a9ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ee:	9307      	strge	r3, [sp, #28]
 800a9f0:	9307      	strlt	r3, [sp, #28]
 800a9f2:	bfb8      	it	lt
 800a9f4:	9204      	strlt	r2, [sp, #16]
 800a9f6:	7823      	ldrb	r3, [r4, #0]
 800a9f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fa:	d10c      	bne.n	800aa16 <_vfiprintf_r+0x176>
 800a9fc:	7863      	ldrb	r3, [r4, #1]
 800a9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800aa00:	d135      	bne.n	800aa6e <_vfiprintf_r+0x1ce>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	1d1a      	adds	r2, r3, #4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	9203      	str	r2, [sp, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	bfb8      	it	lt
 800aa0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa12:	3402      	adds	r4, #2
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aafc <_vfiprintf_r+0x25c>
 800aa1a:	7821      	ldrb	r1, [r4, #0]
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	4650      	mov	r0, sl
 800aa20:	f7f5 fc16 	bl	8000250 <memchr>
 800aa24:	b140      	cbz	r0, 800aa38 <_vfiprintf_r+0x198>
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	eba0 000a 	sub.w	r0, r0, sl
 800aa2c:	fa03 f000 	lsl.w	r0, r3, r0
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	4303      	orrs	r3, r0
 800aa34:	3401      	adds	r4, #1
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3c:	482c      	ldr	r0, [pc, #176]	; (800aaf0 <_vfiprintf_r+0x250>)
 800aa3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa42:	2206      	movs	r2, #6
 800aa44:	f7f5 fc04 	bl	8000250 <memchr>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d03f      	beq.n	800aacc <_vfiprintf_r+0x22c>
 800aa4c:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <_vfiprintf_r+0x254>)
 800aa4e:	bb1b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x1f8>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	3307      	adds	r3, #7
 800aa54:	f023 0307 	bic.w	r3, r3, #7
 800aa58:	3308      	adds	r3, #8
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	443b      	add	r3, r7
 800aa60:	9309      	str	r3, [sp, #36]	; 0x24
 800aa62:	e767      	b.n	800a934 <_vfiprintf_r+0x94>
 800aa64:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa68:	460c      	mov	r4, r1
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	e7a5      	b.n	800a9ba <_vfiprintf_r+0x11a>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	3401      	adds	r4, #1
 800aa72:	9305      	str	r3, [sp, #20]
 800aa74:	4619      	mov	r1, r3
 800aa76:	f04f 0c0a 	mov.w	ip, #10
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa80:	3a30      	subs	r2, #48	; 0x30
 800aa82:	2a09      	cmp	r2, #9
 800aa84:	d903      	bls.n	800aa8e <_vfiprintf_r+0x1ee>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0c5      	beq.n	800aa16 <_vfiprintf_r+0x176>
 800aa8a:	9105      	str	r1, [sp, #20]
 800aa8c:	e7c3      	b.n	800aa16 <_vfiprintf_r+0x176>
 800aa8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa92:	4604      	mov	r4, r0
 800aa94:	2301      	movs	r3, #1
 800aa96:	e7f0      	b.n	800aa7a <_vfiprintf_r+0x1da>
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <_vfiprintf_r+0x258>)
 800aaa0:	a904      	add	r1, sp, #16
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7fd fdc0 	bl	8008628 <_printf_float>
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	1c78      	adds	r0, r7, #1
 800aaac:	d1d6      	bne.n	800aa5c <_vfiprintf_r+0x1bc>
 800aaae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab0:	07d9      	lsls	r1, r3, #31
 800aab2:	d405      	bmi.n	800aac0 <_vfiprintf_r+0x220>
 800aab4:	89ab      	ldrh	r3, [r5, #12]
 800aab6:	059a      	lsls	r2, r3, #22
 800aab8:	d402      	bmi.n	800aac0 <_vfiprintf_r+0x220>
 800aaba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aabc:	f7fd fc78 	bl	80083b0 <__retarget_lock_release_recursive>
 800aac0:	89ab      	ldrh	r3, [r5, #12]
 800aac2:	065b      	lsls	r3, r3, #25
 800aac4:	f53f af12 	bmi.w	800a8ec <_vfiprintf_r+0x4c>
 800aac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaca:	e711      	b.n	800a8f0 <_vfiprintf_r+0x50>
 800aacc:	ab03      	add	r3, sp, #12
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	462a      	mov	r2, r5
 800aad2:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <_vfiprintf_r+0x258>)
 800aad4:	a904      	add	r1, sp, #16
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7fe f832 	bl	8008b40 <_printf_i>
 800aadc:	e7e4      	b.n	800aaa8 <_vfiprintf_r+0x208>
 800aade:	bf00      	nop
 800aae0:	0800adb8 	.word	0x0800adb8
 800aae4:	0800add8 	.word	0x0800add8
 800aae8:	0800ad98 	.word	0x0800ad98
 800aaec:	0800b01c 	.word	0x0800b01c
 800aaf0:	0800b026 	.word	0x0800b026
 800aaf4:	08008629 	.word	0x08008629
 800aaf8:	0800a87b 	.word	0x0800a87b
 800aafc:	0800b022 	.word	0x0800b022

0800ab00 <_read_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	; (800ab20 <_read_r+0x20>)
 800ab04:	4604      	mov	r4, r0
 800ab06:	4608      	mov	r0, r1
 800ab08:	4611      	mov	r1, r2
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	602a      	str	r2, [r5, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f7f6 fca6 	bl	8001460 <_read>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d102      	bne.n	800ab1e <_read_r+0x1e>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b103      	cbz	r3, 800ab1e <_read_r+0x1e>
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	20005488 	.word	0x20005488

0800ab24 <__assert_func>:
 800ab24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab26:	4614      	mov	r4, r2
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <__assert_func+0x2c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	68d8      	ldr	r0, [r3, #12]
 800ab32:	b14c      	cbz	r4, 800ab48 <__assert_func+0x24>
 800ab34:	4b07      	ldr	r3, [pc, #28]	; (800ab54 <__assert_func+0x30>)
 800ab36:	9100      	str	r1, [sp, #0]
 800ab38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab3c:	4906      	ldr	r1, [pc, #24]	; (800ab58 <__assert_func+0x34>)
 800ab3e:	462b      	mov	r3, r5
 800ab40:	f000 f80e 	bl	800ab60 <fiprintf>
 800ab44:	f000 f85f 	bl	800ac06 <abort>
 800ab48:	4b04      	ldr	r3, [pc, #16]	; (800ab5c <__assert_func+0x38>)
 800ab4a:	461c      	mov	r4, r3
 800ab4c:	e7f3      	b.n	800ab36 <__assert_func+0x12>
 800ab4e:	bf00      	nop
 800ab50:	20000010 	.word	0x20000010
 800ab54:	0800b02d 	.word	0x0800b02d
 800ab58:	0800b03a 	.word	0x0800b03a
 800ab5c:	0800b068 	.word	0x0800b068

0800ab60 <fiprintf>:
 800ab60:	b40e      	push	{r1, r2, r3}
 800ab62:	b503      	push	{r0, r1, lr}
 800ab64:	4601      	mov	r1, r0
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	4805      	ldr	r0, [pc, #20]	; (800ab80 <fiprintf+0x20>)
 800ab6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab6e:	6800      	ldr	r0, [r0, #0]
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	f7ff fe95 	bl	800a8a0 <_vfiprintf_r>
 800ab76:	b002      	add	sp, #8
 800ab78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab7c:	b003      	add	sp, #12
 800ab7e:	4770      	bx	lr
 800ab80:	20000010 	.word	0x20000010

0800ab84 <_fstat_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d07      	ldr	r5, [pc, #28]	; (800aba4 <_fstat_r+0x20>)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	f7f6 fcaa 	bl	80014ea <_fstat>
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	d102      	bne.n	800aba0 <_fstat_r+0x1c>
 800ab9a:	682b      	ldr	r3, [r5, #0]
 800ab9c:	b103      	cbz	r3, 800aba0 <_fstat_r+0x1c>
 800ab9e:	6023      	str	r3, [r4, #0]
 800aba0:	bd38      	pop	{r3, r4, r5, pc}
 800aba2:	bf00      	nop
 800aba4:	20005488 	.word	0x20005488

0800aba8 <_isatty_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d06      	ldr	r5, [pc, #24]	; (800abc4 <_isatty_r+0x1c>)
 800abac:	2300      	movs	r3, #0
 800abae:	4604      	mov	r4, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	f7f6 fca9 	bl	800150a <_isatty>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_isatty_r+0x1a>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_isatty_r+0x1a>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20005488 	.word	0x20005488

0800abc8 <__ascii_mbtowc>:
 800abc8:	b082      	sub	sp, #8
 800abca:	b901      	cbnz	r1, 800abce <__ascii_mbtowc+0x6>
 800abcc:	a901      	add	r1, sp, #4
 800abce:	b142      	cbz	r2, 800abe2 <__ascii_mbtowc+0x1a>
 800abd0:	b14b      	cbz	r3, 800abe6 <__ascii_mbtowc+0x1e>
 800abd2:	7813      	ldrb	r3, [r2, #0]
 800abd4:	600b      	str	r3, [r1, #0]
 800abd6:	7812      	ldrb	r2, [r2, #0]
 800abd8:	1e10      	subs	r0, r2, #0
 800abda:	bf18      	it	ne
 800abdc:	2001      	movne	r0, #1
 800abde:	b002      	add	sp, #8
 800abe0:	4770      	bx	lr
 800abe2:	4610      	mov	r0, r2
 800abe4:	e7fb      	b.n	800abde <__ascii_mbtowc+0x16>
 800abe6:	f06f 0001 	mvn.w	r0, #1
 800abea:	e7f8      	b.n	800abde <__ascii_mbtowc+0x16>

0800abec <__ascii_wctomb>:
 800abec:	b149      	cbz	r1, 800ac02 <__ascii_wctomb+0x16>
 800abee:	2aff      	cmp	r2, #255	; 0xff
 800abf0:	bf85      	ittet	hi
 800abf2:	238a      	movhi	r3, #138	; 0x8a
 800abf4:	6003      	strhi	r3, [r0, #0]
 800abf6:	700a      	strbls	r2, [r1, #0]
 800abf8:	f04f 30ff 	movhi.w	r0, #4294967295
 800abfc:	bf98      	it	ls
 800abfe:	2001      	movls	r0, #1
 800ac00:	4770      	bx	lr
 800ac02:	4608      	mov	r0, r1
 800ac04:	4770      	bx	lr

0800ac06 <abort>:
 800ac06:	b508      	push	{r3, lr}
 800ac08:	2006      	movs	r0, #6
 800ac0a:	f000 f82b 	bl	800ac64 <raise>
 800ac0e:	2001      	movs	r0, #1
 800ac10:	f7f6 fc1c 	bl	800144c <_exit>

0800ac14 <_raise_r>:
 800ac14:	291f      	cmp	r1, #31
 800ac16:	b538      	push	{r3, r4, r5, lr}
 800ac18:	4604      	mov	r4, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	d904      	bls.n	800ac28 <_raise_r+0x14>
 800ac1e:	2316      	movs	r3, #22
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	f04f 30ff 	mov.w	r0, #4294967295
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac2a:	b112      	cbz	r2, 800ac32 <_raise_r+0x1e>
 800ac2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac30:	b94b      	cbnz	r3, 800ac46 <_raise_r+0x32>
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f830 	bl	800ac98 <_getpid_r>
 800ac38:	462a      	mov	r2, r5
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac42:	f000 b817 	b.w	800ac74 <_kill_r>
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d00a      	beq.n	800ac60 <_raise_r+0x4c>
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	d103      	bne.n	800ac56 <_raise_r+0x42>
 800ac4e:	2316      	movs	r3, #22
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	2001      	movs	r0, #1
 800ac54:	e7e7      	b.n	800ac26 <_raise_r+0x12>
 800ac56:	2400      	movs	r4, #0
 800ac58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	4798      	blx	r3
 800ac60:	2000      	movs	r0, #0
 800ac62:	e7e0      	b.n	800ac26 <_raise_r+0x12>

0800ac64 <raise>:
 800ac64:	4b02      	ldr	r3, [pc, #8]	; (800ac70 <raise+0xc>)
 800ac66:	4601      	mov	r1, r0
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	f7ff bfd3 	b.w	800ac14 <_raise_r>
 800ac6e:	bf00      	nop
 800ac70:	20000010 	.word	0x20000010

0800ac74 <_kill_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	; (800ac94 <_kill_r+0x20>)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4608      	mov	r0, r1
 800ac7e:	4611      	mov	r1, r2
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f7f6 fbd3 	bl	800142c <_kill>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d102      	bne.n	800ac90 <_kill_r+0x1c>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b103      	cbz	r3, 800ac90 <_kill_r+0x1c>
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	bd38      	pop	{r3, r4, r5, pc}
 800ac92:	bf00      	nop
 800ac94:	20005488 	.word	0x20005488

0800ac98 <_getpid_r>:
 800ac98:	f7f6 bbc0 	b.w	800141c <_getpid>

0800ac9c <_init>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr

0800aca8 <_fini>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	bf00      	nop
 800acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acae:	bc08      	pop	{r3}
 800acb0:	469e      	mov	lr, r3
 800acb2:	4770      	bx	lr
